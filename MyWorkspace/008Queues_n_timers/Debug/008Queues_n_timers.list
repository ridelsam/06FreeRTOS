
008Queues_n_timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ca8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  08008e38  08008e38  00018e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092cc  080092cc  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  080092cc  080092cc  000192cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092d4  080092d4  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092d4  080092d4  000192d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092d8  080092d8  000192d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080092dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          00019318  2000008c  2000008c  0002008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200193a4  200193a4  0002008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001785e  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038d0  00000000  00000000  0003791a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001470  00000000  00000000  0003b1f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012f8  00000000  00000000  0003c660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000254cd  00000000  00000000  0003d958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000196a3  00000000  00000000  00062e25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbfd3  00000000  00000000  0007c4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015849b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005dc0  00000000  00000000  001584ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008e20 	.word	0x08008e20

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	08008e20 	.word	0x08008e20

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <led_effect_stop>:


#include "main.h"

void led_effect_stop(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af02      	add	r7, sp, #8
	for(int i = 0 ; i < 4 ; i++)
 80005aa:	2300      	movs	r3, #0
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	e00e      	b.n	80005ce <led_effect_stop+0x2a>
		xTimerStop(handle_led_timer[i],portMAX_DELAY);
 80005b0:	4a0b      	ldr	r2, [pc, #44]	; (80005e0 <led_effect_stop+0x3c>)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005b8:	f04f 33ff 	mov.w	r3, #4294967295
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	2300      	movs	r3, #0
 80005c0:	2200      	movs	r2, #0
 80005c2:	2103      	movs	r1, #3
 80005c4:	f006 fb14 	bl	8006bf0 <xTimerGenericCommand>
	for(int i = 0 ; i < 4 ; i++)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	3301      	adds	r3, #1
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2b03      	cmp	r3, #3
 80005d2:	dded      	ble.n	80005b0 <led_effect_stop+0xc>
}
 80005d4:	bf00      	nop
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000130 	.word	0x20000130

080005e4 <led_effect>:

void led_effect(int n )
{
 80005e4:	b590      	push	{r4, r7, lr}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af02      	add	r7, sp, #8
 80005ea:	6078      	str	r0, [r7, #4]
	led_effect_stop();
 80005ec:	f7ff ffda 	bl	80005a4 <led_effect_stop>
	xTimerStart(handle_led_timer[n-1], portMAX_DELAY);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	3b01      	subs	r3, #1
 80005f4:	4a08      	ldr	r2, [pc, #32]	; (8000618 <led_effect+0x34>)
 80005f6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80005fa:	f005 fbfb 	bl	8005df4 <xTaskGetTickCount>
 80005fe:	4602      	mov	r2, r0
 8000600:	f04f 33ff 	mov.w	r3, #4294967295
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2300      	movs	r3, #0
 8000608:	2101      	movs	r1, #1
 800060a:	4620      	mov	r0, r4
 800060c:	f006 faf0 	bl	8006bf0 <xTimerGenericCommand>

}
 8000610:	bf00      	nop
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	bd90      	pop	{r4, r7, pc}
 8000618:	20000130 	.word	0x20000130

0800061c <turn_off_all_leds>:

void turn_off_all_leds(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000626:	480b      	ldr	r0, [pc, #44]	; (8000654 <turn_off_all_leds+0x38>)
 8000628:	f001 ff50 	bl	80024cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin,GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000632:	4808      	ldr	r0, [pc, #32]	; (8000654 <turn_off_all_leds+0x38>)
 8000634:	f001 ff4a 	bl	80024cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin,GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800063e:	4805      	ldr	r0, [pc, #20]	; (8000654 <turn_off_all_leds+0x38>)
 8000640:	f001 ff44 	bl	80024cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin,GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800064a:	4802      	ldr	r0, [pc, #8]	; (8000654 <turn_off_all_leds+0x38>)
 800064c:	f001 ff3e 	bl	80024cc <HAL_GPIO_WritePin>
}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40020c00 	.word	0x40020c00

08000658 <turn_on_all_leds>:


void turn_on_all_leds(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,GPIO_PIN_SET);
 800065c:	2201      	movs	r2, #1
 800065e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000662:	480b      	ldr	r0, [pc, #44]	; (8000690 <turn_on_all_leds+0x38>)
 8000664:	f001 ff32 	bl	80024cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin,GPIO_PIN_SET);
 8000668:	2201      	movs	r2, #1
 800066a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800066e:	4808      	ldr	r0, [pc, #32]	; (8000690 <turn_on_all_leds+0x38>)
 8000670:	f001 ff2c 	bl	80024cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin,GPIO_PIN_SET);
 8000674:	2201      	movs	r2, #1
 8000676:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <turn_on_all_leds+0x38>)
 800067c:	f001 ff26 	bl	80024cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin,GPIO_PIN_SET);
 8000680:	2201      	movs	r2, #1
 8000682:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000686:	4802      	ldr	r0, [pc, #8]	; (8000690 <turn_on_all_leds+0x38>)
 8000688:	f001 ff20 	bl	80024cc <HAL_GPIO_WritePin>
}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40020c00 	.word	0x40020c00

08000694 <turn_on_odd_leds>:

void turn_on_odd_leds(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LED1,GPIO_PIN_SET);
 8000698:	2201      	movs	r2, #1
 800069a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800069e:	480b      	ldr	r0, [pc, #44]	; (80006cc <turn_on_odd_leds+0x38>)
 80006a0:	f001 ff14 	bl	80024cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LED2,GPIO_PIN_RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006aa:	4808      	ldr	r0, [pc, #32]	; (80006cc <turn_on_odd_leds+0x38>)
 80006ac:	f001 ff0e 	bl	80024cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LED3,GPIO_PIN_SET);
 80006b0:	2201      	movs	r2, #1
 80006b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <turn_on_odd_leds+0x38>)
 80006b8:	f001 ff08 	bl	80024cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LED4,GPIO_PIN_RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006c2:	4802      	ldr	r0, [pc, #8]	; (80006cc <turn_on_odd_leds+0x38>)
 80006c4:	f001 ff02 	bl	80024cc <HAL_GPIO_WritePin>
}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40020c00 	.word	0x40020c00

080006d0 <turn_on_even_leds>:


void turn_on_even_leds(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LED1,GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006da:	480b      	ldr	r0, [pc, #44]	; (8000708 <turn_on_even_leds+0x38>)
 80006dc:	f001 fef6 	bl	80024cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LED2,GPIO_PIN_SET);
 80006e0:	2201      	movs	r2, #1
 80006e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e6:	4808      	ldr	r0, [pc, #32]	; (8000708 <turn_on_even_leds+0x38>)
 80006e8:	f001 fef0 	bl	80024cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LED3,GPIO_PIN_RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <turn_on_even_leds+0x38>)
 80006f4:	f001 feea 	bl	80024cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LED4,GPIO_PIN_SET);
 80006f8:	2201      	movs	r2, #1
 80006fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006fe:	4802      	ldr	r0, [pc, #8]	; (8000708 <turn_on_even_leds+0x38>)
 8000700:	f001 fee4 	bl	80024cc <HAL_GPIO_WritePin>
}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40020c00 	.word	0x40020c00

0800070c <LED_control>:

void LED_control( int value )
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  for(int i = 0 ; i < 4 ; i++)
 8000714:	2300      	movs	r3, #0
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	e014      	b.n	8000744 <LED_control+0x38>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, (LED1 << i), ((value >> i)& 0x1));
 800071a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	fa02 f303 	lsl.w	r3, r2, r3
 8000724:	b299      	uxth	r1, r3
 8000726:	687a      	ldr	r2, [r7, #4]
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	fa42 f303 	asr.w	r3, r2, r3
 800072e:	b2db      	uxtb	r3, r3
 8000730:	f003 0301 	and.w	r3, r3, #1
 8000734:	b2db      	uxtb	r3, r3
 8000736:	461a      	mov	r2, r3
 8000738:	4806      	ldr	r0, [pc, #24]	; (8000754 <LED_control+0x48>)
 800073a:	f001 fec7 	bl	80024cc <HAL_GPIO_WritePin>
  for(int i = 0 ; i < 4 ; i++)
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	3301      	adds	r3, #1
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	2b03      	cmp	r3, #3
 8000748:	dde7      	ble.n	800071a <LED_control+0xe>
}
 800074a:	bf00      	nop
 800074c:	bf00      	nop
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40020c00 	.word	0x40020c00

08000758 <LED_effect1>:


void LED_effect1(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();
 800075c:	4b08      	ldr	r3, [pc, #32]	; (8000780 <LED_effect1+0x28>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f083 0301 	eor.w	r3, r3, #1
 8000764:	4a06      	ldr	r2, [pc, #24]	; (8000780 <LED_effect1+0x28>)
 8000766:	6013      	str	r3, [r2, #0]
 8000768:	4b05      	ldr	r3, [pc, #20]	; (8000780 <LED_effect1+0x28>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d002      	beq.n	8000776 <LED_effect1+0x1e>
 8000770:	f7ff ff54 	bl	800061c <turn_off_all_leds>
}
 8000774:	e001      	b.n	800077a <LED_effect1+0x22>
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();
 8000776:	f7ff ff6f 	bl	8000658 <turn_on_all_leds>
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000000 	.word	0x20000000

08000784 <LED_effect2>:


void LED_effect2(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 8000788:	4b08      	ldr	r3, [pc, #32]	; (80007ac <LED_effect2+0x28>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f083 0301 	eor.w	r3, r3, #1
 8000790:	4a06      	ldr	r2, [pc, #24]	; (80007ac <LED_effect2+0x28>)
 8000792:	6013      	str	r3, [r2, #0]
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <LED_effect2+0x28>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d002      	beq.n	80007a2 <LED_effect2+0x1e>
 800079c:	f7ff ff98 	bl	80006d0 <turn_on_even_leds>
}
 80007a0:	e001      	b.n	80007a6 <LED_effect2+0x22>
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 80007a2:	f7ff ff77 	bl	8000694 <turn_on_odd_leds>
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000004 	.word	0x20000004

080007b0 <LED_effect3>:

void LED_effect3(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control( 0x1 << (i++ % 4) );
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <LED_effect3+0x2c>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	1c5a      	adds	r2, r3, #1
 80007ba:	4908      	ldr	r1, [pc, #32]	; (80007dc <LED_effect3+0x2c>)
 80007bc:	600a      	str	r2, [r1, #0]
 80007be:	425a      	negs	r2, r3
 80007c0:	f003 0303 	and.w	r3, r3, #3
 80007c4:	f002 0203 	and.w	r2, r2, #3
 80007c8:	bf58      	it	pl
 80007ca:	4253      	negpl	r3, r2
 80007cc:	2201      	movs	r2, #1
 80007ce:	fa02 f303 	lsl.w	r3, r2, r3
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff ff9a 	bl	800070c <LED_control>
}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	200000a8 	.word	0x200000a8

080007e0 <LED_effect4>:


void LED_effect4(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control( 0x08 >> (i++ % 4) );
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <LED_effect4+0x2c>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	1c5a      	adds	r2, r3, #1
 80007ea:	4908      	ldr	r1, [pc, #32]	; (800080c <LED_effect4+0x2c>)
 80007ec:	600a      	str	r2, [r1, #0]
 80007ee:	425a      	negs	r2, r3
 80007f0:	f003 0303 	and.w	r3, r3, #3
 80007f4:	f002 0203 	and.w	r2, r2, #3
 80007f8:	bf58      	it	pl
 80007fa:	4253      	negpl	r3, r2
 80007fc:	2208      	movs	r2, #8
 80007fe:	fa42 f303 	asr.w	r3, r2, r3
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ff82 	bl	800070c <LED_control>
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	200000ac 	.word	0x200000ac

08000810 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08c      	sub	sp, #48	; 0x30
 8000814:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000816:	f001 fb07 	bl	8001e28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800081a:	f000 f911 	bl	8000a40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081e:	f000 f9e1 	bl	8000be4 <MX_GPIO_Init>
  MX_RTC_Init();
 8000822:	f000 f98f 	bl	8000b44 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000826:	f000 f9b3 	bl	8000b90 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


	status = xTaskCreate(menu_task, "menu_task", 250, NULL, 2, &handle_menu_task);
 800082a:	4b6c      	ldr	r3, [pc, #432]	; (80009dc <main+0x1cc>)
 800082c:	9301      	str	r3, [sp, #4]
 800082e:	2302      	movs	r3, #2
 8000830:	9300      	str	r3, [sp, #0]
 8000832:	2300      	movs	r3, #0
 8000834:	22fa      	movs	r2, #250	; 0xfa
 8000836:	496a      	ldr	r1, [pc, #424]	; (80009e0 <main+0x1d0>)
 8000838:	486a      	ldr	r0, [pc, #424]	; (80009e4 <main+0x1d4>)
 800083a:	f005 f899 	bl	8005970 <xTaskCreate>
 800083e:	6238      	str	r0, [r7, #32]

	configASSERT(status == pdPASS);
 8000840:	6a3b      	ldr	r3, [r7, #32]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d00a      	beq.n	800085c <main+0x4c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800084a:	f383 8811 	msr	BASEPRI, r3
 800084e:	f3bf 8f6f 	isb	sy
 8000852:	f3bf 8f4f 	dsb	sy
 8000856:	61fb      	str	r3, [r7, #28]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000858:	bf00      	nop
 800085a:	e7fe      	b.n	800085a <main+0x4a>

	status = xTaskCreate(cmd_handler_task, "cmd_task", 250, NULL, 2, &handle_cmd_task);
 800085c:	4b62      	ldr	r3, [pc, #392]	; (80009e8 <main+0x1d8>)
 800085e:	9301      	str	r3, [sp, #4]
 8000860:	2302      	movs	r3, #2
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	2300      	movs	r3, #0
 8000866:	22fa      	movs	r2, #250	; 0xfa
 8000868:	4960      	ldr	r1, [pc, #384]	; (80009ec <main+0x1dc>)
 800086a:	4861      	ldr	r0, [pc, #388]	; (80009f0 <main+0x1e0>)
 800086c:	f005 f880 	bl	8005970 <xTaskCreate>
 8000870:	6238      	str	r0, [r7, #32]

	configASSERT(status == pdPASS);
 8000872:	6a3b      	ldr	r3, [r7, #32]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d00a      	beq.n	800088e <main+0x7e>
        __asm volatile
 8000878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800087c:	f383 8811 	msr	BASEPRI, r3
 8000880:	f3bf 8f6f 	isb	sy
 8000884:	f3bf 8f4f 	dsb	sy
 8000888:	61bb      	str	r3, [r7, #24]
    }
 800088a:	bf00      	nop
 800088c:	e7fe      	b.n	800088c <main+0x7c>

	status = xTaskCreate(print_task, "print_task", 250, NULL, 2, &handle_print_task);
 800088e:	4b59      	ldr	r3, [pc, #356]	; (80009f4 <main+0x1e4>)
 8000890:	9301      	str	r3, [sp, #4]
 8000892:	2302      	movs	r3, #2
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	2300      	movs	r3, #0
 8000898:	22fa      	movs	r2, #250	; 0xfa
 800089a:	4957      	ldr	r1, [pc, #348]	; (80009f8 <main+0x1e8>)
 800089c:	4857      	ldr	r0, [pc, #348]	; (80009fc <main+0x1ec>)
 800089e:	f005 f867 	bl	8005970 <xTaskCreate>
 80008a2:	6238      	str	r0, [r7, #32]

	configASSERT(status == pdPASS);
 80008a4:	6a3b      	ldr	r3, [r7, #32]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d00a      	beq.n	80008c0 <main+0xb0>
        __asm volatile
 80008aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008ae:	f383 8811 	msr	BASEPRI, r3
 80008b2:	f3bf 8f6f 	isb	sy
 80008b6:	f3bf 8f4f 	dsb	sy
 80008ba:	617b      	str	r3, [r7, #20]
    }
 80008bc:	bf00      	nop
 80008be:	e7fe      	b.n	80008be <main+0xae>

	status = xTaskCreate(led_task, "led_task", 250, NULL, 2, &handle_led_task);
 80008c0:	4b4f      	ldr	r3, [pc, #316]	; (8000a00 <main+0x1f0>)
 80008c2:	9301      	str	r3, [sp, #4]
 80008c4:	2302      	movs	r3, #2
 80008c6:	9300      	str	r3, [sp, #0]
 80008c8:	2300      	movs	r3, #0
 80008ca:	22fa      	movs	r2, #250	; 0xfa
 80008cc:	494d      	ldr	r1, [pc, #308]	; (8000a04 <main+0x1f4>)
 80008ce:	484e      	ldr	r0, [pc, #312]	; (8000a08 <main+0x1f8>)
 80008d0:	f005 f84e 	bl	8005970 <xTaskCreate>
 80008d4:	6238      	str	r0, [r7, #32]

	configASSERT(status == pdPASS);
 80008d6:	6a3b      	ldr	r3, [r7, #32]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d00a      	beq.n	80008f2 <main+0xe2>
        __asm volatile
 80008dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008e0:	f383 8811 	msr	BASEPRI, r3
 80008e4:	f3bf 8f6f 	isb	sy
 80008e8:	f3bf 8f4f 	dsb	sy
 80008ec:	613b      	str	r3, [r7, #16]
    }
 80008ee:	bf00      	nop
 80008f0:	e7fe      	b.n	80008f0 <main+0xe0>

	status = xTaskCreate(rtc_task, "rtc_task", 250, NULL, 2, &handle_rtc_task);
 80008f2:	4b46      	ldr	r3, [pc, #280]	; (8000a0c <main+0x1fc>)
 80008f4:	9301      	str	r3, [sp, #4]
 80008f6:	2302      	movs	r3, #2
 80008f8:	9300      	str	r3, [sp, #0]
 80008fa:	2300      	movs	r3, #0
 80008fc:	22fa      	movs	r2, #250	; 0xfa
 80008fe:	4944      	ldr	r1, [pc, #272]	; (8000a10 <main+0x200>)
 8000900:	4844      	ldr	r0, [pc, #272]	; (8000a14 <main+0x204>)
 8000902:	f005 f835 	bl	8005970 <xTaskCreate>
 8000906:	6238      	str	r0, [r7, #32]

	configASSERT(status == pdPASS);
 8000908:	6a3b      	ldr	r3, [r7, #32]
 800090a:	2b01      	cmp	r3, #1
 800090c:	d00a      	beq.n	8000924 <main+0x114>
        __asm volatile
 800090e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000912:	f383 8811 	msr	BASEPRI, r3
 8000916:	f3bf 8f6f 	isb	sy
 800091a:	f3bf 8f4f 	dsb	sy
 800091e:	60fb      	str	r3, [r7, #12]
    }
 8000920:	bf00      	nop
 8000922:	e7fe      	b.n	8000922 <main+0x112>

	q_data = xQueueCreate (10, sizeof(char));
 8000924:	2200      	movs	r2, #0
 8000926:	2101      	movs	r1, #1
 8000928:	200a      	movs	r0, #10
 800092a:	f004 fad5 	bl	8004ed8 <xQueueGenericCreate>
 800092e:	4603      	mov	r3, r0
 8000930:	4a39      	ldr	r2, [pc, #228]	; (8000a18 <main+0x208>)
 8000932:	6013      	str	r3, [r2, #0]

	configASSERT(q_data != NULL);
 8000934:	4b38      	ldr	r3, [pc, #224]	; (8000a18 <main+0x208>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d10a      	bne.n	8000952 <main+0x142>
        __asm volatile
 800093c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000940:	f383 8811 	msr	BASEPRI, r3
 8000944:	f3bf 8f6f 	isb	sy
 8000948:	f3bf 8f4f 	dsb	sy
 800094c:	60bb      	str	r3, [r7, #8]
    }
 800094e:	bf00      	nop
 8000950:	e7fe      	b.n	8000950 <main+0x140>

	q_print = xQueueCreate (10, sizeof(size_t));
 8000952:	2200      	movs	r2, #0
 8000954:	2104      	movs	r1, #4
 8000956:	200a      	movs	r0, #10
 8000958:	f004 fabe 	bl	8004ed8 <xQueueGenericCreate>
 800095c:	4603      	mov	r3, r0
 800095e:	4a2f      	ldr	r2, [pc, #188]	; (8000a1c <main+0x20c>)
 8000960:	6013      	str	r3, [r2, #0]

	configASSERT(q_print != NULL);
 8000962:	4b2e      	ldr	r3, [pc, #184]	; (8000a1c <main+0x20c>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d10a      	bne.n	8000980 <main+0x170>
        __asm volatile
 800096a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800096e:	f383 8811 	msr	BASEPRI, r3
 8000972:	f3bf 8f6f 	isb	sy
 8000976:	f3bf 8f4f 	dsb	sy
 800097a:	607b      	str	r3, [r7, #4]
    }
 800097c:	bf00      	nop
 800097e:	e7fe      	b.n	800097e <main+0x16e>


	//Create software timers for LED effects
	for(int i = 0 ; i < 4 ; i++)
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
 8000984:	e013      	b.n	80009ae <main+0x19e>
		handle_led_timer[i] = xTimerCreate("led_timer",pdMS_TO_TICKS(500),pdTRUE, (void*)(i+1),led_effect_callback);
 8000986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000988:	3301      	adds	r3, #1
 800098a:	461a      	mov	r2, r3
 800098c:	4b24      	ldr	r3, [pc, #144]	; (8000a20 <main+0x210>)
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	4613      	mov	r3, r2
 8000992:	2201      	movs	r2, #1
 8000994:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000998:	4822      	ldr	r0, [pc, #136]	; (8000a24 <main+0x214>)
 800099a:	f006 f8cd 	bl	8006b38 <xTimerCreate>
 800099e:	4602      	mov	r2, r0
 80009a0:	4921      	ldr	r1, [pc, #132]	; (8000a28 <main+0x218>)
 80009a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0 ; i < 4 ; i++)
 80009a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009aa:	3301      	adds	r3, #1
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
 80009ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b0:	2b03      	cmp	r3, #3
 80009b2:	dde8      	ble.n	8000986 <main+0x176>


	rtc_timer = xTimerCreate ("rtc_report_timer",pdMS_TO_TICKS(1000),pdTRUE,NULL,rtc_report_callback);
 80009b4:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <main+0x21c>)
 80009b6:	9300      	str	r3, [sp, #0]
 80009b8:	2300      	movs	r3, #0
 80009ba:	2201      	movs	r2, #1
 80009bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009c0:	481b      	ldr	r0, [pc, #108]	; (8000a30 <main+0x220>)
 80009c2:	f006 f8b9 	bl	8006b38 <xTimerCreate>
 80009c6:	4603      	mov	r3, r0
 80009c8:	4a1a      	ldr	r2, [pc, #104]	; (8000a34 <main+0x224>)
 80009ca:	6013      	str	r3, [r2, #0]

	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 80009cc:	2201      	movs	r2, #1
 80009ce:	491a      	ldr	r1, [pc, #104]	; (8000a38 <main+0x228>)
 80009d0:	481a      	ldr	r0, [pc, #104]	; (8000a3c <main+0x22c>)
 80009d2:	f003 f9cc 	bl	8003d6e <HAL_UART_Receive_IT>

	vTaskStartScheduler();
 80009d6:	f005 f911 	bl	8005bfc <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009da:	e7fe      	b.n	80009da <main+0x1ca>
 80009dc:	20000118 	.word	0x20000118
 80009e0:	08008e38 	.word	0x08008e38
 80009e4:	080015b1 	.word	0x080015b1
 80009e8:	20000114 	.word	0x20000114
 80009ec:	08008e44 	.word	0x08008e44
 80009f0:	08001cb9 	.word	0x08001cb9
 80009f4:	2000011c 	.word	0x2000011c
 80009f8:	08008e50 	.word	0x08008e50
 80009fc:	08001c79 	.word	0x08001c79
 8000a00:	20000120 	.word	0x20000120
 8000a04:	08008e5c 	.word	0x08008e5c
 8000a08:	08001699 	.word	0x08001699
 8000a0c:	20000124 	.word	0x20000124
 8000a10:	08008e68 	.word	0x08008e68
 8000a14:	0800180d 	.word	0x0800180d
 8000a18:	20000128 	.word	0x20000128
 8000a1c:	2000012c 	.word	0x2000012c
 8000a20:	08000eb5 	.word	0x08000eb5
 8000a24:	08008e74 	.word	0x08008e74
 8000a28:	20000130 	.word	0x20000130
 8000a2c:	08000ea1 	.word	0x08000ea1
 8000a30:	08008e80 	.word	0x08008e80
 8000a34:	20000140 	.word	0x20000140
 8000a38:	20000144 	.word	0x20000144
 8000a3c:	200000d0 	.word	0x200000d0

08000a40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b098      	sub	sp, #96	; 0x60
 8000a44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a4a:	2230      	movs	r2, #48	; 0x30
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f007 f882 	bl	8007b58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a54:	f107 031c 	add.w	r3, r7, #28
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a64:	f107 030c 	add.w	r3, r7, #12
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	4b31      	ldr	r3, [pc, #196]	; (8000b3c <SystemClock_Config+0xfc>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	4a30      	ldr	r2, [pc, #192]	; (8000b3c <SystemClock_Config+0xfc>)
 8000a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a80:	6413      	str	r3, [r2, #64]	; 0x40
 8000a82:	4b2e      	ldr	r3, [pc, #184]	; (8000b3c <SystemClock_Config+0xfc>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	4b2b      	ldr	r3, [pc, #172]	; (8000b40 <SystemClock_Config+0x100>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a2a      	ldr	r2, [pc, #168]	; (8000b40 <SystemClock_Config+0x100>)
 8000a98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a9c:	6013      	str	r3, [r2, #0]
 8000a9e:	4b28      	ldr	r3, [pc, #160]	; (8000b40 <SystemClock_Config+0x100>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000aaa:	230a      	movs	r3, #10
 8000aac:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ab2:	2310      	movs	r3, #16
 8000ab4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aba:	2302      	movs	r3, #2
 8000abc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ac2:	2308      	movs	r3, #8
 8000ac4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000ac6:	2332      	movs	r3, #50	; 0x32
 8000ac8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000aca:	2304      	movs	r3, #4
 8000acc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ace:	2307      	movs	r3, #7
 8000ad0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f001 fd12 	bl	8002500 <HAL_RCC_OscConfig>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000ae2:	f000 fa75 	bl	8000fd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae6:	230f      	movs	r3, #15
 8000ae8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aea:	2302      	movs	r3, #2
 8000aec:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000af2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000af8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000afc:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	2100      	movs	r1, #0
 8000b04:	4618      	mov	r0, r3
 8000b06:	f001 ff73 	bl	80029f0 <HAL_RCC_ClockConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000b10:	f000 fa5e 	bl	8000fd0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b14:	2302      	movs	r3, #2
 8000b16:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b1c:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b1e:	f107 030c 	add.w	r3, r7, #12
 8000b22:	4618      	mov	r0, r3
 8000b24:	f002 f9b6 	bl	8002e94 <HAL_RCCEx_PeriphCLKConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000b2e:	f000 fa4f 	bl	8000fd0 <Error_Handler>
  }
}
 8000b32:	bf00      	nop
 8000b34:	3760      	adds	r7, #96	; 0x60
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40007000 	.word	0x40007000

08000b44 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <MX_RTC_Init+0x44>)
 8000b4a:	4a10      	ldr	r2, [pc, #64]	; (8000b8c <MX_RTC_Init+0x48>)
 8000b4c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <MX_RTC_Init+0x44>)
 8000b50:	2240      	movs	r2, #64	; 0x40
 8000b52:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <MX_RTC_Init+0x44>)
 8000b56:	227f      	movs	r2, #127	; 0x7f
 8000b58:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <MX_RTC_Init+0x44>)
 8000b5c:	22ff      	movs	r2, #255	; 0xff
 8000b5e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b60:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <MX_RTC_Init+0x44>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b66:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <MX_RTC_Init+0x44>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <MX_RTC_Init+0x44>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b72:	4805      	ldr	r0, [pc, #20]	; (8000b88 <MX_RTC_Init+0x44>)
 8000b74:	f002 fa70 	bl	8003058 <HAL_RTC_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000b7e:	f000 fa27 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200000b0 	.word	0x200000b0
 8000b8c:	40002800 	.word	0x40002800

08000b90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b94:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000b96:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_USART2_UART_Init+0x50>)
 8000b98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b9a:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000b9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ba0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bb4:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bba:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bc6:	4805      	ldr	r0, [pc, #20]	; (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000bc8:	f002 fff2 	bl	8003bb0 <HAL_UART_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bd2:	f000 f9fd 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200000d0 	.word	0x200000d0
 8000be0:	40004400 	.word	0x40004400

08000be4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08c      	sub	sp, #48	; 0x30
 8000be8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bea:	f107 031c 	add.w	r3, r7, #28
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]
 8000bf8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61bb      	str	r3, [r7, #24]
 8000bfe:	4ba2      	ldr	r3, [pc, #648]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4aa1      	ldr	r2, [pc, #644]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c04:	f043 0310 	orr.w	r3, r3, #16
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b9f      	ldr	r3, [pc, #636]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0310 	and.w	r3, r3, #16
 8000c12:	61bb      	str	r3, [r7, #24]
 8000c14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
 8000c1a:	4b9b      	ldr	r3, [pc, #620]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a9a      	ldr	r2, [pc, #616]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c20:	f043 0304 	orr.w	r3, r3, #4
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b98      	ldr	r3, [pc, #608]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0304 	and.w	r3, r3, #4
 8000c2e:	617b      	str	r3, [r7, #20]
 8000c30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	4b94      	ldr	r3, [pc, #592]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a93      	ldr	r2, [pc, #588]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b91      	ldr	r3, [pc, #580]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	4b8d      	ldr	r3, [pc, #564]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a8c      	ldr	r2, [pc, #560]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b8a      	ldr	r3, [pc, #552]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	4b86      	ldr	r3, [pc, #536]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a85      	ldr	r2, [pc, #532]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c74:	f043 0302 	orr.w	r3, r3, #2
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b83      	ldr	r3, [pc, #524]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0302 	and.w	r3, r3, #2
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	4b7f      	ldr	r3, [pc, #508]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a7e      	ldr	r2, [pc, #504]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c90:	f043 0308 	orr.w	r3, r3, #8
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b7c      	ldr	r3, [pc, #496]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0308 	and.w	r3, r3, #8
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2108      	movs	r1, #8
 8000ca6:	4879      	ldr	r0, [pc, #484]	; (8000e8c <MX_GPIO_Init+0x2a8>)
 8000ca8:	f001 fc10 	bl	80024cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000cac:	2201      	movs	r2, #1
 8000cae:	2101      	movs	r1, #1
 8000cb0:	4877      	ldr	r0, [pc, #476]	; (8000e90 <MX_GPIO_Init+0x2ac>)
 8000cb2:	f001 fc0b 	bl	80024cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000cbc:	4875      	ldr	r0, [pc, #468]	; (8000e94 <MX_GPIO_Init+0x2b0>)
 8000cbe:	f001 fc05 	bl	80024cc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000cc2:	2308      	movs	r3, #8
 8000cc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000cd2:	f107 031c 	add.w	r3, r7, #28
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	486c      	ldr	r0, [pc, #432]	; (8000e8c <MX_GPIO_Init+0x2a8>)
 8000cda:	f001 fa5b 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	2300      	movs	r3, #0
 8000cec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000cee:	f107 031c 	add.w	r3, r7, #28
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4866      	ldr	r0, [pc, #408]	; (8000e90 <MX_GPIO_Init+0x2ac>)
 8000cf6:	f001 fa4d 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000cfa:	2308      	movs	r3, #8
 8000cfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d0a:	2305      	movs	r3, #5
 8000d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d0e:	f107 031c 	add.w	r3, r7, #28
 8000d12:	4619      	mov	r1, r3
 8000d14:	485e      	ldr	r0, [pc, #376]	; (8000e90 <MX_GPIO_Init+0x2ac>)
 8000d16:	f001 fa3d 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d1e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d28:	f107 031c 	add.w	r3, r7, #28
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	485a      	ldr	r0, [pc, #360]	; (8000e98 <MX_GPIO_Init+0x2b4>)
 8000d30:	f001 fa30 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d34:	2310      	movs	r3, #16
 8000d36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d44:	2306      	movs	r3, #6
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d48:	f107 031c 	add.w	r3, r7, #28
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4852      	ldr	r0, [pc, #328]	; (8000e98 <MX_GPIO_Init+0x2b4>)
 8000d50:	f001 fa20 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d54:	23e0      	movs	r3, #224	; 0xe0
 8000d56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d64:	2305      	movs	r3, #5
 8000d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d68:	f107 031c 	add.w	r3, r7, #28
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	484a      	ldr	r0, [pc, #296]	; (8000e98 <MX_GPIO_Init+0x2b4>)
 8000d70:	f001 fa10 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d74:	2304      	movs	r3, #4
 8000d76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d80:	f107 031c 	add.w	r3, r7, #28
 8000d84:	4619      	mov	r1, r3
 8000d86:	4845      	ldr	r0, [pc, #276]	; (8000e9c <MX_GPIO_Init+0x2b8>)
 8000d88:	f001 fa04 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000d8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d9e:	2305      	movs	r3, #5
 8000da0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000da2:	f107 031c 	add.w	r3, r7, #28
 8000da6:	4619      	mov	r1, r3
 8000da8:	483c      	ldr	r0, [pc, #240]	; (8000e9c <MX_GPIO_Init+0x2b8>)
 8000daa:	f001 f9f3 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000dae:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000db2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db4:	2301      	movs	r3, #1
 8000db6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dc0:	f107 031c 	add.w	r3, r7, #28
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4833      	ldr	r0, [pc, #204]	; (8000e94 <MX_GPIO_Init+0x2b0>)
 8000dc8:	f001 f9e4 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000dcc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000dd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dde:	2306      	movs	r3, #6
 8000de0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de2:	f107 031c 	add.w	r3, r7, #28
 8000de6:	4619      	mov	r1, r3
 8000de8:	4829      	ldr	r0, [pc, #164]	; (8000e90 <MX_GPIO_Init+0x2ac>)
 8000dea:	f001 f9d3 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000dee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000df2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df4:	2300      	movs	r3, #0
 8000df6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000dfc:	f107 031c 	add.w	r3, r7, #28
 8000e00:	4619      	mov	r1, r3
 8000e02:	4825      	ldr	r0, [pc, #148]	; (8000e98 <MX_GPIO_Init+0x2b4>)
 8000e04:	f001 f9c6 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000e08:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000e0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e1a:	230a      	movs	r3, #10
 8000e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1e:	f107 031c 	add.w	r3, r7, #28
 8000e22:	4619      	mov	r1, r3
 8000e24:	481c      	ldr	r0, [pc, #112]	; (8000e98 <MX_GPIO_Init+0x2b4>)
 8000e26:	f001 f9b5 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000e2a:	2320      	movs	r3, #32
 8000e2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e36:	f107 031c 	add.w	r3, r7, #28
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4815      	ldr	r0, [pc, #84]	; (8000e94 <MX_GPIO_Init+0x2b0>)
 8000e3e:	f001 f9a9 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000e42:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000e46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e48:	2312      	movs	r3, #18
 8000e4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e50:	2300      	movs	r3, #0
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e54:	2304      	movs	r3, #4
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e58:	f107 031c 	add.w	r3, r7, #28
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	480f      	ldr	r0, [pc, #60]	; (8000e9c <MX_GPIO_Init+0x2b8>)
 8000e60:	f001 f998 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000e64:	2302      	movs	r3, #2
 8000e66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e68:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000e72:	f107 031c 	add.w	r3, r7, #28
 8000e76:	4619      	mov	r1, r3
 8000e78:	4804      	ldr	r0, [pc, #16]	; (8000e8c <MX_GPIO_Init+0x2a8>)
 8000e7a:	f001 f98b 	bl	8002194 <HAL_GPIO_Init>

}
 8000e7e:	bf00      	nop
 8000e80:	3730      	adds	r7, #48	; 0x30
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	40020800 	.word	0x40020800
 8000e94:	40020c00 	.word	0x40020c00
 8000e98:	40020000 	.word	0x40020000
 8000e9c:	40020400 	.word	0x40020400

08000ea0 <rtc_report_callback>:

/* USER CODE BEGIN 4 */

void rtc_report_callback( TimerHandle_t xTimer )
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	 show_time_date_itm();
 8000ea8:	f000 f898 	bl	8000fdc <show_time_date_itm>

}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <led_effect_callback>:


void led_effect_callback(TimerHandle_t xTimer)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	 int id;
	 id = ( uint32_t ) pvTimerGetTimerID( xTimer );
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f006 f9a0 	bl	8007202 <pvTimerGetTimerID>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	60fb      	str	r3, [r7, #12]

	 switch(id)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	2b03      	cmp	r3, #3
 8000ecc:	d816      	bhi.n	8000efc <led_effect_callback+0x48>
 8000ece:	a201      	add	r2, pc, #4	; (adr r2, 8000ed4 <led_effect_callback+0x20>)
 8000ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed4:	08000ee5 	.word	0x08000ee5
 8000ed8:	08000eeb 	.word	0x08000eeb
 8000edc:	08000ef1 	.word	0x08000ef1
 8000ee0:	08000ef7 	.word	0x08000ef7
	 {
	 case 1 :
		 LED_effect1();
 8000ee4:	f7ff fc38 	bl	8000758 <LED_effect1>
		 break;
 8000ee8:	e008      	b.n	8000efc <led_effect_callback+0x48>
	 case 2:
		 LED_effect2();
 8000eea:	f7ff fc4b 	bl	8000784 <LED_effect2>
		 break;
 8000eee:	e005      	b.n	8000efc <led_effect_callback+0x48>
	 case 3:
		 LED_effect3();
 8000ef0:	f7ff fc5e 	bl	80007b0 <LED_effect3>
		 break;
 8000ef4:	e002      	b.n	8000efc <led_effect_callback+0x48>
	 case 4:
		 LED_effect4();
 8000ef6:	f7ff fc73 	bl	80007e0 <LED_effect4>
	 }


}
 8000efa:	e7ff      	b.n	8000efc <led_effect_callback+0x48>
 8000efc:	bf00      	nop
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <HAL_UART_RxCpltCallback>:


/* This function called from UART interrupt handler , hence executes in interrupt context */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af02      	add	r7, sp, #8
 8000f0a:	6078      	str	r0, [r7, #4]
	uint8_t dummy;

	for(uint32_t i = 0 ; i < 4000 ; i++);
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	e002      	b.n	8000f18 <HAL_UART_RxCpltCallback+0x14>
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	3301      	adds	r3, #1
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000f1e:	d3f8      	bcc.n	8000f12 <HAL_UART_RxCpltCallback+0xe>

	if(! xQueueIsQueueFullFromISR(q_data))
 8000f20:	4b1e      	ldr	r3, [pc, #120]	; (8000f9c <HAL_UART_RxCpltCallback+0x98>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f004 fc9e 	bl	8005866 <xQueueIsQueueFullFromISR>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d107      	bne.n	8000f40 <HAL_UART_RxCpltCallback+0x3c>
	{
		/*Enqueue data byte */
		xQueueSendFromISR(q_data , (void*)&user_data , NULL);
 8000f30:	4b1a      	ldr	r3, [pc, #104]	; (8000f9c <HAL_UART_RxCpltCallback+0x98>)
 8000f32:	6818      	ldr	r0, [r3, #0]
 8000f34:	2300      	movs	r3, #0
 8000f36:	2200      	movs	r2, #0
 8000f38:	4919      	ldr	r1, [pc, #100]	; (8000fa0 <HAL_UART_RxCpltCallback+0x9c>)
 8000f3a:	f004 f94d 	bl	80051d8 <xQueueGenericSendFromISR>
 8000f3e:	e013      	b.n	8000f68 <HAL_UART_RxCpltCallback+0x64>
	}else{
		if(user_data == '\n')
 8000f40:	4b17      	ldr	r3, [pc, #92]	; (8000fa0 <HAL_UART_RxCpltCallback+0x9c>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b0a      	cmp	r3, #10
 8000f48:	d10e      	bne.n	8000f68 <HAL_UART_RxCpltCallback+0x64>
		{
			/*Make sure that last data byte of the queue is '\n' */
			xQueueReceiveFromISR(q_data,(void*)&dummy,NULL);
 8000f4a:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <HAL_UART_RxCpltCallback+0x98>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f107 010b 	add.w	r1, r7, #11
 8000f52:	2200      	movs	r2, #0
 8000f54:	4618      	mov	r0, r3
 8000f56:	f004 fac9 	bl	80054ec <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data ,(void*)&user_data , NULL);
 8000f5a:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <HAL_UART_RxCpltCallback+0x98>)
 8000f5c:	6818      	ldr	r0, [r3, #0]
 8000f5e:	2300      	movs	r3, #0
 8000f60:	2200      	movs	r2, #0
 8000f62:	490f      	ldr	r1, [pc, #60]	; (8000fa0 <HAL_UART_RxCpltCallback+0x9c>)
 8000f64:	f004 f938 	bl	80051d8 <xQueueGenericSendFromISR>
		}
	}

	/*Send notification to command handling task if user_data = '\n' */
	if( user_data == '\n' ){
 8000f68:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <HAL_UART_RxCpltCallback+0x9c>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b0a      	cmp	r3, #10
 8000f70:	d10a      	bne.n	8000f88 <HAL_UART_RxCpltCallback+0x84>
		/*send notification to command handling task */
		xTaskNotifyFromISR (handle_cmd_task,0,eNoAction,NULL);
 8000f72:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <HAL_UART_RxCpltCallback+0xa0>)
 8000f74:	6818      	ldr	r0, [r3, #0]
 8000f76:	2300      	movs	r3, #0
 8000f78:	9301      	str	r3, [sp, #4]
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	2300      	movs	r3, #0
 8000f80:	2200      	movs	r2, #0
 8000f82:	2100      	movs	r1, #0
 8000f84:	f005 fc3e 	bl	8006804 <xTaskGenericNotifyFromISR>
	}

	/* Enable UART data byte reception again in IT mode */
	 HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	4905      	ldr	r1, [pc, #20]	; (8000fa0 <HAL_UART_RxCpltCallback+0x9c>)
 8000f8c:	4806      	ldr	r0, [pc, #24]	; (8000fa8 <HAL_UART_RxCpltCallback+0xa4>)
 8000f8e:	f002 feee 	bl	8003d6e <HAL_UART_Receive_IT>


}
 8000f92:	bf00      	nop
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000128 	.word	0x20000128
 8000fa0:	20000144 	.word	0x20000144
 8000fa4:	20000114 	.word	0x20000114
 8000fa8:	200000d0 	.word	0x200000d0

08000fac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a04      	ldr	r2, [pc, #16]	; (8000fcc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d101      	bne.n	8000fc2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fbe:	f000 ff55 	bl	8001e6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40001000 	.word	0x40001000

08000fd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd4:	b672      	cpsid	i
}
 8000fd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <Error_Handler+0x8>
	...

08000fdc <show_time_date_itm>:


#include "main.h"

 void show_time_date_itm(void)
 {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08a      	sub	sp, #40	; 0x28
 8000fe0:	af02      	add	r7, sp, #8
	RTC_DateTypeDef rtc_date;
	RTC_TimeTypeDef rtc_time;

	memset(&rtc_date,0,sizeof(rtc_date));
 8000fe2:	f107 0318 	add.w	r3, r7, #24
 8000fe6:	2204      	movs	r2, #4
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f006 fdb4 	bl	8007b58 <memset>
	memset(&rtc_time,0,sizeof(rtc_time));
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	2214      	movs	r2, #20
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f006 fdae 	bl	8007b58 <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	2200      	movs	r2, #0
 8001000:	4619      	mov	r1, r3
 8001002:	4815      	ldr	r0, [pc, #84]	; (8001058 <show_time_date_itm+0x7c>)
 8001004:	f002 f938 	bl	8003278 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8001008:	f107 0318 	add.w	r3, r7, #24
 800100c:	2200      	movs	r2, #0
 800100e:	4619      	mov	r1, r3
 8001010:	4811      	ldr	r0, [pc, #68]	; (8001058 <show_time_date_itm+0x7c>)
 8001012:	f002 fa13 	bl	800343c <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d101      	bne.n	8001020 <show_time_date_itm+0x44>
 800101c:	4b0f      	ldr	r3, [pc, #60]	; (800105c <show_time_date_itm+0x80>)
 800101e:	e000      	b.n	8001022 <show_time_date_itm+0x46>
 8001020:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <show_time_date_itm+0x84>)
 8001022:	61fb      	str	r3, [r7, #28]


	printf("%02d:%02d:%02d [%s]",rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds,format);
 8001024:	793b      	ldrb	r3, [r7, #4]
 8001026:	4619      	mov	r1, r3
 8001028:	797b      	ldrb	r3, [r7, #5]
 800102a:	461a      	mov	r2, r3
 800102c:	79bb      	ldrb	r3, [r7, #6]
 800102e:	4618      	mov	r0, r3
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	4603      	mov	r3, r0
 8001036:	480b      	ldr	r0, [pc, #44]	; (8001064 <show_time_date_itm+0x88>)
 8001038:	f006 fd96 	bl	8007b68 <iprintf>
	printf("\t%02d-%02d-%2d\n",rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 800103c:	7e7b      	ldrb	r3, [r7, #25]
 800103e:	4619      	mov	r1, r3
 8001040:	7ebb      	ldrb	r3, [r7, #26]
 8001042:	461a      	mov	r2, r3
 8001044:	7efb      	ldrb	r3, [r7, #27]
 8001046:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800104a:	4807      	ldr	r0, [pc, #28]	; (8001068 <show_time_date_itm+0x8c>)
 800104c:	f006 fd8c 	bl	8007b68 <iprintf>

 }
 8001050:	bf00      	nop
 8001052:	3720      	adds	r7, #32
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	200000b0 	.word	0x200000b0
 800105c:	08008e94 	.word	0x08008e94
 8001060:	08008e98 	.word	0x08008e98
 8001064:	08008e9c 	.word	0x08008e9c
 8001068:	08008eb0 	.word	0x08008eb0

0800106c <show_time_date>:

void show_time_date(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08c      	sub	sp, #48	; 0x30
 8001070:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef rtc_time;

	static char *time = showtime;
	static char *date = showdate;

	memset(&rtc_date,0,sizeof(rtc_date));
 8001072:	f107 0318 	add.w	r3, r7, #24
 8001076:	2204      	movs	r2, #4
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f006 fd6c 	bl	8007b58 <memset>
	memset(&rtc_time,0,sizeof(rtc_time));
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	2214      	movs	r2, #20
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f006 fd66 	bl	8007b58 <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	2200      	movs	r2, #0
 8001090:	4619      	mov	r1, r3
 8001092:	4821      	ldr	r0, [pc, #132]	; (8001118 <show_time_date+0xac>)
 8001094:	f002 f8f0 	bl	8003278 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8001098:	f107 0318 	add.w	r3, r7, #24
 800109c:	2200      	movs	r2, #0
 800109e:	4619      	mov	r1, r3
 80010a0:	481d      	ldr	r0, [pc, #116]	; (8001118 <show_time_date+0xac>)
 80010a2:	f002 f9cb 	bl	800343c <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d101      	bne.n	80010b0 <show_time_date+0x44>
 80010ac:	4b1b      	ldr	r3, [pc, #108]	; (800111c <show_time_date+0xb0>)
 80010ae:	e000      	b.n	80010b2 <show_time_date+0x46>
 80010b0:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <show_time_date+0xb4>)
 80010b2:	61fb      	str	r3, [r7, #28]

	/* Display time Format : hh:mm:ss [AM/PM] */
	sprintf((char*)showtime,"%s:\t%02d:%02d:%02d [%s]","\nCurrent Time&Date",rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds,format);
 80010b4:	793b      	ldrb	r3, [r7, #4]
 80010b6:	4618      	mov	r0, r3
 80010b8:	797b      	ldrb	r3, [r7, #5]
 80010ba:	461a      	mov	r2, r3
 80010bc:	79bb      	ldrb	r3, [r7, #6]
 80010be:	4619      	mov	r1, r3
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	9302      	str	r3, [sp, #8]
 80010c4:	9101      	str	r1, [sp, #4]
 80010c6:	9200      	str	r2, [sp, #0]
 80010c8:	4603      	mov	r3, r0
 80010ca:	4a16      	ldr	r2, [pc, #88]	; (8001124 <show_time_date+0xb8>)
 80010cc:	4916      	ldr	r1, [pc, #88]	; (8001128 <show_time_date+0xbc>)
 80010ce:	4817      	ldr	r0, [pc, #92]	; (800112c <show_time_date+0xc0>)
 80010d0:	f006 fd62 	bl	8007b98 <siprintf>
	xQueueSend(q_print,&time,portMAX_DELAY);
 80010d4:	4b16      	ldr	r3, [pc, #88]	; (8001130 <show_time_date+0xc4>)
 80010d6:	6818      	ldr	r0, [r3, #0]
 80010d8:	2300      	movs	r3, #0
 80010da:	f04f 32ff 	mov.w	r2, #4294967295
 80010de:	4915      	ldr	r1, [pc, #84]	; (8001134 <show_time_date+0xc8>)
 80010e0:	f003 ff7c 	bl	8004fdc <xQueueGenericSend>

	/* Display date Format : date-month-year */
	sprintf((char*)showdate,"\t%02d-%02d-%2d\n",rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 80010e4:	7e7b      	ldrb	r3, [r7, #25]
 80010e6:	461a      	mov	r2, r3
 80010e8:	7ebb      	ldrb	r3, [r7, #26]
 80010ea:	4619      	mov	r1, r3
 80010ec:	7efb      	ldrb	r3, [r7, #27]
 80010ee:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	460b      	mov	r3, r1
 80010f6:	4910      	ldr	r1, [pc, #64]	; (8001138 <show_time_date+0xcc>)
 80010f8:	4810      	ldr	r0, [pc, #64]	; (800113c <show_time_date+0xd0>)
 80010fa:	f006 fd4d 	bl	8007b98 <siprintf>
	xQueueSend(q_print,&date,portMAX_DELAY);
 80010fe:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <show_time_date+0xc4>)
 8001100:	6818      	ldr	r0, [r3, #0]
 8001102:	2300      	movs	r3, #0
 8001104:	f04f 32ff 	mov.w	r2, #4294967295
 8001108:	490d      	ldr	r1, [pc, #52]	; (8001140 <show_time_date+0xd4>)
 800110a:	f003 ff67 	bl	8004fdc <xQueueGenericSend>
}
 800110e:	bf00      	nop
 8001110:	3720      	adds	r7, #32
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200000b0 	.word	0x200000b0
 800111c:	08008e94 	.word	0x08008e94
 8001120:	08008e98 	.word	0x08008e98
 8001124:	08008ec0 	.word	0x08008ec0
 8001128:	08008ed4 	.word	0x08008ed4
 800112c:	20000148 	.word	0x20000148
 8001130:	2000012c 	.word	0x2000012c
 8001134:	20000008 	.word	0x20000008
 8001138:	08008eb0 	.word	0x08008eb0
 800113c:	20000170 	.word	0x20000170
 8001140:	2000000c 	.word	0x2000000c

08001144 <rtc_configure_time>:


void rtc_configure_time(RTC_TimeTypeDef *time)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]

	time->TimeFormat = RTC_HOURFORMAT12_AM;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	70da      	strb	r2, [r3, #3]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	60da      	str	r2, [r3, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(&hrtc,time,RTC_FORMAT_BIN);
 800115e:	2200      	movs	r2, #0
 8001160:	6879      	ldr	r1, [r7, #4]
 8001162:	4803      	ldr	r0, [pc, #12]	; (8001170 <rtc_configure_time+0x2c>)
 8001164:	f001 ffee 	bl	8003144 <HAL_RTC_SetTime>
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	200000b0 	.word	0x200000b0

08001174 <rtc_configure_date>:


void rtc_configure_date(RTC_DateTypeDef *date)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetDate(&hrtc,date,RTC_FORMAT_BIN);
 800117c:	2200      	movs	r2, #0
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	4803      	ldr	r0, [pc, #12]	; (8001190 <rtc_configure_date+0x1c>)
 8001182:	f002 f8d7 	bl	8003334 <HAL_RTC_SetDate>
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200000b0 	.word	0x200000b0

08001194 <validate_rtc_information>:


int validate_rtc_information(RTC_TimeTypeDef *time , RTC_DateTypeDef *date)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
	if(time){
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d00d      	beq.n	80011c0 <validate_rtc_information+0x2c>
		if( (time->Hours > 12) || (time->Minutes > 59) || (time->Seconds > 59) )
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b0c      	cmp	r3, #12
 80011aa:	d807      	bhi.n	80011bc <validate_rtc_information+0x28>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	785b      	ldrb	r3, [r3, #1]
 80011b0:	2b3b      	cmp	r3, #59	; 0x3b
 80011b2:	d803      	bhi.n	80011bc <validate_rtc_information+0x28>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	789b      	ldrb	r3, [r3, #2]
 80011b8:	2b3b      	cmp	r3, #59	; 0x3b
 80011ba:	d901      	bls.n	80011c0 <validate_rtc_information+0x2c>
			return 1;
 80011bc:	2301      	movs	r3, #1
 80011be:	e015      	b.n	80011ec <validate_rtc_information+0x58>
	}

	if(date){
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d011      	beq.n	80011ea <validate_rtc_information+0x56>
		if( (date->Date > 31) || (date->WeekDay > 7) || (date->Year > 99) || (date->Month > 12) )
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	789b      	ldrb	r3, [r3, #2]
 80011ca:	2b1f      	cmp	r3, #31
 80011cc:	d80b      	bhi.n	80011e6 <validate_rtc_information+0x52>
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	2b07      	cmp	r3, #7
 80011d4:	d807      	bhi.n	80011e6 <validate_rtc_information+0x52>
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	78db      	ldrb	r3, [r3, #3]
 80011da:	2b63      	cmp	r3, #99	; 0x63
 80011dc:	d803      	bhi.n	80011e6 <validate_rtc_information+0x52>
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	785b      	ldrb	r3, [r3, #1]
 80011e2:	2b0c      	cmp	r3, #12
 80011e4:	d901      	bls.n	80011ea <validate_rtc_information+0x56>
			return 1;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e000      	b.n	80011ec <validate_rtc_information+0x58>
	}

	return 0;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <HAL_MspInit+0x4c>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	4a0f      	ldr	r2, [pc, #60]	; (8001244 <HAL_MspInit+0x4c>)
 8001208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800120c:	6453      	str	r3, [r2, #68]	; 0x44
 800120e:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <HAL_MspInit+0x4c>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	603b      	str	r3, [r7, #0]
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <HAL_MspInit+0x4c>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	4a08      	ldr	r2, [pc, #32]	; (8001244 <HAL_MspInit+0x4c>)
 8001224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001228:	6413      	str	r3, [r2, #64]	; 0x40
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <HAL_MspInit+0x4c>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001232:	603b      	str	r3, [r7, #0]
 8001234:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800

08001248 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001250:	f107 0308 	add.w	r3, r7, #8
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a0c      	ldr	r2, [pc, #48]	; (8001294 <HAL_RTC_MspInit+0x4c>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d111      	bne.n	800128c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001268:	2302      	movs	r3, #2
 800126a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800126c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001270:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001272:	f107 0308 	add.w	r3, r7, #8
 8001276:	4618      	mov	r0, r3
 8001278:	f001 fe0c 	bl	8002e94 <HAL_RCCEx_PeriphCLKConfig>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001282:	f7ff fea5 	bl	8000fd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001286:	4b04      	ldr	r3, [pc, #16]	; (8001298 <HAL_RTC_MspInit+0x50>)
 8001288:	2201      	movs	r2, #1
 800128a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800128c:	bf00      	nop
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40002800 	.word	0x40002800
 8001298:	42470e3c 	.word	0x42470e3c

0800129c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	; 0x28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a1d      	ldr	r2, [pc, #116]	; (8001330 <HAL_UART_MspInit+0x94>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d133      	bne.n	8001326 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
 80012c2:	4b1c      	ldr	r3, [pc, #112]	; (8001334 <HAL_UART_MspInit+0x98>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	4a1b      	ldr	r2, [pc, #108]	; (8001334 <HAL_UART_MspInit+0x98>)
 80012c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012cc:	6413      	str	r3, [r2, #64]	; 0x40
 80012ce:	4b19      	ldr	r3, [pc, #100]	; (8001334 <HAL_UART_MspInit+0x98>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	4b15      	ldr	r3, [pc, #84]	; (8001334 <HAL_UART_MspInit+0x98>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a14      	ldr	r2, [pc, #80]	; (8001334 <HAL_UART_MspInit+0x98>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b12      	ldr	r3, [pc, #72]	; (8001334 <HAL_UART_MspInit+0x98>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012f6:	230c      	movs	r3, #12
 80012f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fa:	2302      	movs	r3, #2
 80012fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001302:	2303      	movs	r3, #3
 8001304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001306:	2307      	movs	r3, #7
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130a:	f107 0314 	add.w	r3, r7, #20
 800130e:	4619      	mov	r1, r3
 8001310:	4809      	ldr	r0, [pc, #36]	; (8001338 <HAL_UART_MspInit+0x9c>)
 8001312:	f000 ff3f 	bl	8002194 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	2106      	movs	r1, #6
 800131a:	2026      	movs	r0, #38	; 0x26
 800131c:	f000 fe7e 	bl	800201c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001320:	2026      	movs	r0, #38	; 0x26
 8001322:	f000 fe97 	bl	8002054 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001326:	bf00      	nop
 8001328:	3728      	adds	r7, #40	; 0x28
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40004400 	.word	0x40004400
 8001334:	40023800 	.word	0x40023800
 8001338:	40020000 	.word	0x40020000

0800133c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08c      	sub	sp, #48	; 0x30
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800134c:	2200      	movs	r2, #0
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	2036      	movs	r0, #54	; 0x36
 8001352:	f000 fe63 	bl	800201c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001356:	2036      	movs	r0, #54	; 0x36
 8001358:	f000 fe7c 	bl	8002054 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800135c:	2300      	movs	r3, #0
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	4b1f      	ldr	r3, [pc, #124]	; (80013e0 <HAL_InitTick+0xa4>)
 8001362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001364:	4a1e      	ldr	r2, [pc, #120]	; (80013e0 <HAL_InitTick+0xa4>)
 8001366:	f043 0310 	orr.w	r3, r3, #16
 800136a:	6413      	str	r3, [r2, #64]	; 0x40
 800136c:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <HAL_InitTick+0xa4>)
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	f003 0310 	and.w	r3, r3, #16
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001378:	f107 0210 	add.w	r2, r7, #16
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	4611      	mov	r1, r2
 8001382:	4618      	mov	r0, r3
 8001384:	f001 fd54 	bl	8002e30 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001388:	f001 fd2a 	bl	8002de0 <HAL_RCC_GetPCLK1Freq>
 800138c:	4603      	mov	r3, r0
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001394:	4a13      	ldr	r2, [pc, #76]	; (80013e4 <HAL_InitTick+0xa8>)
 8001396:	fba2 2303 	umull	r2, r3, r2, r3
 800139a:	0c9b      	lsrs	r3, r3, #18
 800139c:	3b01      	subs	r3, #1
 800139e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <HAL_InitTick+0xac>)
 80013a2:	4a12      	ldr	r2, [pc, #72]	; (80013ec <HAL_InitTick+0xb0>)
 80013a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80013a6:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <HAL_InitTick+0xac>)
 80013a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013ac:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013ae:	4a0e      	ldr	r2, [pc, #56]	; (80013e8 <HAL_InitTick+0xac>)
 80013b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013b2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <HAL_InitTick+0xac>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ba:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <HAL_InitTick+0xac>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80013c0:	4809      	ldr	r0, [pc, #36]	; (80013e8 <HAL_InitTick+0xac>)
 80013c2:	f002 f947 	bl	8003654 <HAL_TIM_Base_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d104      	bne.n	80013d6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80013cc:	4806      	ldr	r0, [pc, #24]	; (80013e8 <HAL_InitTick+0xac>)
 80013ce:	f002 f99b 	bl	8003708 <HAL_TIM_Base_Start_IT>
 80013d2:	4603      	mov	r3, r0
 80013d4:	e000      	b.n	80013d8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3730      	adds	r7, #48	; 0x30
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40023800 	.word	0x40023800
 80013e4:	431bde83 	.word	0x431bde83
 80013e8:	20000198 	.word	0x20000198
 80013ec:	40001000 	.word	0x40001000

080013f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <NMI_Handler+0x4>

080013f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fa:	e7fe      	b.n	80013fa <HardFault_Handler+0x4>

080013fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <MemManage_Handler+0x4>

08001402 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001406:	e7fe      	b.n	8001406 <BusFault_Handler+0x4>

08001408 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800140c:	e7fe      	b.n	800140c <UsageFault_Handler+0x4>

0800140e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001420:	4802      	ldr	r0, [pc, #8]	; (800142c <USART2_IRQHandler+0x10>)
 8001422:	f002 fcd5 	bl	8003dd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	200000d0 	.word	0x200000d0

08001430 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001434:	4802      	ldr	r0, [pc, #8]	; (8001440 <TIM6_DAC_IRQHandler+0x10>)
 8001436:	f002 f9d7 	bl	80037e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000198 	.word	0x20000198

08001444 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	e00a      	b.n	800146c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001456:	f3af 8000 	nop.w
 800145a:	4601      	mov	r1, r0
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	1c5a      	adds	r2, r3, #1
 8001460:	60ba      	str	r2, [r7, #8]
 8001462:	b2ca      	uxtb	r2, r1
 8001464:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	3301      	adds	r3, #1
 800146a:	617b      	str	r3, [r7, #20]
 800146c:	697a      	ldr	r2, [r7, #20]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	429a      	cmp	r2, r3
 8001472:	dbf0      	blt.n	8001456 <_read+0x12>
	}

return len;
 8001474:	687b      	ldr	r3, [r7, #4]
}
 8001476:	4618      	mov	r0, r3
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b086      	sub	sp, #24
 8001482:	af00      	add	r7, sp, #0
 8001484:	60f8      	str	r0, [r7, #12]
 8001486:	60b9      	str	r1, [r7, #8]
 8001488:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
 800148e:	e009      	b.n	80014a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	1c5a      	adds	r2, r3, #1
 8001494:	60ba      	str	r2, [r7, #8]
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	4618      	mov	r0, r3
 800149a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	3301      	adds	r3, #1
 80014a2:	617b      	str	r3, [r7, #20]
 80014a4:	697a      	ldr	r2, [r7, #20]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	dbf1      	blt.n	8001490 <_write+0x12>
	}
	return len;
 80014ac:	687b      	ldr	r3, [r7, #4]
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3718      	adds	r7, #24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <_close>:

int _close(int file)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b083      	sub	sp, #12
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
	return -1;
 80014be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b083      	sub	sp, #12
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
 80014d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014de:	605a      	str	r2, [r3, #4]
	return 0;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <_isatty>:

int _isatty(int file)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b083      	sub	sp, #12
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
	return 1;
 80014f6:	2301      	movs	r3, #1
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
	return 0;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3714      	adds	r7, #20
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
	...

08001520 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001528:	4a14      	ldr	r2, [pc, #80]	; (800157c <_sbrk+0x5c>)
 800152a:	4b15      	ldr	r3, [pc, #84]	; (8001580 <_sbrk+0x60>)
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001534:	4b13      	ldr	r3, [pc, #76]	; (8001584 <_sbrk+0x64>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d102      	bne.n	8001542 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <_sbrk+0x64>)
 800153e:	4a12      	ldr	r2, [pc, #72]	; (8001588 <_sbrk+0x68>)
 8001540:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001542:	4b10      	ldr	r3, [pc, #64]	; (8001584 <_sbrk+0x64>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4413      	add	r3, r2
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	429a      	cmp	r2, r3
 800154e:	d207      	bcs.n	8001560 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001550:	f006 faca 	bl	8007ae8 <__errno>
 8001554:	4603      	mov	r3, r0
 8001556:	220c      	movs	r2, #12
 8001558:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800155a:	f04f 33ff 	mov.w	r3, #4294967295
 800155e:	e009      	b.n	8001574 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <_sbrk+0x64>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001566:	4b07      	ldr	r3, [pc, #28]	; (8001584 <_sbrk+0x64>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4413      	add	r3, r2
 800156e:	4a05      	ldr	r2, [pc, #20]	; (8001584 <_sbrk+0x64>)
 8001570:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001572:	68fb      	ldr	r3, [r7, #12]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20020000 	.word	0x20020000
 8001580:	00000400 	.word	0x00000400
 8001584:	200001e0 	.word	0x200001e0
 8001588:	200193a8 	.word	0x200193a8

0800158c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <SystemInit+0x20>)
 8001592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001596:	4a05      	ldr	r2, [pc, #20]	; (80015ac <SystemInit+0x20>)
 8001598:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800159c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <menu_task>:

const char *msg_inv = "////Invalid option////\n";


void menu_task(void *param)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af02      	add	r7, sp, #8
 80015b6:	6078      	str	r0, [r7, #4]

	command_t *cmd;

	int option;

	const char* msg_menu = "\n========================\n"
 80015b8:	4b31      	ldr	r3, [pc, #196]	; (8001680 <menu_task+0xd0>)
 80015ba:	60bb      	str	r3, [r7, #8]
								"Date and time ----> 1\n"
								"Exit          ----> 2\n"
								"Enter your choice here : ";

	while(1){
		xQueueSend(q_print,&msg_menu,portMAX_DELAY);
 80015bc:	4b31      	ldr	r3, [pc, #196]	; (8001684 <menu_task+0xd4>)
 80015be:	6818      	ldr	r0, [r3, #0]
 80015c0:	f107 0108 	add.w	r1, r7, #8
 80015c4:	2300      	movs	r3, #0
 80015c6:	f04f 32ff 	mov.w	r2, #4294967295
 80015ca:	f003 fd07 	bl	8004fdc <xQueueGenericSend>

		//wait for menu commands
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 80015ce:	f107 030c 	add.w	r3, r7, #12
 80015d2:	f04f 32ff 	mov.w	r2, #4294967295
 80015d6:	9200      	str	r2, [sp, #0]
 80015d8:	2200      	movs	r2, #0
 80015da:	2100      	movs	r1, #0
 80015dc:	2000      	movs	r0, #0
 80015de:	f004 ffb1 	bl	8006544 <xTaskGenericNotifyWait>
		cmd = (command_t*)cmd_addr;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	617b      	str	r3, [r7, #20]

		if(cmd->len == 1)
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d133      	bne.n	8001656 <menu_task+0xa6>
		{
			option = cmd->payload[0] - 48;
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	3b30      	subs	r3, #48	; 0x30
 80015f4:	613b      	str	r3, [r7, #16]
			switch(option)
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d035      	beq.n	8001668 <menu_task+0xb8>
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	2b02      	cmp	r3, #2
 8001600:	dc20      	bgt.n	8001644 <menu_task+0x94>
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <menu_task+0x60>
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d00d      	beq.n	800162a <menu_task+0x7a>
 800160e:	e019      	b.n	8001644 <menu_task+0x94>
			{
				case 0:
					curr_state = sLedEffect;
 8001610:	4b1d      	ldr	r3, [pc, #116]	; (8001688 <menu_task+0xd8>)
 8001612:	2201      	movs	r2, #1
 8001614:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_led_task,0,eNoAction);
 8001616:	4b1d      	ldr	r3, [pc, #116]	; (800168c <menu_task+0xdc>)
 8001618:	6818      	ldr	r0, [r3, #0]
 800161a:	2300      	movs	r3, #0
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	2300      	movs	r3, #0
 8001620:	2200      	movs	r2, #0
 8001622:	2100      	movs	r1, #0
 8001624:	f005 f80e 	bl	8006644 <xTaskGenericNotify>
					break;
 8001628:	e01f      	b.n	800166a <menu_task+0xba>
				case 1:
					curr_state = sRtcMenu;
 800162a:	4b17      	ldr	r3, [pc, #92]	; (8001688 <menu_task+0xd8>)
 800162c:	2202      	movs	r2, #2
 800162e:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_rtc_task,0,eNoAction);
 8001630:	4b17      	ldr	r3, [pc, #92]	; (8001690 <menu_task+0xe0>)
 8001632:	6818      	ldr	r0, [r3, #0]
 8001634:	2300      	movs	r3, #0
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	2300      	movs	r3, #0
 800163a:	2200      	movs	r2, #0
 800163c:	2100      	movs	r1, #0
 800163e:	f005 f801 	bl	8006644 <xTaskGenericNotify>
					break;
 8001642:	e012      	b.n	800166a <menu_task+0xba>
				case 2: /*implement exit */
					break;
				default:
					xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001644:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <menu_task+0xd4>)
 8001646:	6818      	ldr	r0, [r3, #0]
 8001648:	2300      	movs	r3, #0
 800164a:	f04f 32ff 	mov.w	r2, #4294967295
 800164e:	4911      	ldr	r1, [pc, #68]	; (8001694 <menu_task+0xe4>)
 8001650:	f003 fcc4 	bl	8004fdc <xQueueGenericSend>
					continue;
 8001654:	e012      	b.n	800167c <menu_task+0xcc>
			}

		}else{
			//invalid entry
			xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001656:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <menu_task+0xd4>)
 8001658:	6818      	ldr	r0, [r3, #0]
 800165a:	2300      	movs	r3, #0
 800165c:	f04f 32ff 	mov.w	r2, #4294967295
 8001660:	490c      	ldr	r1, [pc, #48]	; (8001694 <menu_task+0xe4>)
 8001662:	f003 fcbb 	bl	8004fdc <xQueueGenericSend>
			continue;
 8001666:	e009      	b.n	800167c <menu_task+0xcc>
					break;
 8001668:	bf00      	nop
		}


		//wait to run again when some other task notifies
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 800166a:	f04f 33ff 	mov.w	r3, #4294967295
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	2300      	movs	r3, #0
 8001672:	2200      	movs	r2, #0
 8001674:	2100      	movs	r1, #0
 8001676:	2000      	movs	r0, #0
 8001678:	f004 ff64 	bl	8006544 <xTaskGenericNotifyWait>
		xQueueSend(q_print,&msg_menu,portMAX_DELAY);
 800167c:	e79e      	b.n	80015bc <menu_task+0xc>
 800167e:	bf00      	nop
 8001680:	08008f04 	.word	0x08008f04
 8001684:	2000012c 	.word	0x2000012c
 8001688:	20000145 	.word	0x20000145
 800168c:	20000120 	.word	0x20000120
 8001690:	20000124 	.word	0x20000124
 8001694:	20000014 	.word	0x20000014

08001698 <led_task>:

	}//while super loop
}

void led_task(void *param)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b088      	sub	sp, #32
 800169c:	af02      	add	r7, sp, #8
 800169e:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	const char* msg_led = "========================\n"
 80016a0:	4b3e      	ldr	r3, [pc, #248]	; (800179c <led_task+0x104>)
 80016a2:	60fb      	str	r3, [r7, #12]
						  "(none,e1,e2,e3,e4)\n"
						  "Enter your choice here : ";

	while(1){
		/*Wait for notification (Notify wait) */
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80016a4:	f04f 33ff 	mov.w	r3, #4294967295
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	2300      	movs	r3, #0
 80016ac:	2200      	movs	r2, #0
 80016ae:	2100      	movs	r1, #0
 80016b0:	2000      	movs	r0, #0
 80016b2:	f004 ff47 	bl	8006544 <xTaskGenericNotifyWait>

		/*Print LED menu */
		xQueueSend(q_print,&msg_led,portMAX_DELAY);
 80016b6:	4b3a      	ldr	r3, [pc, #232]	; (80017a0 <led_task+0x108>)
 80016b8:	6818      	ldr	r0, [r3, #0]
 80016ba:	f107 010c 	add.w	r1, r7, #12
 80016be:	2300      	movs	r3, #0
 80016c0:	f04f 32ff 	mov.w	r2, #4294967295
 80016c4:	f003 fc8a 	bl	8004fdc <xQueueGenericSend>

		/*wait for LED command (Notify wait) */
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 80016c8:	f107 0310 	add.w	r3, r7, #16
 80016cc:	f04f 32ff 	mov.w	r2, #4294967295
 80016d0:	9200      	str	r2, [sp, #0]
 80016d2:	2200      	movs	r2, #0
 80016d4:	2100      	movs	r1, #0
 80016d6:	2000      	movs	r0, #0
 80016d8:	f004 ff34 	bl	8006544 <xTaskGenericNotifyWait>
		cmd = (command_t*)cmd_addr;
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	617b      	str	r3, [r7, #20]

		if(cmd->len <= 4)
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d843      	bhi.n	8001770 <led_task+0xd8>
		{
			if(! strcmp((char*)cmd->payload,"none"))
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	492e      	ldr	r1, [pc, #184]	; (80017a4 <led_task+0x10c>)
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7fe fd6f 	bl	80001d0 <strcmp>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d102      	bne.n	80016fe <led_task+0x66>
				led_effect_stop();
 80016f8:	f7fe ff54 	bl	80005a4 <led_effect_stop>
 80016fc:	e040      	b.n	8001780 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e1"))
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	4929      	ldr	r1, [pc, #164]	; (80017a8 <led_task+0x110>)
 8001702:	4618      	mov	r0, r3
 8001704:	f7fe fd64 	bl	80001d0 <strcmp>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d103      	bne.n	8001716 <led_task+0x7e>
				led_effect(1);
 800170e:	2001      	movs	r0, #1
 8001710:	f7fe ff68 	bl	80005e4 <led_effect>
 8001714:	e034      	b.n	8001780 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e2"))
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	4924      	ldr	r1, [pc, #144]	; (80017ac <led_task+0x114>)
 800171a:	4618      	mov	r0, r3
 800171c:	f7fe fd58 	bl	80001d0 <strcmp>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d103      	bne.n	800172e <led_task+0x96>
				led_effect(2);
 8001726:	2002      	movs	r0, #2
 8001728:	f7fe ff5c 	bl	80005e4 <led_effect>
 800172c:	e028      	b.n	8001780 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e3"))
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	491f      	ldr	r1, [pc, #124]	; (80017b0 <led_task+0x118>)
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe fd4c 	bl	80001d0 <strcmp>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d103      	bne.n	8001746 <led_task+0xae>
				led_effect(3);
 800173e:	2003      	movs	r0, #3
 8001740:	f7fe ff50 	bl	80005e4 <led_effect>
 8001744:	e01c      	b.n	8001780 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e4"))
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	491a      	ldr	r1, [pc, #104]	; (80017b4 <led_task+0x11c>)
 800174a:	4618      	mov	r0, r3
 800174c:	f7fe fd40 	bl	80001d0 <strcmp>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d103      	bne.n	800175e <led_task+0xc6>
				led_effect(4);
 8001756:	2004      	movs	r0, #4
 8001758:	f7fe ff44 	bl	80005e4 <led_effect>
 800175c:	e010      	b.n	8001780 <led_task+0xe8>
			else
				xQueueSend(q_print,&msg_inv,portMAX_DELAY); /*print invalid message */
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <led_task+0x108>)
 8001760:	6818      	ldr	r0, [r3, #0]
 8001762:	2300      	movs	r3, #0
 8001764:	f04f 32ff 	mov.w	r2, #4294967295
 8001768:	4913      	ldr	r1, [pc, #76]	; (80017b8 <led_task+0x120>)
 800176a:	f003 fc37 	bl	8004fdc <xQueueGenericSend>
 800176e:	e007      	b.n	8001780 <led_task+0xe8>
		}else
			xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001770:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <led_task+0x108>)
 8001772:	6818      	ldr	r0, [r3, #0]
 8001774:	2300      	movs	r3, #0
 8001776:	f04f 32ff 	mov.w	r2, #4294967295
 800177a:	490f      	ldr	r1, [pc, #60]	; (80017b8 <led_task+0x120>)
 800177c:	f003 fc2e 	bl	8004fdc <xQueueGenericSend>

		/* update state variable */
		curr_state = sMainMenu;
 8001780:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <led_task+0x124>)
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]

		/*Notify menu task */
		xTaskNotify(handle_menu_task,0,eNoAction);
 8001786:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <led_task+0x128>)
 8001788:	6818      	ldr	r0, [r3, #0]
 800178a:	2300      	movs	r3, #0
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	2300      	movs	r3, #0
 8001790:	2200      	movs	r2, #0
 8001792:	2100      	movs	r1, #0
 8001794:	f004 ff56 	bl	8006644 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001798:	e784      	b.n	80016a4 <led_task+0xc>
 800179a:	bf00      	nop
 800179c:	08008fac 	.word	0x08008fac
 80017a0:	2000012c 	.word	0x2000012c
 80017a4:	08009024 	.word	0x08009024
 80017a8:	0800902c 	.word	0x0800902c
 80017ac:	08009030 	.word	0x08009030
 80017b0:	08009034 	.word	0x08009034
 80017b4:	08009038 	.word	0x08009038
 80017b8:	20000014 	.word	0x20000014
 80017bc:	20000145 	.word	0x20000145
 80017c0:	20000118 	.word	0x20000118

080017c4 <getnumber>:

	}
}

uint8_t getnumber(uint8_t *p , int len)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]

	int value ;

	if(len > 1)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	dd0f      	ble.n	80017f4 <getnumber+0x30>
	   value =  ( ((p[0]-48) * 10) + (p[1] - 48) );
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	461a      	mov	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	3301      	adds	r3, #1
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	3b30      	subs	r3, #48	; 0x30
 80017ee:	4413      	add	r3, r2
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	e003      	b.n	80017fc <getnumber+0x38>
	else
		value = p[0] - 48;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	3b30      	subs	r3, #48	; 0x30
 80017fa:	60fb      	str	r3, [r7, #12]

	return value;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	b2db      	uxtb	r3, r3

}
 8001800:	4618      	mov	r0, r3
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <rtc_task>:

void rtc_task(void *param)
{
 800180c:	b590      	push	{r4, r7, lr}
 800180e:	b09b      	sub	sp, #108	; 0x6c
 8001810:	af02      	add	r7, sp, #8
 8001812:	6078      	str	r0, [r7, #4]
	const char* msg_rtc1 = "========================\n"
 8001814:	4bb2      	ldr	r3, [pc, #712]	; (8001ae0 <rtc_task+0x2d4>)
 8001816:	64fb      	str	r3, [r7, #76]	; 0x4c
							"|         RTC          |\n"
							"========================\n";

	const char* msg_rtc2 = "Configure Time            ----> 0\n"
 8001818:	4bb2      	ldr	r3, [pc, #712]	; (8001ae4 <rtc_task+0x2d8>)
 800181a:	64bb      	str	r3, [r7, #72]	; 0x48
							"Enable reporting          ----> 2\n"
							"Exit                      ----> 3\n"
							"Enter your choice here : ";


	const char *msg_rtc_hh = "Enter hour(1-12):";
 800181c:	4bb2      	ldr	r3, [pc, #712]	; (8001ae8 <rtc_task+0x2dc>)
 800181e:	647b      	str	r3, [r7, #68]	; 0x44
	const char *msg_rtc_mm = "Enter minutes(0-59):";
 8001820:	4bb2      	ldr	r3, [pc, #712]	; (8001aec <rtc_task+0x2e0>)
 8001822:	643b      	str	r3, [r7, #64]	; 0x40
	const char *msg_rtc_ss = "Enter seconds(0-59):";
 8001824:	4bb2      	ldr	r3, [pc, #712]	; (8001af0 <rtc_task+0x2e4>)
 8001826:	63fb      	str	r3, [r7, #60]	; 0x3c

	const char *msg_rtc_dd  = "Enter date(1-31):";
 8001828:	4bb2      	ldr	r3, [pc, #712]	; (8001af4 <rtc_task+0x2e8>)
 800182a:	63bb      	str	r3, [r7, #56]	; 0x38
	const char *msg_rtc_mo  ="Enter month(1-12):";
 800182c:	4bb2      	ldr	r3, [pc, #712]	; (8001af8 <rtc_task+0x2ec>)
 800182e:	637b      	str	r3, [r7, #52]	; 0x34
	const char *msg_rtc_dow  = "Enter day(1-7 sun:1):";
 8001830:	4bb2      	ldr	r3, [pc, #712]	; (8001afc <rtc_task+0x2f0>)
 8001832:	633b      	str	r3, [r7, #48]	; 0x30
	const char *msg_rtc_yr  = "Enter year(0-99):";
 8001834:	4bb2      	ldr	r3, [pc, #712]	; (8001b00 <rtc_task+0x2f4>)
 8001836:	62fb      	str	r3, [r7, #44]	; 0x2c

	const char *msg_conf = "Configuration successful\n";
 8001838:	4bb2      	ldr	r3, [pc, #712]	; (8001b04 <rtc_task+0x2f8>)
 800183a:	62bb      	str	r3, [r7, #40]	; 0x28
	const char *msg_rtc_report = "Enable time&date reporting(y/n)?: ";
 800183c:	4bb2      	ldr	r3, [pc, #712]	; (8001b08 <rtc_task+0x2fc>)
 800183e:	627b      	str	r3, [r7, #36]	; 0x24
#define DAY_CONFIG 		3


	while(1){
		/*Notify wait (wait till someone notifies) */
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001840:	f04f 33ff 	mov.w	r3, #4294967295
 8001844:	9300      	str	r3, [sp, #0]
 8001846:	2300      	movs	r3, #0
 8001848:	2200      	movs	r2, #0
 800184a:	2100      	movs	r1, #0
 800184c:	2000      	movs	r0, #0
 800184e:	f004 fe79 	bl	8006544 <xTaskGenericNotifyWait>

		/*Print the menu and show current date and time information */
		xQueueSend(q_print,&msg_rtc1,portMAX_DELAY);
 8001852:	4bae      	ldr	r3, [pc, #696]	; (8001b0c <rtc_task+0x300>)
 8001854:	6818      	ldr	r0, [r3, #0]
 8001856:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800185a:	2300      	movs	r3, #0
 800185c:	f04f 32ff 	mov.w	r2, #4294967295
 8001860:	f003 fbbc 	bl	8004fdc <xQueueGenericSend>
		show_time_date();
 8001864:	f7ff fc02 	bl	800106c <show_time_date>
		xQueueSend(q_print,&msg_rtc2,portMAX_DELAY);
 8001868:	4ba8      	ldr	r3, [pc, #672]	; (8001b0c <rtc_task+0x300>)
 800186a:	6818      	ldr	r0, [r3, #0]
 800186c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001870:	2300      	movs	r3, #0
 8001872:	f04f 32ff 	mov.w	r2, #4294967295
 8001876:	f003 fbb1 	bl	8004fdc <xQueueGenericSend>


		while(curr_state != sMainMenu){
 800187a:	bf00      	nop
 800187c:	e1e1      	b.n	8001c42 <rtc_task+0x436>

			/*Wait for command notification (Notify wait) */
			xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 800187e:	f107 0320 	add.w	r3, r7, #32
 8001882:	f04f 32ff 	mov.w	r2, #4294967295
 8001886:	9200      	str	r2, [sp, #0]
 8001888:	2200      	movs	r2, #0
 800188a:	2100      	movs	r1, #0
 800188c:	2000      	movs	r0, #0
 800188e:	f004 fe59 	bl	8006544 <xTaskGenericNotifyWait>
			cmd = (command_t*)cmd_addr;
 8001892:	6a3b      	ldr	r3, [r7, #32]
 8001894:	65fb      	str	r3, [r7, #92]	; 0x5c

			switch(curr_state)
 8001896:	4b9e      	ldr	r3, [pc, #632]	; (8001b10 <rtc_task+0x304>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	3b02      	subs	r3, #2
 800189c:	2b03      	cmp	r3, #3
 800189e:	f200 81d0 	bhi.w	8001c42 <rtc_task+0x436>
 80018a2:	a201      	add	r2, pc, #4	; (adr r2, 80018a8 <rtc_task+0x9c>)
 80018a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a8:	080018b9 	.word	0x080018b9
 80018ac:	0800196b 	.word	0x0800196b
 80018b0:	08001a59 	.word	0x08001a59
 80018b4:	08001bbf 	.word	0x08001bbf
			{
				case sRtcMenu:{
					/*process RTC menu commands */
					if(cmd->len == 1)
 80018b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d148      	bne.n	8001952 <rtc_task+0x146>
					{
						menu_code = cmd->payload[0] - 48;
 80018c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	3b30      	subs	r3, #48	; 0x30
 80018c6:	653b      	str	r3, [r7, #80]	; 0x50
 80018c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018ca:	2b03      	cmp	r3, #3
 80018cc:	d835      	bhi.n	800193a <rtc_task+0x12e>
 80018ce:	a201      	add	r2, pc, #4	; (adr r2, 80018d4 <rtc_task+0xc8>)
 80018d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018d4:	080018e5 	.word	0x080018e5
 80018d8:	080018ff 	.word	0x080018ff
 80018dc:	08001919 	.word	0x08001919
 80018e0:	08001933 	.word	0x08001933
						switch(menu_code)
						{
						case 0:
							curr_state = sRtcTimeConfig;
 80018e4:	4b8a      	ldr	r3, [pc, #552]	; (8001b10 <rtc_task+0x304>)
 80018e6:	2203      	movs	r2, #3
 80018e8:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_rtc_hh,portMAX_DELAY);
 80018ea:	4b88      	ldr	r3, [pc, #544]	; (8001b0c <rtc_task+0x300>)
 80018ec:	6818      	ldr	r0, [r3, #0]
 80018ee:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80018f2:	2300      	movs	r3, #0
 80018f4:	f04f 32ff 	mov.w	r2, #4294967295
 80018f8:	f003 fb70 	bl	8004fdc <xQueueGenericSend>
							break;
 80018fc:	e034      	b.n	8001968 <rtc_task+0x15c>
						case 1:
							curr_state = sRtcDateConfig;
 80018fe:	4b84      	ldr	r3, [pc, #528]	; (8001b10 <rtc_task+0x304>)
 8001900:	2204      	movs	r2, #4
 8001902:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_rtc_dd,portMAX_DELAY);
 8001904:	4b81      	ldr	r3, [pc, #516]	; (8001b0c <rtc_task+0x300>)
 8001906:	6818      	ldr	r0, [r3, #0]
 8001908:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800190c:	2300      	movs	r3, #0
 800190e:	f04f 32ff 	mov.w	r2, #4294967295
 8001912:	f003 fb63 	bl	8004fdc <xQueueGenericSend>
							break;
 8001916:	e027      	b.n	8001968 <rtc_task+0x15c>
						case 2 :
							curr_state = sRtcReport;
 8001918:	4b7d      	ldr	r3, [pc, #500]	; (8001b10 <rtc_task+0x304>)
 800191a:	2205      	movs	r2, #5
 800191c:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_rtc_report,portMAX_DELAY);
 800191e:	4b7b      	ldr	r3, [pc, #492]	; (8001b0c <rtc_task+0x300>)
 8001920:	6818      	ldr	r0, [r3, #0]
 8001922:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001926:	2300      	movs	r3, #0
 8001928:	f04f 32ff 	mov.w	r2, #4294967295
 800192c:	f003 fb56 	bl	8004fdc <xQueueGenericSend>
							break;
 8001930:	e01a      	b.n	8001968 <rtc_task+0x15c>
						case 3 :
							curr_state = sMainMenu;
 8001932:	4b77      	ldr	r3, [pc, #476]	; (8001b10 <rtc_task+0x304>)
 8001934:	2200      	movs	r2, #0
 8001936:	701a      	strb	r2, [r3, #0]
							break;
 8001938:	e016      	b.n	8001968 <rtc_task+0x15c>
						default:
							curr_state = sMainMenu;
 800193a:	4b75      	ldr	r3, [pc, #468]	; (8001b10 <rtc_task+0x304>)
 800193c:	2200      	movs	r2, #0
 800193e:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001940:	4b72      	ldr	r3, [pc, #456]	; (8001b0c <rtc_task+0x300>)
 8001942:	6818      	ldr	r0, [r3, #0]
 8001944:	2300      	movs	r3, #0
 8001946:	f04f 32ff 	mov.w	r2, #4294967295
 800194a:	4972      	ldr	r1, [pc, #456]	; (8001b14 <rtc_task+0x308>)
 800194c:	f003 fb46 	bl	8004fdc <xQueueGenericSend>
 8001950:	e177      	b.n	8001c42 <rtc_task+0x436>
						}

					}else{
						curr_state = sMainMenu;
 8001952:	4b6f      	ldr	r3, [pc, #444]	; (8001b10 <rtc_task+0x304>)
 8001954:	2200      	movs	r2, #0
 8001956:	701a      	strb	r2, [r3, #0]
						xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001958:	4b6c      	ldr	r3, [pc, #432]	; (8001b0c <rtc_task+0x300>)
 800195a:	6818      	ldr	r0, [r3, #0]
 800195c:	2300      	movs	r3, #0
 800195e:	f04f 32ff 	mov.w	r2, #4294967295
 8001962:	496c      	ldr	r1, [pc, #432]	; (8001b14 <rtc_task+0x308>)
 8001964:	f003 fb3a 	bl	8004fdc <xQueueGenericSend>
					}
					break;}
 8001968:	e16b      	b.n	8001c42 <rtc_task+0x436>

				case sRtcTimeConfig:{
					/*get hh, mm, ss infor and configure RTC */
					/*take care of invalid entries */
					switch(rtc_state)
 800196a:	4b6b      	ldr	r3, [pc, #428]	; (8001b18 <rtc_task+0x30c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2b02      	cmp	r3, #2
 8001970:	d03b      	beq.n	80019ea <rtc_task+0x1de>
 8001972:	2b02      	cmp	r3, #2
 8001974:	f300 8165 	bgt.w	8001c42 <rtc_task+0x436>
 8001978:	2b00      	cmp	r3, #0
 800197a:	d002      	beq.n	8001982 <rtc_task+0x176>
 800197c:	2b01      	cmp	r3, #1
 800197e:	d01a      	beq.n	80019b6 <rtc_task+0x1aa>
 8001980:	e15f      	b.n	8001c42 <rtc_task+0x436>
						{
							case HH_CONFIG:{
								uint8_t hour = getnumber(cmd->payload , cmd->len);
 8001982:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001984:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	4619      	mov	r1, r3
 800198a:	4610      	mov	r0, r2
 800198c:	f7ff ff1a 	bl	80017c4 <getnumber>
 8001990:	4603      	mov	r3, r0
 8001992:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
								time.Hours = hour;
 8001996:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800199a:	733b      	strb	r3, [r7, #12]
								rtc_state = MM_CONFIG;
 800199c:	4b5e      	ldr	r3, [pc, #376]	; (8001b18 <rtc_task+0x30c>)
 800199e:	2201      	movs	r2, #1
 80019a0:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_mm,portMAX_DELAY);
 80019a2:	4b5a      	ldr	r3, [pc, #360]	; (8001b0c <rtc_task+0x300>)
 80019a4:	6818      	ldr	r0, [r3, #0]
 80019a6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80019aa:	2300      	movs	r3, #0
 80019ac:	f04f 32ff 	mov.w	r2, #4294967295
 80019b0:	f003 fb14 	bl	8004fdc <xQueueGenericSend>
								break;}
 80019b4:	e04f      	b.n	8001a56 <rtc_task+0x24a>
							case MM_CONFIG:{
								uint8_t min = getnumber(cmd->payload , cmd->len);
 80019b6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80019b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	4619      	mov	r1, r3
 80019be:	4610      	mov	r0, r2
 80019c0:	f7ff ff00 	bl	80017c4 <getnumber>
 80019c4:	4603      	mov	r3, r0
 80019c6:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
								time.Minutes = min;
 80019ca:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80019ce:	737b      	strb	r3, [r7, #13]
								rtc_state = SS_CONFIG;
 80019d0:	4b51      	ldr	r3, [pc, #324]	; (8001b18 <rtc_task+0x30c>)
 80019d2:	2202      	movs	r2, #2
 80019d4:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_ss,portMAX_DELAY);
 80019d6:	4b4d      	ldr	r3, [pc, #308]	; (8001b0c <rtc_task+0x300>)
 80019d8:	6818      	ldr	r0, [r3, #0]
 80019da:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80019de:	2300      	movs	r3, #0
 80019e0:	f04f 32ff 	mov.w	r2, #4294967295
 80019e4:	f003 fafa 	bl	8004fdc <xQueueGenericSend>
								break;}
 80019e8:	e035      	b.n	8001a56 <rtc_task+0x24a>
							case SS_CONFIG:{
								uint8_t sec = getnumber(cmd->payload , cmd->len);
 80019ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80019ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	4619      	mov	r1, r3
 80019f2:	4610      	mov	r0, r2
 80019f4:	f7ff fee6 	bl	80017c4 <getnumber>
 80019f8:	4603      	mov	r3, r0
 80019fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
								time.Seconds = sec;
 80019fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001a02:	73bb      	strb	r3, [r7, #14]
								if(!validate_rtc_information(&time,NULL))
 8001a04:	f107 030c 	add.w	r3, r7, #12
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff fbc2 	bl	8001194 <validate_rtc_information>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d110      	bne.n	8001a38 <rtc_task+0x22c>
								{
									rtc_configure_time(&time);
 8001a16:	f107 030c 	add.w	r3, r7, #12
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff fb92 	bl	8001144 <rtc_configure_time>
									xQueueSend(q_print,&msg_conf,portMAX_DELAY);
 8001a20:	4b3a      	ldr	r3, [pc, #232]	; (8001b0c <rtc_task+0x300>)
 8001a22:	6818      	ldr	r0, [r3, #0]
 8001a24:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001a28:	2300      	movs	r3, #0
 8001a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a2e:	f003 fad5 	bl	8004fdc <xQueueGenericSend>
									show_time_date();
 8001a32:	f7ff fb1b 	bl	800106c <show_time_date>
 8001a36:	e007      	b.n	8001a48 <rtc_task+0x23c>
								}else
									xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001a38:	4b34      	ldr	r3, [pc, #208]	; (8001b0c <rtc_task+0x300>)
 8001a3a:	6818      	ldr	r0, [r3, #0]
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a42:	4934      	ldr	r1, [pc, #208]	; (8001b14 <rtc_task+0x308>)
 8001a44:	f003 faca 	bl	8004fdc <xQueueGenericSend>

								curr_state = sMainMenu;
 8001a48:	4b31      	ldr	r3, [pc, #196]	; (8001b10 <rtc_task+0x304>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	701a      	strb	r2, [r3, #0]
								rtc_state = 0;
 8001a4e:	4b32      	ldr	r3, [pc, #200]	; (8001b18 <rtc_task+0x30c>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
								break;}
 8001a54:	bf00      	nop
						}

					break;}
 8001a56:	e0f4      	b.n	8001c42 <rtc_task+0x436>
				case sRtcDateConfig:{

					/*get date, month, day , year info and configure RTC */

					/*take care of invalid entries */
					switch(rtc_state)
 8001a58:	4b2f      	ldr	r3, [pc, #188]	; (8001b18 <rtc_task+0x30c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	f200 80f0 	bhi.w	8001c42 <rtc_task+0x436>
 8001a62:	a201      	add	r2, pc, #4	; (adr r2, 8001a68 <rtc_task+0x25c>)
 8001a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a68:	08001a79 	.word	0x08001a79
 8001a6c:	08001aad 	.word	0x08001aad
 8001a70:	08001b51 	.word	0x08001b51
 8001a74:	08001b1d 	.word	0x08001b1d
						{
							case DATE_CONFIG:{
								uint8_t d = getnumber(cmd->payload , cmd->len);
 8001a78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001a7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4610      	mov	r0, r2
 8001a82:	f7ff fe9f 	bl	80017c4 <getnumber>
 8001a86:	4603      	mov	r3, r0
 8001a88:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
								date.Date = d;
 8001a8c:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001a90:	72bb      	strb	r3, [r7, #10]
								rtc_state = MONTH_CONFIG;
 8001a92:	4b21      	ldr	r3, [pc, #132]	; (8001b18 <rtc_task+0x30c>)
 8001a94:	2201      	movs	r2, #1
 8001a96:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_mo,portMAX_DELAY);
 8001a98:	4b1c      	ldr	r3, [pc, #112]	; (8001b0c <rtc_task+0x300>)
 8001a9a:	6818      	ldr	r0, [r3, #0]
 8001a9c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa6:	f003 fa99 	bl	8004fdc <xQueueGenericSend>
								break;}
 8001aaa:	e087      	b.n	8001bbc <rtc_task+0x3b0>
							case MONTH_CONFIG:{
								uint8_t month = getnumber(cmd->payload , cmd->len);
 8001aac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001aae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	f7ff fe85 	bl	80017c4 <getnumber>
 8001aba:	4603      	mov	r3, r0
 8001abc:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
								date.Month = month;
 8001ac0:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001ac4:	727b      	strb	r3, [r7, #9]
								rtc_state = DAY_CONFIG;
 8001ac6:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <rtc_task+0x30c>)
 8001ac8:	2203      	movs	r2, #3
 8001aca:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_dow,portMAX_DELAY);
 8001acc:	4b0f      	ldr	r3, [pc, #60]	; (8001b0c <rtc_task+0x300>)
 8001ace:	6818      	ldr	r0, [r3, #0]
 8001ad0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8001ada:	f003 fa7f 	bl	8004fdc <xQueueGenericSend>
								break;}
 8001ade:	e06d      	b.n	8001bbc <rtc_task+0x3b0>
 8001ae0:	0800903c 	.word	0x0800903c
 8001ae4:	08009088 	.word	0x08009088
 8001ae8:	0800912c 	.word	0x0800912c
 8001aec:	08009140 	.word	0x08009140
 8001af0:	08009158 	.word	0x08009158
 8001af4:	08009170 	.word	0x08009170
 8001af8:	08009184 	.word	0x08009184
 8001afc:	08009198 	.word	0x08009198
 8001b00:	080091b0 	.word	0x080091b0
 8001b04:	080091c4 	.word	0x080091c4
 8001b08:	080091e0 	.word	0x080091e0
 8001b0c:	2000012c 	.word	0x2000012c
 8001b10:	20000145 	.word	0x20000145
 8001b14:	20000014 	.word	0x20000014
 8001b18:	200001e4 	.word	0x200001e4
							case DAY_CONFIG:{
								uint8_t day = getnumber(cmd->payload , cmd->len);
 8001b1c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001b1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	4619      	mov	r1, r3
 8001b24:	4610      	mov	r0, r2
 8001b26:	f7ff fe4d 	bl	80017c4 <getnumber>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
								date.WeekDay = day;
 8001b30:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001b34:	723b      	strb	r3, [r7, #8]
								rtc_state = YEAR_CONFIG;
 8001b36:	4b4a      	ldr	r3, [pc, #296]	; (8001c60 <rtc_task+0x454>)
 8001b38:	2202      	movs	r2, #2
 8001b3a:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_yr,portMAX_DELAY);
 8001b3c:	4b49      	ldr	r3, [pc, #292]	; (8001c64 <rtc_task+0x458>)
 8001b3e:	6818      	ldr	r0, [r3, #0]
 8001b40:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001b44:	2300      	movs	r3, #0
 8001b46:	f04f 32ff 	mov.w	r2, #4294967295
 8001b4a:	f003 fa47 	bl	8004fdc <xQueueGenericSend>
								break;}
 8001b4e:	e035      	b.n	8001bbc <rtc_task+0x3b0>
							case YEAR_CONFIG:{
								uint8_t year = getnumber(cmd->payload , cmd->len);
 8001b50:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001b52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	4619      	mov	r1, r3
 8001b58:	4610      	mov	r0, r2
 8001b5a:	f7ff fe33 	bl	80017c4 <getnumber>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
								date.Year = year;
 8001b64:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8001b68:	72fb      	strb	r3, [r7, #11]

								if(!validate_rtc_information(NULL,&date))
 8001b6a:	f107 0308 	add.w	r3, r7, #8
 8001b6e:	4619      	mov	r1, r3
 8001b70:	2000      	movs	r0, #0
 8001b72:	f7ff fb0f 	bl	8001194 <validate_rtc_information>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d110      	bne.n	8001b9e <rtc_task+0x392>
								{
									rtc_configure_date(&date);
 8001b7c:	f107 0308 	add.w	r3, r7, #8
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff faf7 	bl	8001174 <rtc_configure_date>
									xQueueSend(q_print,&msg_conf,portMAX_DELAY);
 8001b86:	4b37      	ldr	r3, [pc, #220]	; (8001c64 <rtc_task+0x458>)
 8001b88:	6818      	ldr	r0, [r3, #0]
 8001b8a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001b8e:	2300      	movs	r3, #0
 8001b90:	f04f 32ff 	mov.w	r2, #4294967295
 8001b94:	f003 fa22 	bl	8004fdc <xQueueGenericSend>
									show_time_date();
 8001b98:	f7ff fa68 	bl	800106c <show_time_date>
 8001b9c:	e007      	b.n	8001bae <rtc_task+0x3a2>
								}else
									xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001b9e:	4b31      	ldr	r3, [pc, #196]	; (8001c64 <rtc_task+0x458>)
 8001ba0:	6818      	ldr	r0, [r3, #0]
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba8:	492f      	ldr	r1, [pc, #188]	; (8001c68 <rtc_task+0x45c>)
 8001baa:	f003 fa17 	bl	8004fdc <xQueueGenericSend>

								curr_state = sMainMenu;
 8001bae:	4b2f      	ldr	r3, [pc, #188]	; (8001c6c <rtc_task+0x460>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	701a      	strb	r2, [r3, #0]
								rtc_state = 0;
 8001bb4:	4b2a      	ldr	r3, [pc, #168]	; (8001c60 <rtc_task+0x454>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
								break;}
 8001bba:	bf00      	nop
						}


					break;}
 8001bbc:	e041      	b.n	8001c42 <rtc_task+0x436>

				case sRtcReport:{
					/*enable or disable RTC current time reporting over ITM printf */
					if(cmd->len == 1)
 8001bbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d131      	bne.n	8001c2a <rtc_task+0x41e>
					{
						if(cmd->payload[0] == 'y'){
 8001bc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b79      	cmp	r3, #121	; 0x79
 8001bcc:	d115      	bne.n	8001bfa <rtc_task+0x3ee>
							if(xTimerIsTimerActive(rtc_timer) == pdFALSE)
 8001bce:	4b28      	ldr	r3, [pc, #160]	; (8001c70 <rtc_task+0x464>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f005 faec 	bl	80071b0 <xTimerIsTimerActive>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d12d      	bne.n	8001c3a <rtc_task+0x42e>
								xTimerStart(rtc_timer,portMAX_DELAY);
 8001bde:	4b24      	ldr	r3, [pc, #144]	; (8001c70 <rtc_task+0x464>)
 8001be0:	681c      	ldr	r4, [r3, #0]
 8001be2:	f004 f907 	bl	8005df4 <xTaskGetTickCount>
 8001be6:	4602      	mov	r2, r0
 8001be8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	2300      	movs	r3, #0
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	4620      	mov	r0, r4
 8001bf4:	f004 fffc 	bl	8006bf0 <xTimerGenericCommand>
 8001bf8:	e01f      	b.n	8001c3a <rtc_task+0x42e>
						}else if (cmd->payload[0] == 'n'){
 8001bfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b6e      	cmp	r3, #110	; 0x6e
 8001c00:	d10a      	bne.n	8001c18 <rtc_task+0x40c>
							xTimerStop(rtc_timer,portMAX_DELAY);
 8001c02:	4b1b      	ldr	r3, [pc, #108]	; (8001c70 <rtc_task+0x464>)
 8001c04:	6818      	ldr	r0, [r3, #0]
 8001c06:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2103      	movs	r1, #3
 8001c12:	f004 ffed 	bl	8006bf0 <xTimerGenericCommand>
 8001c16:	e010      	b.n	8001c3a <rtc_task+0x42e>
						}else{
							xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001c18:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <rtc_task+0x458>)
 8001c1a:	6818      	ldr	r0, [r3, #0]
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8001c22:	4911      	ldr	r1, [pc, #68]	; (8001c68 <rtc_task+0x45c>)
 8001c24:	f003 f9da 	bl	8004fdc <xQueueGenericSend>
 8001c28:	e007      	b.n	8001c3a <rtc_task+0x42e>
						}

					}else
					    xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001c2a:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <rtc_task+0x458>)
 8001c2c:	6818      	ldr	r0, [r3, #0]
 8001c2e:	2300      	movs	r3, #0
 8001c30:	f04f 32ff 	mov.w	r2, #4294967295
 8001c34:	490c      	ldr	r1, [pc, #48]	; (8001c68 <rtc_task+0x45c>)
 8001c36:	f003 f9d1 	bl	8004fdc <xQueueGenericSend>

					curr_state = sMainMenu;
 8001c3a:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <rtc_task+0x460>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	701a      	strb	r2, [r3, #0]
					break;}
 8001c40:	bf00      	nop
		while(curr_state != sMainMenu){
 8001c42:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <rtc_task+0x460>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f47f ae19 	bne.w	800187e <rtc_task+0x72>

		} //while end


		/*Notify menu task */
		xTaskNotify(handle_menu_task,0,eNoAction);
 8001c4c:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <rtc_task+0x468>)
 8001c4e:	6818      	ldr	r0, [r3, #0]
 8001c50:	2300      	movs	r3, #0
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	2300      	movs	r3, #0
 8001c56:	2200      	movs	r2, #0
 8001c58:	2100      	movs	r1, #0
 8001c5a:	f004 fcf3 	bl	8006644 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001c5e:	e5ef      	b.n	8001840 <rtc_task+0x34>
 8001c60:	200001e4 	.word	0x200001e4
 8001c64:	2000012c 	.word	0x2000012c
 8001c68:	20000014 	.word	0x20000014
 8001c6c:	20000145 	.word	0x20000145
 8001c70:	20000140 	.word	0x20000140
 8001c74:	20000118 	.word	0x20000118

08001c78 <print_task>:
}



void print_task(void *param)
{
 8001c78:	b590      	push	{r4, r7, lr}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]

	uint32_t *msg;
	while(1){
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8001c80:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <print_task+0x38>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f107 010c 	add.w	r1, r7, #12
 8001c88:	f04f 32ff 	mov.w	r2, #4294967295
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f003 fb4d 	bl	800532c <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg),HAL_MAX_DELAY);
 8001c92:	68fc      	ldr	r4, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7fe faa4 	bl	80001e4 <strlen>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca4:	4621      	mov	r1, r4
 8001ca6:	4803      	ldr	r0, [pc, #12]	; (8001cb4 <print_task+0x3c>)
 8001ca8:	f001 ffcf 	bl	8003c4a <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8001cac:	e7e8      	b.n	8001c80 <print_task+0x8>
 8001cae:	bf00      	nop
 8001cb0:	2000012c 	.word	0x2000012c
 8001cb4:	200000d0 	.word	0x200000d0

08001cb8 <cmd_handler_task>:
}



void cmd_handler_task(void *param)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08a      	sub	sp, #40	; 0x28
 8001cbc:	af02      	add	r7, sp, #8
 8001cbe:	6078      	str	r0, [r7, #4]
	BaseType_t ret;
	command_t cmd;

	while(1){
		/*Implement notify wait */
		ret = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc4:	9300      	str	r3, [sp, #0]
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2100      	movs	r1, #0
 8001ccc:	2000      	movs	r0, #0
 8001cce:	f004 fc39 	bl	8006544 <xTaskGenericNotifyWait>
 8001cd2:	61f8      	str	r0, [r7, #28]

		if(ret == pdTRUE){
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d1f2      	bne.n	8001cc0 <cmd_handler_task+0x8>
			/*process the user data(command) stored in input data queue */
			process_command(&cmd);
 8001cda:	f107 030c 	add.w	r3, r7, #12
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f000 f802 	bl	8001ce8 <process_command>
		ret = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001ce4:	e7ec      	b.n	8001cc0 <cmd_handler_task+0x8>
	...

08001ce8 <process_command>:

}


void process_command(command_t *cmd)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af02      	add	r7, sp, #8
 8001cee:	6078      	str	r0, [r7, #4]
	extract_command(cmd);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 f835 	bl	8001d60 <extract_command>

	switch(curr_state)
 8001cf6:	4b16      	ldr	r3, [pc, #88]	; (8001d50 <process_command+0x68>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2b05      	cmp	r3, #5
 8001cfc:	dc24      	bgt.n	8001d48 <process_command+0x60>
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	da18      	bge.n	8001d34 <process_command+0x4c>
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d002      	beq.n	8001d0c <process_command+0x24>
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d00a      	beq.n	8001d20 <process_command+0x38>
			xTaskNotify(handle_rtc_task,(uint32_t)cmd , eSetValueWithOverwrite);
		break;

	}

}
 8001d0a:	e01d      	b.n	8001d48 <process_command+0x60>
			xTaskNotify(handle_menu_task,(uint32_t)cmd , eSetValueWithOverwrite);
 8001d0c:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <process_command+0x6c>)
 8001d0e:	6818      	ldr	r0, [r3, #0]
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	2300      	movs	r3, #0
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	2303      	movs	r3, #3
 8001d18:	2100      	movs	r1, #0
 8001d1a:	f004 fc93 	bl	8006644 <xTaskGenericNotify>
		break;
 8001d1e:	e013      	b.n	8001d48 <process_command+0x60>
			xTaskNotify(handle_led_task,(uint32_t)cmd , eSetValueWithOverwrite);
 8001d20:	4b0d      	ldr	r3, [pc, #52]	; (8001d58 <process_command+0x70>)
 8001d22:	6818      	ldr	r0, [r3, #0]
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	2300      	movs	r3, #0
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	f004 fc89 	bl	8006644 <xTaskGenericNotify>
		break;
 8001d32:	e009      	b.n	8001d48 <process_command+0x60>
			xTaskNotify(handle_rtc_task,(uint32_t)cmd , eSetValueWithOverwrite);
 8001d34:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <process_command+0x74>)
 8001d36:	6818      	ldr	r0, [r3, #0]
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	2303      	movs	r3, #3
 8001d40:	2100      	movs	r1, #0
 8001d42:	f004 fc7f 	bl	8006644 <xTaskGenericNotify>
		break;
 8001d46:	bf00      	nop
}
 8001d48:	bf00      	nop
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20000145 	.word	0x20000145
 8001d54:	20000118 	.word	0x20000118
 8001d58:	20000120 	.word	0x20000120
 8001d5c:	20000124 	.word	0x20000124

08001d60 <extract_command>:


int extract_command(command_t *cmd)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
	uint8_t item;
	BaseType_t  status;

	status = uxQueueMessagesWaiting(q_data );
 8001d68:	4b19      	ldr	r3, [pc, #100]	; (8001dd0 <extract_command+0x70>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f003 fc4c 	bl	800560a <uxQueueMessagesWaiting>
 8001d72:	4603      	mov	r3, r0
 8001d74:	613b      	str	r3, [r7, #16]
	if(!status) return -1;
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d102      	bne.n	8001d82 <extract_command+0x22>
 8001d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d80:	e022      	b.n	8001dc8 <extract_command+0x68>
	uint8_t i =0;
 8001d82:	2300      	movs	r3, #0
 8001d84:	75fb      	strb	r3, [r7, #23]

	do
	{
		status = xQueueReceive(q_data,&item,0);
 8001d86:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <extract_command+0x70>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f107 010f 	add.w	r1, r7, #15
 8001d8e:	2200      	movs	r2, #0
 8001d90:	4618      	mov	r0, r3
 8001d92:	f003 facb 	bl	800532c <xQueueReceive>
 8001d96:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE) cmd->payload[i++] = item;
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d106      	bne.n	8001dac <extract_command+0x4c>
 8001d9e:	7dfb      	ldrb	r3, [r7, #23]
 8001da0:	1c5a      	adds	r2, r3, #1
 8001da2:	75fa      	strb	r2, [r7, #23]
 8001da4:	461a      	mov	r2, r3
 8001da6:	7bf9      	ldrb	r1, [r7, #15]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	5499      	strb	r1, [r3, r2]
	}while(item != '\n');
 8001dac:	7bfb      	ldrb	r3, [r7, #15]
 8001dae:	2b0a      	cmp	r3, #10
 8001db0:	d1e9      	bne.n	8001d86 <extract_command+0x26>

	cmd->payload[i-1] = '\0';
 8001db2:	7dfb      	ldrb	r3, [r7, #23]
 8001db4:	3b01      	subs	r3, #1
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	2100      	movs	r1, #0
 8001dba:	54d1      	strb	r1, [r2, r3]
	cmd->len = i-1; /*save  length of the command excluding null char */
 8001dbc:	7dfb      	ldrb	r3, [r7, #23]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	60da      	str	r2, [r3, #12]

	return 0;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20000128 	.word	0x20000128

08001dd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001dd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dd8:	480d      	ldr	r0, [pc, #52]	; (8001e10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dda:	490e      	ldr	r1, [pc, #56]	; (8001e14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ddc:	4a0e      	ldr	r2, [pc, #56]	; (8001e18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001de0:	e002      	b.n	8001de8 <LoopCopyDataInit>

08001de2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001de2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001de4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001de6:	3304      	adds	r3, #4

08001de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001de8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dec:	d3f9      	bcc.n	8001de2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dee:	4a0b      	ldr	r2, [pc, #44]	; (8001e1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001df0:	4c0b      	ldr	r4, [pc, #44]	; (8001e20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001df2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001df4:	e001      	b.n	8001dfa <LoopFillZerobss>

08001df6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001df6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001df8:	3204      	adds	r2, #4

08001dfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dfc:	d3fb      	bcc.n	8001df6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001dfe:	f7ff fbc5 	bl	800158c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e02:	f005 fe77 	bl	8007af4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e06:	f7fe fd03 	bl	8000810 <main>
  bx  lr    
 8001e0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e14:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001e18:	080092dc 	.word	0x080092dc
  ldr r2, =_sbss
 8001e1c:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001e20:	200193a4 	.word	0x200193a4

08001e24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e24:	e7fe      	b.n	8001e24 <ADC_IRQHandler>
	...

08001e28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e2c:	4b0e      	ldr	r3, [pc, #56]	; (8001e68 <HAL_Init+0x40>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a0d      	ldr	r2, [pc, #52]	; (8001e68 <HAL_Init+0x40>)
 8001e32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e38:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <HAL_Init+0x40>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a0a      	ldr	r2, [pc, #40]	; (8001e68 <HAL_Init+0x40>)
 8001e3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e44:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <HAL_Init+0x40>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a07      	ldr	r2, [pc, #28]	; (8001e68 <HAL_Init+0x40>)
 8001e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e50:	2003      	movs	r0, #3
 8001e52:	f000 f8d8 	bl	8002006 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e56:	200f      	movs	r0, #15
 8001e58:	f7ff fa70 	bl	800133c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e5c:	f7ff f9cc 	bl	80011f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40023c00 	.word	0x40023c00

08001e6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e70:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <HAL_IncTick+0x20>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	461a      	mov	r2, r3
 8001e76:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <HAL_IncTick+0x24>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	4a04      	ldr	r2, [pc, #16]	; (8001e90 <HAL_IncTick+0x24>)
 8001e7e:	6013      	str	r3, [r2, #0]
}
 8001e80:	bf00      	nop
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	2000001c 	.word	0x2000001c
 8001e90:	200001e8 	.word	0x200001e8

08001e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return uwTick;
 8001e98:	4b03      	ldr	r3, [pc, #12]	; (8001ea8 <HAL_GetTick+0x14>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	200001e8 	.word	0x200001e8

08001eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ec8:	4013      	ands	r3, r2
 8001eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ed4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ede:	4a04      	ldr	r2, [pc, #16]	; (8001ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	60d3      	str	r3, [r2, #12]
}
 8001ee4:	bf00      	nop
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef8:	4b04      	ldr	r3, [pc, #16]	; (8001f0c <__NVIC_GetPriorityGrouping+0x18>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	0a1b      	lsrs	r3, r3, #8
 8001efe:	f003 0307 	and.w	r3, r3, #7
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	db0b      	blt.n	8001f3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f22:	79fb      	ldrb	r3, [r7, #7]
 8001f24:	f003 021f 	and.w	r2, r3, #31
 8001f28:	4907      	ldr	r1, [pc, #28]	; (8001f48 <__NVIC_EnableIRQ+0x38>)
 8001f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2e:	095b      	lsrs	r3, r3, #5
 8001f30:	2001      	movs	r0, #1
 8001f32:	fa00 f202 	lsl.w	r2, r0, r2
 8001f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	e000e100 	.word	0xe000e100

08001f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	6039      	str	r1, [r7, #0]
 8001f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	db0a      	blt.n	8001f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	490c      	ldr	r1, [pc, #48]	; (8001f98 <__NVIC_SetPriority+0x4c>)
 8001f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6a:	0112      	lsls	r2, r2, #4
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	440b      	add	r3, r1
 8001f70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f74:	e00a      	b.n	8001f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	4908      	ldr	r1, [pc, #32]	; (8001f9c <__NVIC_SetPriority+0x50>)
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	f003 030f 	and.w	r3, r3, #15
 8001f82:	3b04      	subs	r3, #4
 8001f84:	0112      	lsls	r2, r2, #4
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	440b      	add	r3, r1
 8001f8a:	761a      	strb	r2, [r3, #24]
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	e000e100 	.word	0xe000e100
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b089      	sub	sp, #36	; 0x24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f1c3 0307 	rsb	r3, r3, #7
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	bf28      	it	cs
 8001fbe:	2304      	movcs	r3, #4
 8001fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	2b06      	cmp	r3, #6
 8001fc8:	d902      	bls.n	8001fd0 <NVIC_EncodePriority+0x30>
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	3b03      	subs	r3, #3
 8001fce:	e000      	b.n	8001fd2 <NVIC_EncodePriority+0x32>
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43da      	mvns	r2, r3
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	401a      	ands	r2, r3
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff2:	43d9      	mvns	r1, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff8:	4313      	orrs	r3, r2
         );
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3724      	adds	r7, #36	; 0x24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b082      	sub	sp, #8
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff ff4c 	bl	8001eac <__NVIC_SetPriorityGrouping>
}
 8002014:	bf00      	nop
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
 8002028:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800202e:	f7ff ff61 	bl	8001ef4 <__NVIC_GetPriorityGrouping>
 8002032:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	68b9      	ldr	r1, [r7, #8]
 8002038:	6978      	ldr	r0, [r7, #20]
 800203a:	f7ff ffb1 	bl	8001fa0 <NVIC_EncodePriority>
 800203e:	4602      	mov	r2, r0
 8002040:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002044:	4611      	mov	r1, r2
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff ff80 	bl	8001f4c <__NVIC_SetPriority>
}
 800204c:	bf00      	nop
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800205e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff ff54 	bl	8001f10 <__NVIC_EnableIRQ>
}
 8002068:	bf00      	nop
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800207e:	f7ff ff09 	bl	8001e94 <HAL_GetTick>
 8002082:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d008      	beq.n	80020a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2280      	movs	r2, #128	; 0x80
 8002094:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e052      	b.n	8002148 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 0216 	bic.w	r2, r2, #22
 80020b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	695a      	ldr	r2, [r3, #20]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d103      	bne.n	80020d2 <HAL_DMA_Abort+0x62>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d007      	beq.n	80020e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 0208 	bic.w	r2, r2, #8
 80020e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 0201 	bic.w	r2, r2, #1
 80020f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020f2:	e013      	b.n	800211c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020f4:	f7ff fece 	bl	8001e94 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b05      	cmp	r3, #5
 8002100:	d90c      	bls.n	800211c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2220      	movs	r2, #32
 8002106:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2203      	movs	r2, #3
 800210c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e015      	b.n	8002148 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1e4      	bne.n	80020f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800212e:	223f      	movs	r2, #63	; 0x3f
 8002130:	409a      	lsls	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d004      	beq.n	800216e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2280      	movs	r2, #128	; 0x80
 8002168:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e00c      	b.n	8002188 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2205      	movs	r2, #5
 8002172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 0201 	bic.w	r2, r2, #1
 8002184:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002194:	b480      	push	{r7}
 8002196:	b089      	sub	sp, #36	; 0x24
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021aa:	2300      	movs	r3, #0
 80021ac:	61fb      	str	r3, [r7, #28]
 80021ae:	e16b      	b.n	8002488 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021b0:	2201      	movs	r2, #1
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	4013      	ands	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	f040 815a 	bne.w	8002482 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f003 0303 	and.w	r3, r3, #3
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d005      	beq.n	80021e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d130      	bne.n	8002248 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	2203      	movs	r2, #3
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43db      	mvns	r3, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4013      	ands	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	68da      	ldr	r2, [r3, #12]
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4313      	orrs	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800221c:	2201      	movs	r2, #1
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	43db      	mvns	r3, r3
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4013      	ands	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	091b      	lsrs	r3, r3, #4
 8002232:	f003 0201 	and.w	r2, r3, #1
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 0303 	and.w	r3, r3, #3
 8002250:	2b03      	cmp	r3, #3
 8002252:	d017      	beq.n	8002284 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	2203      	movs	r2, #3
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4313      	orrs	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 0303 	and.w	r3, r3, #3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d123      	bne.n	80022d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	08da      	lsrs	r2, r3, #3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	3208      	adds	r2, #8
 8002298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800229c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	220f      	movs	r2, #15
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	691a      	ldr	r2, [r3, #16]
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	08da      	lsrs	r2, r3, #3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	3208      	adds	r2, #8
 80022d2:	69b9      	ldr	r1, [r7, #24]
 80022d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	2203      	movs	r2, #3
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4013      	ands	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f003 0203 	and.w	r2, r3, #3
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4313      	orrs	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002314:	2b00      	cmp	r3, #0
 8002316:	f000 80b4 	beq.w	8002482 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	4b60      	ldr	r3, [pc, #384]	; (80024a0 <HAL_GPIO_Init+0x30c>)
 8002320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002322:	4a5f      	ldr	r2, [pc, #380]	; (80024a0 <HAL_GPIO_Init+0x30c>)
 8002324:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002328:	6453      	str	r3, [r2, #68]	; 0x44
 800232a:	4b5d      	ldr	r3, [pc, #372]	; (80024a0 <HAL_GPIO_Init+0x30c>)
 800232c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002336:	4a5b      	ldr	r2, [pc, #364]	; (80024a4 <HAL_GPIO_Init+0x310>)
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	089b      	lsrs	r3, r3, #2
 800233c:	3302      	adds	r3, #2
 800233e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002342:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f003 0303 	and.w	r3, r3, #3
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	220f      	movs	r2, #15
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43db      	mvns	r3, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4013      	ands	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a52      	ldr	r2, [pc, #328]	; (80024a8 <HAL_GPIO_Init+0x314>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d02b      	beq.n	80023ba <HAL_GPIO_Init+0x226>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a51      	ldr	r2, [pc, #324]	; (80024ac <HAL_GPIO_Init+0x318>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d025      	beq.n	80023b6 <HAL_GPIO_Init+0x222>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a50      	ldr	r2, [pc, #320]	; (80024b0 <HAL_GPIO_Init+0x31c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d01f      	beq.n	80023b2 <HAL_GPIO_Init+0x21e>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a4f      	ldr	r2, [pc, #316]	; (80024b4 <HAL_GPIO_Init+0x320>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d019      	beq.n	80023ae <HAL_GPIO_Init+0x21a>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a4e      	ldr	r2, [pc, #312]	; (80024b8 <HAL_GPIO_Init+0x324>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d013      	beq.n	80023aa <HAL_GPIO_Init+0x216>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a4d      	ldr	r2, [pc, #308]	; (80024bc <HAL_GPIO_Init+0x328>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d00d      	beq.n	80023a6 <HAL_GPIO_Init+0x212>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a4c      	ldr	r2, [pc, #304]	; (80024c0 <HAL_GPIO_Init+0x32c>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d007      	beq.n	80023a2 <HAL_GPIO_Init+0x20e>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a4b      	ldr	r2, [pc, #300]	; (80024c4 <HAL_GPIO_Init+0x330>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d101      	bne.n	800239e <HAL_GPIO_Init+0x20a>
 800239a:	2307      	movs	r3, #7
 800239c:	e00e      	b.n	80023bc <HAL_GPIO_Init+0x228>
 800239e:	2308      	movs	r3, #8
 80023a0:	e00c      	b.n	80023bc <HAL_GPIO_Init+0x228>
 80023a2:	2306      	movs	r3, #6
 80023a4:	e00a      	b.n	80023bc <HAL_GPIO_Init+0x228>
 80023a6:	2305      	movs	r3, #5
 80023a8:	e008      	b.n	80023bc <HAL_GPIO_Init+0x228>
 80023aa:	2304      	movs	r3, #4
 80023ac:	e006      	b.n	80023bc <HAL_GPIO_Init+0x228>
 80023ae:	2303      	movs	r3, #3
 80023b0:	e004      	b.n	80023bc <HAL_GPIO_Init+0x228>
 80023b2:	2302      	movs	r3, #2
 80023b4:	e002      	b.n	80023bc <HAL_GPIO_Init+0x228>
 80023b6:	2301      	movs	r3, #1
 80023b8:	e000      	b.n	80023bc <HAL_GPIO_Init+0x228>
 80023ba:	2300      	movs	r3, #0
 80023bc:	69fa      	ldr	r2, [r7, #28]
 80023be:	f002 0203 	and.w	r2, r2, #3
 80023c2:	0092      	lsls	r2, r2, #2
 80023c4:	4093      	lsls	r3, r2
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023cc:	4935      	ldr	r1, [pc, #212]	; (80024a4 <HAL_GPIO_Init+0x310>)
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	089b      	lsrs	r3, r3, #2
 80023d2:	3302      	adds	r3, #2
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023da:	4b3b      	ldr	r3, [pc, #236]	; (80024c8 <HAL_GPIO_Init+0x334>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	43db      	mvns	r3, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4013      	ands	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023fe:	4a32      	ldr	r2, [pc, #200]	; (80024c8 <HAL_GPIO_Init+0x334>)
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002404:	4b30      	ldr	r3, [pc, #192]	; (80024c8 <HAL_GPIO_Init+0x334>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	43db      	mvns	r3, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d003      	beq.n	8002428 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	4313      	orrs	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002428:	4a27      	ldr	r2, [pc, #156]	; (80024c8 <HAL_GPIO_Init+0x334>)
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800242e:	4b26      	ldr	r3, [pc, #152]	; (80024c8 <HAL_GPIO_Init+0x334>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	43db      	mvns	r3, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4013      	ands	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	4313      	orrs	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002452:	4a1d      	ldr	r2, [pc, #116]	; (80024c8 <HAL_GPIO_Init+0x334>)
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002458:	4b1b      	ldr	r3, [pc, #108]	; (80024c8 <HAL_GPIO_Init+0x334>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	43db      	mvns	r3, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4013      	ands	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d003      	beq.n	800247c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4313      	orrs	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800247c:	4a12      	ldr	r2, [pc, #72]	; (80024c8 <HAL_GPIO_Init+0x334>)
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	3301      	adds	r3, #1
 8002486:	61fb      	str	r3, [r7, #28]
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	2b0f      	cmp	r3, #15
 800248c:	f67f ae90 	bls.w	80021b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002490:	bf00      	nop
 8002492:	bf00      	nop
 8002494:	3724      	adds	r7, #36	; 0x24
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	40023800 	.word	0x40023800
 80024a4:	40013800 	.word	0x40013800
 80024a8:	40020000 	.word	0x40020000
 80024ac:	40020400 	.word	0x40020400
 80024b0:	40020800 	.word	0x40020800
 80024b4:	40020c00 	.word	0x40020c00
 80024b8:	40021000 	.word	0x40021000
 80024bc:	40021400 	.word	0x40021400
 80024c0:	40021800 	.word	0x40021800
 80024c4:	40021c00 	.word	0x40021c00
 80024c8:	40013c00 	.word	0x40013c00

080024cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	460b      	mov	r3, r1
 80024d6:	807b      	strh	r3, [r7, #2]
 80024d8:	4613      	mov	r3, r2
 80024da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024dc:	787b      	ldrb	r3, [r7, #1]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024e2:	887a      	ldrh	r2, [r7, #2]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024e8:	e003      	b.n	80024f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024ea:	887b      	ldrh	r3, [r7, #2]
 80024ec:	041a      	lsls	r2, r3, #16
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	619a      	str	r2, [r3, #24]
}
 80024f2:	bf00      	nop
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
	...

08002500 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e267      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b00      	cmp	r3, #0
 800251c:	d075      	beq.n	800260a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800251e:	4b88      	ldr	r3, [pc, #544]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 030c 	and.w	r3, r3, #12
 8002526:	2b04      	cmp	r3, #4
 8002528:	d00c      	beq.n	8002544 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800252a:	4b85      	ldr	r3, [pc, #532]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002532:	2b08      	cmp	r3, #8
 8002534:	d112      	bne.n	800255c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002536:	4b82      	ldr	r3, [pc, #520]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800253e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002542:	d10b      	bne.n	800255c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002544:	4b7e      	ldr	r3, [pc, #504]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d05b      	beq.n	8002608 <HAL_RCC_OscConfig+0x108>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d157      	bne.n	8002608 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e242      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002564:	d106      	bne.n	8002574 <HAL_RCC_OscConfig+0x74>
 8002566:	4b76      	ldr	r3, [pc, #472]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a75      	ldr	r2, [pc, #468]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 800256c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	e01d      	b.n	80025b0 <HAL_RCC_OscConfig+0xb0>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800257c:	d10c      	bne.n	8002598 <HAL_RCC_OscConfig+0x98>
 800257e:	4b70      	ldr	r3, [pc, #448]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a6f      	ldr	r2, [pc, #444]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 8002584:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	4b6d      	ldr	r3, [pc, #436]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a6c      	ldr	r2, [pc, #432]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 8002590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	e00b      	b.n	80025b0 <HAL_RCC_OscConfig+0xb0>
 8002598:	4b69      	ldr	r3, [pc, #420]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a68      	ldr	r2, [pc, #416]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 800259e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a2:	6013      	str	r3, [r2, #0]
 80025a4:	4b66      	ldr	r3, [pc, #408]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a65      	ldr	r2, [pc, #404]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 80025aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d013      	beq.n	80025e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b8:	f7ff fc6c 	bl	8001e94 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025c0:	f7ff fc68 	bl	8001e94 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b64      	cmp	r3, #100	; 0x64
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e207      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d2:	4b5b      	ldr	r3, [pc, #364]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0f0      	beq.n	80025c0 <HAL_RCC_OscConfig+0xc0>
 80025de:	e014      	b.n	800260a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e0:	f7ff fc58 	bl	8001e94 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025e8:	f7ff fc54 	bl	8001e94 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b64      	cmp	r3, #100	; 0x64
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e1f3      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025fa:	4b51      	ldr	r3, [pc, #324]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f0      	bne.n	80025e8 <HAL_RCC_OscConfig+0xe8>
 8002606:	e000      	b.n	800260a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d063      	beq.n	80026de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002616:	4b4a      	ldr	r3, [pc, #296]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 030c 	and.w	r3, r3, #12
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00b      	beq.n	800263a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002622:	4b47      	ldr	r3, [pc, #284]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800262a:	2b08      	cmp	r3, #8
 800262c:	d11c      	bne.n	8002668 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800262e:	4b44      	ldr	r3, [pc, #272]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d116      	bne.n	8002668 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800263a:	4b41      	ldr	r3, [pc, #260]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d005      	beq.n	8002652 <HAL_RCC_OscConfig+0x152>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d001      	beq.n	8002652 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e1c7      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002652:	4b3b      	ldr	r3, [pc, #236]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	4937      	ldr	r1, [pc, #220]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 8002662:	4313      	orrs	r3, r2
 8002664:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002666:	e03a      	b.n	80026de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d020      	beq.n	80026b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002670:	4b34      	ldr	r3, [pc, #208]	; (8002744 <HAL_RCC_OscConfig+0x244>)
 8002672:	2201      	movs	r2, #1
 8002674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002676:	f7ff fc0d 	bl	8001e94 <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800267c:	e008      	b.n	8002690 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800267e:	f7ff fc09 	bl	8001e94 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e1a8      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002690:	4b2b      	ldr	r3, [pc, #172]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0f0      	beq.n	800267e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800269c:	4b28      	ldr	r3, [pc, #160]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	4925      	ldr	r1, [pc, #148]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	600b      	str	r3, [r1, #0]
 80026b0:	e015      	b.n	80026de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026b2:	4b24      	ldr	r3, [pc, #144]	; (8002744 <HAL_RCC_OscConfig+0x244>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b8:	f7ff fbec 	bl	8001e94 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026c0:	f7ff fbe8 	bl	8001e94 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e187      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026d2:	4b1b      	ldr	r3, [pc, #108]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f0      	bne.n	80026c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0308 	and.w	r3, r3, #8
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d036      	beq.n	8002758 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d016      	beq.n	8002720 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026f2:	4b15      	ldr	r3, [pc, #84]	; (8002748 <HAL_RCC_OscConfig+0x248>)
 80026f4:	2201      	movs	r2, #1
 80026f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f8:	f7ff fbcc 	bl	8001e94 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002700:	f7ff fbc8 	bl	8001e94 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e167      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002712:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 8002714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d0f0      	beq.n	8002700 <HAL_RCC_OscConfig+0x200>
 800271e:	e01b      	b.n	8002758 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002720:	4b09      	ldr	r3, [pc, #36]	; (8002748 <HAL_RCC_OscConfig+0x248>)
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002726:	f7ff fbb5 	bl	8001e94 <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800272c:	e00e      	b.n	800274c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800272e:	f7ff fbb1 	bl	8001e94 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d907      	bls.n	800274c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e150      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
 8002740:	40023800 	.word	0x40023800
 8002744:	42470000 	.word	0x42470000
 8002748:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800274c:	4b88      	ldr	r3, [pc, #544]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 800274e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1ea      	bne.n	800272e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 8097 	beq.w	8002894 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002766:	2300      	movs	r3, #0
 8002768:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800276a:	4b81      	ldr	r3, [pc, #516]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10f      	bne.n	8002796 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	60bb      	str	r3, [r7, #8]
 800277a:	4b7d      	ldr	r3, [pc, #500]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	4a7c      	ldr	r2, [pc, #496]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 8002780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002784:	6413      	str	r3, [r2, #64]	; 0x40
 8002786:	4b7a      	ldr	r3, [pc, #488]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278e:	60bb      	str	r3, [r7, #8]
 8002790:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002792:	2301      	movs	r3, #1
 8002794:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002796:	4b77      	ldr	r3, [pc, #476]	; (8002974 <HAL_RCC_OscConfig+0x474>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d118      	bne.n	80027d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027a2:	4b74      	ldr	r3, [pc, #464]	; (8002974 <HAL_RCC_OscConfig+0x474>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a73      	ldr	r2, [pc, #460]	; (8002974 <HAL_RCC_OscConfig+0x474>)
 80027a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ae:	f7ff fb71 	bl	8001e94 <HAL_GetTick>
 80027b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027b6:	f7ff fb6d 	bl	8001e94 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e10c      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c8:	4b6a      	ldr	r3, [pc, #424]	; (8002974 <HAL_RCC_OscConfig+0x474>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d0f0      	beq.n	80027b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d106      	bne.n	80027ea <HAL_RCC_OscConfig+0x2ea>
 80027dc:	4b64      	ldr	r3, [pc, #400]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 80027de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e0:	4a63      	ldr	r2, [pc, #396]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 80027e2:	f043 0301 	orr.w	r3, r3, #1
 80027e6:	6713      	str	r3, [r2, #112]	; 0x70
 80027e8:	e01c      	b.n	8002824 <HAL_RCC_OscConfig+0x324>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	2b05      	cmp	r3, #5
 80027f0:	d10c      	bne.n	800280c <HAL_RCC_OscConfig+0x30c>
 80027f2:	4b5f      	ldr	r3, [pc, #380]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 80027f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f6:	4a5e      	ldr	r2, [pc, #376]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 80027f8:	f043 0304 	orr.w	r3, r3, #4
 80027fc:	6713      	str	r3, [r2, #112]	; 0x70
 80027fe:	4b5c      	ldr	r3, [pc, #368]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 8002800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002802:	4a5b      	ldr	r2, [pc, #364]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	6713      	str	r3, [r2, #112]	; 0x70
 800280a:	e00b      	b.n	8002824 <HAL_RCC_OscConfig+0x324>
 800280c:	4b58      	ldr	r3, [pc, #352]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 800280e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002810:	4a57      	ldr	r2, [pc, #348]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 8002812:	f023 0301 	bic.w	r3, r3, #1
 8002816:	6713      	str	r3, [r2, #112]	; 0x70
 8002818:	4b55      	ldr	r3, [pc, #340]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 800281a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281c:	4a54      	ldr	r2, [pc, #336]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 800281e:	f023 0304 	bic.w	r3, r3, #4
 8002822:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d015      	beq.n	8002858 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800282c:	f7ff fb32 	bl	8001e94 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002832:	e00a      	b.n	800284a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002834:	f7ff fb2e 	bl	8001e94 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002842:	4293      	cmp	r3, r2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e0cb      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800284a:	4b49      	ldr	r3, [pc, #292]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 800284c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d0ee      	beq.n	8002834 <HAL_RCC_OscConfig+0x334>
 8002856:	e014      	b.n	8002882 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002858:	f7ff fb1c 	bl	8001e94 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800285e:	e00a      	b.n	8002876 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002860:	f7ff fb18 	bl	8001e94 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	f241 3288 	movw	r2, #5000	; 0x1388
 800286e:	4293      	cmp	r3, r2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e0b5      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002876:	4b3e      	ldr	r3, [pc, #248]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 8002878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1ee      	bne.n	8002860 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002882:	7dfb      	ldrb	r3, [r7, #23]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d105      	bne.n	8002894 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002888:	4b39      	ldr	r3, [pc, #228]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 800288a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288c:	4a38      	ldr	r2, [pc, #224]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 800288e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002892:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	2b00      	cmp	r3, #0
 800289a:	f000 80a1 	beq.w	80029e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800289e:	4b34      	ldr	r3, [pc, #208]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 030c 	and.w	r3, r3, #12
 80028a6:	2b08      	cmp	r3, #8
 80028a8:	d05c      	beq.n	8002964 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d141      	bne.n	8002936 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028b2:	4b31      	ldr	r3, [pc, #196]	; (8002978 <HAL_RCC_OscConfig+0x478>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b8:	f7ff faec 	bl	8001e94 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c0:	f7ff fae8 	bl	8001e94 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e087      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028d2:	4b27      	ldr	r3, [pc, #156]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f0      	bne.n	80028c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69da      	ldr	r2, [r3, #28]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	431a      	orrs	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	019b      	lsls	r3, r3, #6
 80028ee:	431a      	orrs	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f4:	085b      	lsrs	r3, r3, #1
 80028f6:	3b01      	subs	r3, #1
 80028f8:	041b      	lsls	r3, r3, #16
 80028fa:	431a      	orrs	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002900:	061b      	lsls	r3, r3, #24
 8002902:	491b      	ldr	r1, [pc, #108]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 8002904:	4313      	orrs	r3, r2
 8002906:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002908:	4b1b      	ldr	r3, [pc, #108]	; (8002978 <HAL_RCC_OscConfig+0x478>)
 800290a:	2201      	movs	r2, #1
 800290c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290e:	f7ff fac1 	bl	8001e94 <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002916:	f7ff fabd 	bl	8001e94 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e05c      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002928:	4b11      	ldr	r3, [pc, #68]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0f0      	beq.n	8002916 <HAL_RCC_OscConfig+0x416>
 8002934:	e054      	b.n	80029e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002936:	4b10      	ldr	r3, [pc, #64]	; (8002978 <HAL_RCC_OscConfig+0x478>)
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293c:	f7ff faaa 	bl	8001e94 <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002944:	f7ff faa6 	bl	8001e94 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e045      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002956:	4b06      	ldr	r3, [pc, #24]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f0      	bne.n	8002944 <HAL_RCC_OscConfig+0x444>
 8002962:	e03d      	b.n	80029e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d107      	bne.n	800297c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e038      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
 8002970:	40023800 	.word	0x40023800
 8002974:	40007000 	.word	0x40007000
 8002978:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800297c:	4b1b      	ldr	r3, [pc, #108]	; (80029ec <HAL_RCC_OscConfig+0x4ec>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d028      	beq.n	80029dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002994:	429a      	cmp	r2, r3
 8002996:	d121      	bne.n	80029dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d11a      	bne.n	80029dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029ac:	4013      	ands	r3, r2
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d111      	bne.n	80029dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c2:	085b      	lsrs	r3, r3, #1
 80029c4:	3b01      	subs	r3, #1
 80029c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d107      	bne.n	80029dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029d8:	429a      	cmp	r2, r3
 80029da:	d001      	beq.n	80029e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e000      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3718      	adds	r7, #24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	40023800 	.word	0x40023800

080029f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e0cc      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a04:	4b68      	ldr	r3, [pc, #416]	; (8002ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d90c      	bls.n	8002a2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a12:	4b65      	ldr	r3, [pc, #404]	; (8002ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1a:	4b63      	ldr	r3, [pc, #396]	; (8002ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d001      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e0b8      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d020      	beq.n	8002a7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d005      	beq.n	8002a50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a44:	4b59      	ldr	r3, [pc, #356]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	4a58      	ldr	r2, [pc, #352]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002a4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0308 	and.w	r3, r3, #8
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d005      	beq.n	8002a68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a5c:	4b53      	ldr	r3, [pc, #332]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	4a52      	ldr	r2, [pc, #328]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002a62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a68:	4b50      	ldr	r3, [pc, #320]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	494d      	ldr	r1, [pc, #308]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d044      	beq.n	8002b10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d107      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8e:	4b47      	ldr	r3, [pc, #284]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d119      	bne.n	8002ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e07f      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d003      	beq.n	8002aae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aaa:	2b03      	cmp	r3, #3
 8002aac:	d107      	bne.n	8002abe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aae:	4b3f      	ldr	r3, [pc, #252]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d109      	bne.n	8002ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e06f      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002abe:	4b3b      	ldr	r3, [pc, #236]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e067      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ace:	4b37      	ldr	r3, [pc, #220]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f023 0203 	bic.w	r2, r3, #3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	4934      	ldr	r1, [pc, #208]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ae0:	f7ff f9d8 	bl	8001e94 <HAL_GetTick>
 8002ae4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae6:	e00a      	b.n	8002afe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ae8:	f7ff f9d4 	bl	8001e94 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e04f      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002afe:	4b2b      	ldr	r3, [pc, #172]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 020c 	and.w	r2, r3, #12
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d1eb      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b10:	4b25      	ldr	r3, [pc, #148]	; (8002ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d20c      	bcs.n	8002b38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1e:	4b22      	ldr	r3, [pc, #136]	; (8002ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b26:	4b20      	ldr	r3, [pc, #128]	; (8002ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0307 	and.w	r3, r3, #7
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d001      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e032      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d008      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b44:	4b19      	ldr	r3, [pc, #100]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	4916      	ldr	r1, [pc, #88]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d009      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b62:	4b12      	ldr	r3, [pc, #72]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	490e      	ldr	r1, [pc, #56]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b76:	f000 f821 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	091b      	lsrs	r3, r3, #4
 8002b82:	f003 030f 	and.w	r3, r3, #15
 8002b86:	490a      	ldr	r1, [pc, #40]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b88:	5ccb      	ldrb	r3, [r1, r3]
 8002b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b8e:	4a09      	ldr	r2, [pc, #36]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b92:	4b09      	ldr	r3, [pc, #36]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fe fbd0 	bl	800133c <HAL_InitTick>

  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40023c00 	.word	0x40023c00
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	0800921c 	.word	0x0800921c
 8002bb4:	20000010 	.word	0x20000010
 8002bb8:	20000018 	.word	0x20000018

08002bbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bc0:	b094      	sub	sp, #80	; 0x50
 8002bc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	647b      	str	r3, [r7, #68]	; 0x44
 8002bc8:	2300      	movs	r3, #0
 8002bca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bcc:	2300      	movs	r3, #0
 8002bce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bd4:	4b79      	ldr	r3, [pc, #484]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x200>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 030c 	and.w	r3, r3, #12
 8002bdc:	2b08      	cmp	r3, #8
 8002bde:	d00d      	beq.n	8002bfc <HAL_RCC_GetSysClockFreq+0x40>
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	f200 80e1 	bhi.w	8002da8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d002      	beq.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x34>
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	d003      	beq.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002bee:	e0db      	b.n	8002da8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bf0:	4b73      	ldr	r3, [pc, #460]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bf2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002bf4:	e0db      	b.n	8002dae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bf6:	4b73      	ldr	r3, [pc, #460]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002bf8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bfa:	e0d8      	b.n	8002dae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bfc:	4b6f      	ldr	r3, [pc, #444]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x200>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c04:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c06:	4b6d      	ldr	r3, [pc, #436]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x200>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d063      	beq.n	8002cda <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c12:	4b6a      	ldr	r3, [pc, #424]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x200>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	099b      	lsrs	r3, r3, #6
 8002c18:	2200      	movs	r2, #0
 8002c1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c1c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c24:	633b      	str	r3, [r7, #48]	; 0x30
 8002c26:	2300      	movs	r3, #0
 8002c28:	637b      	str	r3, [r7, #52]	; 0x34
 8002c2a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c2e:	4622      	mov	r2, r4
 8002c30:	462b      	mov	r3, r5
 8002c32:	f04f 0000 	mov.w	r0, #0
 8002c36:	f04f 0100 	mov.w	r1, #0
 8002c3a:	0159      	lsls	r1, r3, #5
 8002c3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c40:	0150      	lsls	r0, r2, #5
 8002c42:	4602      	mov	r2, r0
 8002c44:	460b      	mov	r3, r1
 8002c46:	4621      	mov	r1, r4
 8002c48:	1a51      	subs	r1, r2, r1
 8002c4a:	6139      	str	r1, [r7, #16]
 8002c4c:	4629      	mov	r1, r5
 8002c4e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c52:	617b      	str	r3, [r7, #20]
 8002c54:	f04f 0200 	mov.w	r2, #0
 8002c58:	f04f 0300 	mov.w	r3, #0
 8002c5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c60:	4659      	mov	r1, fp
 8002c62:	018b      	lsls	r3, r1, #6
 8002c64:	4651      	mov	r1, sl
 8002c66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c6a:	4651      	mov	r1, sl
 8002c6c:	018a      	lsls	r2, r1, #6
 8002c6e:	4651      	mov	r1, sl
 8002c70:	ebb2 0801 	subs.w	r8, r2, r1
 8002c74:	4659      	mov	r1, fp
 8002c76:	eb63 0901 	sbc.w	r9, r3, r1
 8002c7a:	f04f 0200 	mov.w	r2, #0
 8002c7e:	f04f 0300 	mov.w	r3, #0
 8002c82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c8e:	4690      	mov	r8, r2
 8002c90:	4699      	mov	r9, r3
 8002c92:	4623      	mov	r3, r4
 8002c94:	eb18 0303 	adds.w	r3, r8, r3
 8002c98:	60bb      	str	r3, [r7, #8]
 8002c9a:	462b      	mov	r3, r5
 8002c9c:	eb49 0303 	adc.w	r3, r9, r3
 8002ca0:	60fb      	str	r3, [r7, #12]
 8002ca2:	f04f 0200 	mov.w	r2, #0
 8002ca6:	f04f 0300 	mov.w	r3, #0
 8002caa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cae:	4629      	mov	r1, r5
 8002cb0:	024b      	lsls	r3, r1, #9
 8002cb2:	4621      	mov	r1, r4
 8002cb4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cb8:	4621      	mov	r1, r4
 8002cba:	024a      	lsls	r2, r1, #9
 8002cbc:	4610      	mov	r0, r2
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002cc8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ccc:	f7fd fae8 	bl	80002a0 <__aeabi_uldivmod>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cd8:	e058      	b.n	8002d8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cda:	4b38      	ldr	r3, [pc, #224]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x200>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	099b      	lsrs	r3, r3, #6
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	4611      	mov	r1, r2
 8002ce6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002cea:	623b      	str	r3, [r7, #32]
 8002cec:	2300      	movs	r3, #0
 8002cee:	627b      	str	r3, [r7, #36]	; 0x24
 8002cf0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002cf4:	4642      	mov	r2, r8
 8002cf6:	464b      	mov	r3, r9
 8002cf8:	f04f 0000 	mov.w	r0, #0
 8002cfc:	f04f 0100 	mov.w	r1, #0
 8002d00:	0159      	lsls	r1, r3, #5
 8002d02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d06:	0150      	lsls	r0, r2, #5
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	4641      	mov	r1, r8
 8002d0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d12:	4649      	mov	r1, r9
 8002d14:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d18:	f04f 0200 	mov.w	r2, #0
 8002d1c:	f04f 0300 	mov.w	r3, #0
 8002d20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d2c:	ebb2 040a 	subs.w	r4, r2, sl
 8002d30:	eb63 050b 	sbc.w	r5, r3, fp
 8002d34:	f04f 0200 	mov.w	r2, #0
 8002d38:	f04f 0300 	mov.w	r3, #0
 8002d3c:	00eb      	lsls	r3, r5, #3
 8002d3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d42:	00e2      	lsls	r2, r4, #3
 8002d44:	4614      	mov	r4, r2
 8002d46:	461d      	mov	r5, r3
 8002d48:	4643      	mov	r3, r8
 8002d4a:	18e3      	adds	r3, r4, r3
 8002d4c:	603b      	str	r3, [r7, #0]
 8002d4e:	464b      	mov	r3, r9
 8002d50:	eb45 0303 	adc.w	r3, r5, r3
 8002d54:	607b      	str	r3, [r7, #4]
 8002d56:	f04f 0200 	mov.w	r2, #0
 8002d5a:	f04f 0300 	mov.w	r3, #0
 8002d5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d62:	4629      	mov	r1, r5
 8002d64:	028b      	lsls	r3, r1, #10
 8002d66:	4621      	mov	r1, r4
 8002d68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d6c:	4621      	mov	r1, r4
 8002d6e:	028a      	lsls	r2, r1, #10
 8002d70:	4610      	mov	r0, r2
 8002d72:	4619      	mov	r1, r3
 8002d74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d76:	2200      	movs	r2, #0
 8002d78:	61bb      	str	r3, [r7, #24]
 8002d7a:	61fa      	str	r2, [r7, #28]
 8002d7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d80:	f7fd fa8e 	bl	80002a0 <__aeabi_uldivmod>
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	4613      	mov	r3, r2
 8002d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d8c:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x200>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	0c1b      	lsrs	r3, r3, #16
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	3301      	adds	r3, #1
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002d9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002da6:	e002      	b.n	8002dae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002da8:	4b05      	ldr	r3, [pc, #20]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002daa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3750      	adds	r7, #80	; 0x50
 8002db4:	46bd      	mov	sp, r7
 8002db6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dba:	bf00      	nop
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	00f42400 	.word	0x00f42400
 8002dc4:	007a1200 	.word	0x007a1200

08002dc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dcc:	4b03      	ldr	r3, [pc, #12]	; (8002ddc <HAL_RCC_GetHCLKFreq+0x14>)
 8002dce:	681b      	ldr	r3, [r3, #0]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	20000010 	.word	0x20000010

08002de0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002de4:	f7ff fff0 	bl	8002dc8 <HAL_RCC_GetHCLKFreq>
 8002de8:	4602      	mov	r2, r0
 8002dea:	4b05      	ldr	r3, [pc, #20]	; (8002e00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	0a9b      	lsrs	r3, r3, #10
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	4903      	ldr	r1, [pc, #12]	; (8002e04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002df6:	5ccb      	ldrb	r3, [r1, r3]
 8002df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40023800 	.word	0x40023800
 8002e04:	0800922c 	.word	0x0800922c

08002e08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e0c:	f7ff ffdc 	bl	8002dc8 <HAL_RCC_GetHCLKFreq>
 8002e10:	4602      	mov	r2, r0
 8002e12:	4b05      	ldr	r3, [pc, #20]	; (8002e28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	0b5b      	lsrs	r3, r3, #13
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	4903      	ldr	r1, [pc, #12]	; (8002e2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e1e:	5ccb      	ldrb	r3, [r1, r3]
 8002e20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	0800922c 	.word	0x0800922c

08002e30 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	220f      	movs	r2, #15
 8002e3e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e40:	4b12      	ldr	r3, [pc, #72]	; (8002e8c <HAL_RCC_GetClockConfig+0x5c>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f003 0203 	and.w	r2, r3, #3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e4c:	4b0f      	ldr	r3, [pc, #60]	; (8002e8c <HAL_RCC_GetClockConfig+0x5c>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e58:	4b0c      	ldr	r3, [pc, #48]	; (8002e8c <HAL_RCC_GetClockConfig+0x5c>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002e64:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <HAL_RCC_GetClockConfig+0x5c>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	08db      	lsrs	r3, r3, #3
 8002e6a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e72:	4b07      	ldr	r3, [pc, #28]	; (8002e90 <HAL_RCC_GetClockConfig+0x60>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0207 	and.w	r2, r3, #7
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	601a      	str	r2, [r3, #0]
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	40023c00 	.word	0x40023c00

08002e94 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d105      	bne.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d035      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ebc:	4b62      	ldr	r3, [pc, #392]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ec2:	f7fe ffe7 	bl	8001e94 <HAL_GetTick>
 8002ec6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ec8:	e008      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002eca:	f7fe ffe3 	bl	8001e94 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e0b0      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002edc:	4b5b      	ldr	r3, [pc, #364]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1f0      	bne.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	019a      	lsls	r2, r3, #6
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	071b      	lsls	r3, r3, #28
 8002ef4:	4955      	ldr	r1, [pc, #340]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002efc:	4b52      	ldr	r3, [pc, #328]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002efe:	2201      	movs	r2, #1
 8002f00:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f02:	f7fe ffc7 	bl	8001e94 <HAL_GetTick>
 8002f06:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f08:	e008      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f0a:	f7fe ffc3 	bl	8001e94 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e090      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f1c:	4b4b      	ldr	r3, [pc, #300]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0f0      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 8083 	beq.w	800303c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f36:	2300      	movs	r3, #0
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	4b44      	ldr	r3, [pc, #272]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	4a43      	ldr	r2, [pc, #268]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f44:	6413      	str	r3, [r2, #64]	; 0x40
 8002f46:	4b41      	ldr	r3, [pc, #260]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002f52:	4b3f      	ldr	r3, [pc, #252]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a3e      	ldr	r2, [pc, #248]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f5c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f5e:	f7fe ff99 	bl	8001e94 <HAL_GetTick>
 8002f62:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002f64:	e008      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002f66:	f7fe ff95 	bl	8001e94 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e062      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002f78:	4b35      	ldr	r3, [pc, #212]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0f0      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f84:	4b31      	ldr	r3, [pc, #196]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f8c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d02f      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d028      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fa2:	4b2a      	ldr	r3, [pc, #168]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002faa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fac:	4b29      	ldr	r3, [pc, #164]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002fae:	2201      	movs	r2, #1
 8002fb0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fb2:	4b28      	ldr	r3, [pc, #160]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002fb8:	4a24      	ldr	r2, [pc, #144]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002fbe:	4b23      	ldr	r3, [pc, #140]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d114      	bne.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002fca:	f7fe ff63 	bl	8001e94 <HAL_GetTick>
 8002fce:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fd0:	e00a      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fd2:	f7fe ff5f 	bl	8001e94 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e02a      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe8:	4b18      	ldr	r3, [pc, #96]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0ee      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ffc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003000:	d10d      	bne.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003002:	4b12      	ldr	r3, [pc, #72]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003016:	490d      	ldr	r1, [pc, #52]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003018:	4313      	orrs	r3, r2
 800301a:	608b      	str	r3, [r1, #8]
 800301c:	e005      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800301e:	4b0b      	ldr	r3, [pc, #44]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	4a0a      	ldr	r2, [pc, #40]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003024:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003028:	6093      	str	r3, [r2, #8]
 800302a:	4b08      	ldr	r3, [pc, #32]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800302c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003036:	4905      	ldr	r1, [pc, #20]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003038:	4313      	orrs	r3, r2
 800303a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3718      	adds	r7, #24
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	42470068 	.word	0x42470068
 800304c:	40023800 	.word	0x40023800
 8003050:	40007000 	.word	0x40007000
 8003054:	42470e40 	.word	0x42470e40

08003058 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e066      	b.n	800313c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	7f5b      	ldrb	r3, [r3, #29]
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b00      	cmp	r3, #0
 8003076:	d105      	bne.n	8003084 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7fe f8e2 	bl	8001248 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2202      	movs	r2, #2
 8003088:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	22ca      	movs	r2, #202	; 0xca
 8003090:	625a      	str	r2, [r3, #36]	; 0x24
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2253      	movs	r2, #83	; 0x53
 8003098:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 fa45 	bl	800352a <RTC_EnterInitMode>
 80030a0:	4603      	mov	r3, r0
 80030a2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80030a4:	7bfb      	ldrb	r3, [r7, #15]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d12c      	bne.n	8003104 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6812      	ldr	r2, [r2, #0]
 80030b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80030b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030bc:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6899      	ldr	r1, [r3, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685a      	ldr	r2, [r3, #4]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	431a      	orrs	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	431a      	orrs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	68d2      	ldr	r2, [r2, #12]
 80030e4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6919      	ldr	r1, [r3, #16]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	041a      	lsls	r2, r3, #16
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 fa4c 	bl	8003598 <RTC_ExitInitMode>
 8003100:	4603      	mov	r3, r0
 8003102:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003104:	7bfb      	ldrb	r3, [r7, #15]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d113      	bne.n	8003132 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003118:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	699a      	ldr	r2, [r3, #24]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	22ff      	movs	r2, #255	; 0xff
 8003138:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800313a:	7bfb      	ldrb	r3, [r7, #15]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003144:	b590      	push	{r4, r7, lr}
 8003146:	b087      	sub	sp, #28
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	7f1b      	ldrb	r3, [r3, #28]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d101      	bne.n	8003160 <HAL_RTC_SetTime+0x1c>
 800315c:	2302      	movs	r3, #2
 800315e:	e087      	b.n	8003270 <HAL_RTC_SetTime+0x12c>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2201      	movs	r2, #1
 8003164:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2202      	movs	r2, #2
 800316a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d126      	bne.n	80031c0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800317c:	2b00      	cmp	r3, #0
 800317e:	d102      	bne.n	8003186 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	2200      	movs	r2, #0
 8003184:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	4618      	mov	r0, r3
 800318c:	f000 fa29 	bl	80035e2 <RTC_ByteToBcd2>
 8003190:	4603      	mov	r3, r0
 8003192:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	785b      	ldrb	r3, [r3, #1]
 8003198:	4618      	mov	r0, r3
 800319a:	f000 fa22 	bl	80035e2 <RTC_ByteToBcd2>
 800319e:	4603      	mov	r3, r0
 80031a0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80031a2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	789b      	ldrb	r3, [r3, #2]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 fa1a 	bl	80035e2 <RTC_ByteToBcd2>
 80031ae:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80031b0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	78db      	ldrb	r3, [r3, #3]
 80031b8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80031ba:	4313      	orrs	r3, r2
 80031bc:	617b      	str	r3, [r7, #20]
 80031be:	e018      	b.n	80031f2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d102      	bne.n	80031d4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	2200      	movs	r2, #0
 80031d2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	785b      	ldrb	r3, [r3, #1]
 80031de:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80031e0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80031e2:	68ba      	ldr	r2, [r7, #8]
 80031e4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80031e6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	78db      	ldrb	r3, [r3, #3]
 80031ec:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80031ee:	4313      	orrs	r3, r2
 80031f0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	22ca      	movs	r2, #202	; 0xca
 80031f8:	625a      	str	r2, [r3, #36]	; 0x24
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2253      	movs	r2, #83	; 0x53
 8003200:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f000 f991 	bl	800352a <RTC_EnterInitMode>
 8003208:	4603      	mov	r3, r0
 800320a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800320c:	7cfb      	ldrb	r3, [r7, #19]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d120      	bne.n	8003254 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800321c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003220:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003230:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6899      	ldr	r1, [r3, #8]
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	68da      	ldr	r2, [r3, #12]
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	431a      	orrs	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f000 f9a4 	bl	8003598 <RTC_ExitInitMode>
 8003250:	4603      	mov	r3, r0
 8003252:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003254:	7cfb      	ldrb	r3, [r7, #19]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d102      	bne.n	8003260 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2201      	movs	r2, #1
 800325e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	22ff      	movs	r2, #255	; 0xff
 8003266:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	771a      	strb	r2, [r3, #28]

  return status;
 800326e:	7cfb      	ldrb	r3, [r7, #19]
}
 8003270:	4618      	mov	r0, r3
 8003272:	371c      	adds	r7, #28
 8003274:	46bd      	mov	sp, r7
 8003276:	bd90      	pop	{r4, r7, pc}

08003278 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003284:	2300      	movs	r3, #0
 8003286:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80032aa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80032ae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	0c1b      	lsrs	r3, r3, #16
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	0a1b      	lsrs	r3, r3, #8
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032ca:	b2da      	uxtb	r2, r3
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	0d9b      	lsrs	r3, r3, #22
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d11a      	bne.n	800332a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f000 f98f 	bl	800361c <RTC_Bcd2ToByte>
 80032fe:	4603      	mov	r3, r0
 8003300:	461a      	mov	r2, r3
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	785b      	ldrb	r3, [r3, #1]
 800330a:	4618      	mov	r0, r3
 800330c:	f000 f986 	bl	800361c <RTC_Bcd2ToByte>
 8003310:	4603      	mov	r3, r0
 8003312:	461a      	mov	r2, r3
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	789b      	ldrb	r3, [r3, #2]
 800331c:	4618      	mov	r0, r3
 800331e:	f000 f97d 	bl	800361c <RTC_Bcd2ToByte>
 8003322:	4603      	mov	r3, r0
 8003324:	461a      	mov	r2, r3
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3718      	adds	r7, #24
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003334:	b590      	push	{r4, r7, lr}
 8003336:	b087      	sub	sp, #28
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003340:	2300      	movs	r3, #0
 8003342:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	7f1b      	ldrb	r3, [r3, #28]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d101      	bne.n	8003350 <HAL_RTC_SetDate+0x1c>
 800334c:	2302      	movs	r3, #2
 800334e:	e071      	b.n	8003434 <HAL_RTC_SetDate+0x100>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2201      	movs	r2, #1
 8003354:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2202      	movs	r2, #2
 800335a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10e      	bne.n	8003380 <HAL_RTC_SetDate+0x4c>
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	785b      	ldrb	r3, [r3, #1]
 8003366:	f003 0310 	and.w	r3, r3, #16
 800336a:	2b00      	cmp	r3, #0
 800336c:	d008      	beq.n	8003380 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	785b      	ldrb	r3, [r3, #1]
 8003372:	f023 0310 	bic.w	r3, r3, #16
 8003376:	b2db      	uxtb	r3, r3
 8003378:	330a      	adds	r3, #10
 800337a:	b2da      	uxtb	r2, r3
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d11c      	bne.n	80033c0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	78db      	ldrb	r3, [r3, #3]
 800338a:	4618      	mov	r0, r3
 800338c:	f000 f929 	bl	80035e2 <RTC_ByteToBcd2>
 8003390:	4603      	mov	r3, r0
 8003392:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	785b      	ldrb	r3, [r3, #1]
 8003398:	4618      	mov	r0, r3
 800339a:	f000 f922 	bl	80035e2 <RTC_ByteToBcd2>
 800339e:	4603      	mov	r3, r0
 80033a0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80033a2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	789b      	ldrb	r3, [r3, #2]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f000 f91a 	bl	80035e2 <RTC_ByteToBcd2>
 80033ae:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80033b0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80033ba:	4313      	orrs	r3, r2
 80033bc:	617b      	str	r3, [r7, #20]
 80033be:	e00e      	b.n	80033de <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	78db      	ldrb	r3, [r3, #3]
 80033c4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	785b      	ldrb	r3, [r3, #1]
 80033ca:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80033cc:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80033d2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80033da:	4313      	orrs	r3, r2
 80033dc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	22ca      	movs	r2, #202	; 0xca
 80033e4:	625a      	str	r2, [r3, #36]	; 0x24
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2253      	movs	r2, #83	; 0x53
 80033ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f000 f89b 	bl	800352a <RTC_EnterInitMode>
 80033f4:	4603      	mov	r3, r0
 80033f6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80033f8:	7cfb      	ldrb	r3, [r7, #19]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10c      	bne.n	8003418 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003408:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800340c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f000 f8c2 	bl	8003598 <RTC_ExitInitMode>
 8003414:	4603      	mov	r3, r0
 8003416:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003418:	7cfb      	ldrb	r3, [r7, #19]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d102      	bne.n	8003424 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2201      	movs	r2, #1
 8003422:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	22ff      	movs	r2, #255	; 0xff
 800342a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	771a      	strb	r2, [r3, #28]

  return status;
 8003432:	7cfb      	ldrb	r3, [r7, #19]
}
 8003434:	4618      	mov	r0, r3
 8003436:	371c      	adds	r7, #28
 8003438:	46bd      	mov	sp, r7
 800343a:	bd90      	pop	{r4, r7, pc}

0800343c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003448:	2300      	movs	r3, #0
 800344a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003456:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800345a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	0c1b      	lsrs	r3, r3, #16
 8003460:	b2da      	uxtb	r2, r3
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	0a1b      	lsrs	r3, r3, #8
 800346a:	b2db      	uxtb	r3, r3
 800346c:	f003 031f 	and.w	r3, r3, #31
 8003470:	b2da      	uxtb	r2, r3
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	b2db      	uxtb	r3, r3
 800347a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800347e:	b2da      	uxtb	r2, r3
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	0b5b      	lsrs	r3, r3, #13
 8003488:	b2db      	uxtb	r3, r3
 800348a:	f003 0307 	and.w	r3, r3, #7
 800348e:	b2da      	uxtb	r2, r3
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d11a      	bne.n	80034d0 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	78db      	ldrb	r3, [r3, #3]
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 f8bc 	bl	800361c <RTC_Bcd2ToByte>
 80034a4:	4603      	mov	r3, r0
 80034a6:	461a      	mov	r2, r3
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	785b      	ldrb	r3, [r3, #1]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f000 f8b3 	bl	800361c <RTC_Bcd2ToByte>
 80034b6:	4603      	mov	r3, r0
 80034b8:	461a      	mov	r2, r3
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	789b      	ldrb	r3, [r3, #2]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 f8aa 	bl	800361c <RTC_Bcd2ToByte>
 80034c8:	4603      	mov	r3, r0
 80034ca:	461a      	mov	r2, r3
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3718      	adds	r7, #24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b084      	sub	sp, #16
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034e2:	2300      	movs	r3, #0
 80034e4:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68da      	ldr	r2, [r3, #12]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034f4:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034f6:	f7fe fccd 	bl	8001e94 <HAL_GetTick>
 80034fa:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80034fc:	e009      	b.n	8003512 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80034fe:	f7fe fcc9 	bl	8001e94 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800350c:	d901      	bls.n	8003512 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e007      	b.n	8003522 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	f003 0320 	and.w	r3, r3, #32
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0ee      	beq.n	80034fe <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b084      	sub	sp, #16
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003532:	2300      	movs	r3, #0
 8003534:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003536:	2300      	movs	r3, #0
 8003538:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003544:	2b00      	cmp	r3, #0
 8003546:	d122      	bne.n	800358e <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003556:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003558:	f7fe fc9c 	bl	8001e94 <HAL_GetTick>
 800355c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800355e:	e00c      	b.n	800357a <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003560:	f7fe fc98 	bl	8001e94 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800356e:	d904      	bls.n	800357a <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2204      	movs	r2, #4
 8003574:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003584:	2b00      	cmp	r3, #0
 8003586:	d102      	bne.n	800358e <RTC_EnterInitMode+0x64>
 8003588:	7bfb      	ldrb	r3, [r7, #15]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d1e8      	bne.n	8003560 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800358e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003590:	4618      	mov	r0, r3
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035a0:	2300      	movs	r3, #0
 80035a2:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68da      	ldr	r2, [r3, #12]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035b2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f003 0320 	and.w	r3, r3, #32
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d10a      	bne.n	80035d8 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7ff ff89 	bl	80034da <HAL_RTC_WaitForSynchro>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d004      	beq.n	80035d8 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2204      	movs	r2, #4
 80035d2:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80035d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b085      	sub	sp, #20
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	4603      	mov	r3, r0
 80035ea:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80035ec:	2300      	movs	r3, #0
 80035ee:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80035f0:	e005      	b.n	80035fe <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80035f2:	7bfb      	ldrb	r3, [r7, #15]
 80035f4:	3301      	adds	r3, #1
 80035f6:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80035f8:	79fb      	ldrb	r3, [r7, #7]
 80035fa:	3b0a      	subs	r3, #10
 80035fc:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80035fe:	79fb      	ldrb	r3, [r7, #7]
 8003600:	2b09      	cmp	r3, #9
 8003602:	d8f6      	bhi.n	80035f2 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003604:	7bfb      	ldrb	r3, [r7, #15]
 8003606:	011b      	lsls	r3, r3, #4
 8003608:	b2da      	uxtb	r2, r3
 800360a:	79fb      	ldrb	r3, [r7, #7]
 800360c:	4313      	orrs	r3, r2
 800360e:	b2db      	uxtb	r3, r3
}
 8003610:	4618      	mov	r0, r3
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	4603      	mov	r3, r0
 8003624:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8003626:	2300      	movs	r3, #0
 8003628:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800362a:	79fb      	ldrb	r3, [r7, #7]
 800362c:	091b      	lsrs	r3, r3, #4
 800362e:	b2db      	uxtb	r3, r3
 8003630:	461a      	mov	r2, r3
 8003632:	0092      	lsls	r2, r2, #2
 8003634:	4413      	add	r3, r2
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800363a:	79fb      	ldrb	r3, [r7, #7]
 800363c:	f003 030f 	and.w	r3, r3, #15
 8003640:	b2da      	uxtb	r2, r3
 8003642:	7bfb      	ldrb	r3, [r7, #15]
 8003644:	4413      	add	r3, r2
 8003646:	b2db      	uxtb	r3, r3
}
 8003648:	4618      	mov	r0, r3
 800364a:	3714      	adds	r7, #20
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e041      	b.n	80036ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d106      	bne.n	8003680 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f839 	bl	80036f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2202      	movs	r2, #2
 8003684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3304      	adds	r3, #4
 8003690:	4619      	mov	r1, r3
 8003692:	4610      	mov	r0, r2
 8003694:	f000 f9d8 	bl	8003a48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80036fa:	bf00      	nop
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
	...

08003708 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b01      	cmp	r3, #1
 800371a:	d001      	beq.n	8003720 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e04e      	b.n	80037be <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2202      	movs	r2, #2
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68da      	ldr	r2, [r3, #12]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0201 	orr.w	r2, r2, #1
 8003736:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a23      	ldr	r2, [pc, #140]	; (80037cc <HAL_TIM_Base_Start_IT+0xc4>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d022      	beq.n	8003788 <HAL_TIM_Base_Start_IT+0x80>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800374a:	d01d      	beq.n	8003788 <HAL_TIM_Base_Start_IT+0x80>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a1f      	ldr	r2, [pc, #124]	; (80037d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d018      	beq.n	8003788 <HAL_TIM_Base_Start_IT+0x80>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a1e      	ldr	r2, [pc, #120]	; (80037d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d013      	beq.n	8003788 <HAL_TIM_Base_Start_IT+0x80>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a1c      	ldr	r2, [pc, #112]	; (80037d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d00e      	beq.n	8003788 <HAL_TIM_Base_Start_IT+0x80>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a1b      	ldr	r2, [pc, #108]	; (80037dc <HAL_TIM_Base_Start_IT+0xd4>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d009      	beq.n	8003788 <HAL_TIM_Base_Start_IT+0x80>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a19      	ldr	r2, [pc, #100]	; (80037e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d004      	beq.n	8003788 <HAL_TIM_Base_Start_IT+0x80>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a18      	ldr	r2, [pc, #96]	; (80037e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d111      	bne.n	80037ac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 0307 	and.w	r3, r3, #7
 8003792:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2b06      	cmp	r3, #6
 8003798:	d010      	beq.n	80037bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f042 0201 	orr.w	r2, r2, #1
 80037a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037aa:	e007      	b.n	80037bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0201 	orr.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	40010000 	.word	0x40010000
 80037d0:	40000400 	.word	0x40000400
 80037d4:	40000800 	.word	0x40000800
 80037d8:	40000c00 	.word	0x40000c00
 80037dc:	40010400 	.word	0x40010400
 80037e0:	40014000 	.word	0x40014000
 80037e4:	40001800 	.word	0x40001800

080037e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d122      	bne.n	8003844 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b02      	cmp	r3, #2
 800380a:	d11b      	bne.n	8003844 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f06f 0202 	mvn.w	r2, #2
 8003814:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	f003 0303 	and.w	r3, r3, #3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d003      	beq.n	8003832 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f8ee 	bl	8003a0c <HAL_TIM_IC_CaptureCallback>
 8003830:	e005      	b.n	800383e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f8e0 	bl	80039f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 f8f1 	bl	8003a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	f003 0304 	and.w	r3, r3, #4
 800384e:	2b04      	cmp	r3, #4
 8003850:	d122      	bne.n	8003898 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f003 0304 	and.w	r3, r3, #4
 800385c:	2b04      	cmp	r3, #4
 800385e:	d11b      	bne.n	8003898 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f06f 0204 	mvn.w	r2, #4
 8003868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2202      	movs	r2, #2
 800386e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f8c4 	bl	8003a0c <HAL_TIM_IC_CaptureCallback>
 8003884:	e005      	b.n	8003892 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f8b6 	bl	80039f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 f8c7 	bl	8003a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	f003 0308 	and.w	r3, r3, #8
 80038a2:	2b08      	cmp	r3, #8
 80038a4:	d122      	bne.n	80038ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	f003 0308 	and.w	r3, r3, #8
 80038b0:	2b08      	cmp	r3, #8
 80038b2:	d11b      	bne.n	80038ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f06f 0208 	mvn.w	r2, #8
 80038bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2204      	movs	r2, #4
 80038c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	f003 0303 	and.w	r3, r3, #3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f89a 	bl	8003a0c <HAL_TIM_IC_CaptureCallback>
 80038d8:	e005      	b.n	80038e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f88c 	bl	80039f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 f89d 	bl	8003a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	f003 0310 	and.w	r3, r3, #16
 80038f6:	2b10      	cmp	r3, #16
 80038f8:	d122      	bne.n	8003940 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f003 0310 	and.w	r3, r3, #16
 8003904:	2b10      	cmp	r3, #16
 8003906:	d11b      	bne.n	8003940 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f06f 0210 	mvn.w	r2, #16
 8003910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2208      	movs	r2, #8
 8003916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f870 	bl	8003a0c <HAL_TIM_IC_CaptureCallback>
 800392c:	e005      	b.n	800393a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f862 	bl	80039f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 f873 	bl	8003a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b01      	cmp	r3, #1
 800394c:	d10e      	bne.n	800396c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	2b01      	cmp	r3, #1
 800395a:	d107      	bne.n	800396c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f06f 0201 	mvn.w	r2, #1
 8003964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7fd fb20 	bl	8000fac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003976:	2b80      	cmp	r3, #128	; 0x80
 8003978:	d10e      	bne.n	8003998 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003984:	2b80      	cmp	r3, #128	; 0x80
 8003986:	d107      	bne.n	8003998 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f902 	bl	8003b9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a2:	2b40      	cmp	r3, #64	; 0x40
 80039a4:	d10e      	bne.n	80039c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b0:	2b40      	cmp	r3, #64	; 0x40
 80039b2:	d107      	bne.n	80039c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f838 	bl	8003a34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	f003 0320 	and.w	r3, r3, #32
 80039ce:	2b20      	cmp	r3, #32
 80039d0:	d10e      	bne.n	80039f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	f003 0320 	and.w	r3, r3, #32
 80039dc:	2b20      	cmp	r3, #32
 80039de:	d107      	bne.n	80039f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f06f 0220 	mvn.w	r2, #32
 80039e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f8cc 	bl	8003b88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039f0:	bf00      	nop
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a40      	ldr	r2, [pc, #256]	; (8003b5c <TIM_Base_SetConfig+0x114>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d013      	beq.n	8003a88 <TIM_Base_SetConfig+0x40>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a66:	d00f      	beq.n	8003a88 <TIM_Base_SetConfig+0x40>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a3d      	ldr	r2, [pc, #244]	; (8003b60 <TIM_Base_SetConfig+0x118>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d00b      	beq.n	8003a88 <TIM_Base_SetConfig+0x40>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a3c      	ldr	r2, [pc, #240]	; (8003b64 <TIM_Base_SetConfig+0x11c>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d007      	beq.n	8003a88 <TIM_Base_SetConfig+0x40>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a3b      	ldr	r2, [pc, #236]	; (8003b68 <TIM_Base_SetConfig+0x120>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d003      	beq.n	8003a88 <TIM_Base_SetConfig+0x40>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a3a      	ldr	r2, [pc, #232]	; (8003b6c <TIM_Base_SetConfig+0x124>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d108      	bne.n	8003a9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a2f      	ldr	r2, [pc, #188]	; (8003b5c <TIM_Base_SetConfig+0x114>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d02b      	beq.n	8003afa <TIM_Base_SetConfig+0xb2>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa8:	d027      	beq.n	8003afa <TIM_Base_SetConfig+0xb2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a2c      	ldr	r2, [pc, #176]	; (8003b60 <TIM_Base_SetConfig+0x118>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d023      	beq.n	8003afa <TIM_Base_SetConfig+0xb2>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a2b      	ldr	r2, [pc, #172]	; (8003b64 <TIM_Base_SetConfig+0x11c>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d01f      	beq.n	8003afa <TIM_Base_SetConfig+0xb2>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a2a      	ldr	r2, [pc, #168]	; (8003b68 <TIM_Base_SetConfig+0x120>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d01b      	beq.n	8003afa <TIM_Base_SetConfig+0xb2>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a29      	ldr	r2, [pc, #164]	; (8003b6c <TIM_Base_SetConfig+0x124>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d017      	beq.n	8003afa <TIM_Base_SetConfig+0xb2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a28      	ldr	r2, [pc, #160]	; (8003b70 <TIM_Base_SetConfig+0x128>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d013      	beq.n	8003afa <TIM_Base_SetConfig+0xb2>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a27      	ldr	r2, [pc, #156]	; (8003b74 <TIM_Base_SetConfig+0x12c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d00f      	beq.n	8003afa <TIM_Base_SetConfig+0xb2>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a26      	ldr	r2, [pc, #152]	; (8003b78 <TIM_Base_SetConfig+0x130>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d00b      	beq.n	8003afa <TIM_Base_SetConfig+0xb2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a25      	ldr	r2, [pc, #148]	; (8003b7c <TIM_Base_SetConfig+0x134>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d007      	beq.n	8003afa <TIM_Base_SetConfig+0xb2>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a24      	ldr	r2, [pc, #144]	; (8003b80 <TIM_Base_SetConfig+0x138>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d003      	beq.n	8003afa <TIM_Base_SetConfig+0xb2>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a23      	ldr	r2, [pc, #140]	; (8003b84 <TIM_Base_SetConfig+0x13c>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d108      	bne.n	8003b0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a0a      	ldr	r2, [pc, #40]	; (8003b5c <TIM_Base_SetConfig+0x114>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d003      	beq.n	8003b40 <TIM_Base_SetConfig+0xf8>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a0c      	ldr	r2, [pc, #48]	; (8003b6c <TIM_Base_SetConfig+0x124>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d103      	bne.n	8003b48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	691a      	ldr	r2, [r3, #16]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	615a      	str	r2, [r3, #20]
}
 8003b4e:	bf00      	nop
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	40010000 	.word	0x40010000
 8003b60:	40000400 	.word	0x40000400
 8003b64:	40000800 	.word	0x40000800
 8003b68:	40000c00 	.word	0x40000c00
 8003b6c:	40010400 	.word	0x40010400
 8003b70:	40014000 	.word	0x40014000
 8003b74:	40014400 	.word	0x40014400
 8003b78:	40014800 	.word	0x40014800
 8003b7c:	40001800 	.word	0x40001800
 8003b80:	40001c00 	.word	0x40001c00
 8003b84:	40002000 	.word	0x40002000

08003b88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e03f      	b.n	8003c42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d106      	bne.n	8003bdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f7fd fb60 	bl	800129c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2224      	movs	r2, #36	; 0x24
 8003be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68da      	ldr	r2, [r3, #12]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bf2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 fddf 	bl	80047b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	691a      	ldr	r2, [r3, #16]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	695a      	ldr	r2, [r3, #20]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68da      	ldr	r2, [r3, #12]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2220      	movs	r2, #32
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b08a      	sub	sp, #40	; 0x28
 8003c4e:	af02      	add	r7, sp, #8
 8003c50:	60f8      	str	r0, [r7, #12]
 8003c52:	60b9      	str	r1, [r7, #8]
 8003c54:	603b      	str	r3, [r7, #0]
 8003c56:	4613      	mov	r3, r2
 8003c58:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b20      	cmp	r3, #32
 8003c68:	d17c      	bne.n	8003d64 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d002      	beq.n	8003c76 <HAL_UART_Transmit+0x2c>
 8003c70:	88fb      	ldrh	r3, [r7, #6]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e075      	b.n	8003d66 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d101      	bne.n	8003c88 <HAL_UART_Transmit+0x3e>
 8003c84:	2302      	movs	r3, #2
 8003c86:	e06e      	b.n	8003d66 <HAL_UART_Transmit+0x11c>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2221      	movs	r2, #33	; 0x21
 8003c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c9e:	f7fe f8f9 	bl	8001e94 <HAL_GetTick>
 8003ca2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	88fa      	ldrh	r2, [r7, #6]
 8003ca8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	88fa      	ldrh	r2, [r7, #6]
 8003cae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb8:	d108      	bne.n	8003ccc <HAL_UART_Transmit+0x82>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d104      	bne.n	8003ccc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	61bb      	str	r3, [r7, #24]
 8003cca:	e003      	b.n	8003cd4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003cdc:	e02a      	b.n	8003d34 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	2180      	movs	r1, #128	; 0x80
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f000 fb1f 	bl	800432c <UART_WaitOnFlagUntilTimeout>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e036      	b.n	8003d66 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10b      	bne.n	8003d16 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	881b      	ldrh	r3, [r3, #0]
 8003d02:	461a      	mov	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	3302      	adds	r3, #2
 8003d12:	61bb      	str	r3, [r7, #24]
 8003d14:	e007      	b.n	8003d26 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	781a      	ldrb	r2, [r3, #0]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	3301      	adds	r3, #1
 8003d24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1cf      	bne.n	8003cde <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2200      	movs	r2, #0
 8003d46:	2140      	movs	r1, #64	; 0x40
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f000 faef 	bl	800432c <UART_WaitOnFlagUntilTimeout>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e006      	b.n	8003d66 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d60:	2300      	movs	r3, #0
 8003d62:	e000      	b.n	8003d66 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d64:	2302      	movs	r3, #2
  }
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3720      	adds	r7, #32
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b084      	sub	sp, #16
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	60f8      	str	r0, [r7, #12]
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b20      	cmp	r3, #32
 8003d86:	d11d      	bne.n	8003dc4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d002      	beq.n	8003d94 <HAL_UART_Receive_IT+0x26>
 8003d8e:	88fb      	ldrh	r3, [r7, #6]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e016      	b.n	8003dc6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d101      	bne.n	8003da6 <HAL_UART_Receive_IT+0x38>
 8003da2:	2302      	movs	r3, #2
 8003da4:	e00f      	b.n	8003dc6 <HAL_UART_Receive_IT+0x58>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003db4:	88fb      	ldrh	r3, [r7, #6]
 8003db6:	461a      	mov	r2, r3
 8003db8:	68b9      	ldr	r1, [r7, #8]
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f000 fb24 	bl	8004408 <UART_Start_Receive_IT>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	e000      	b.n	8003dc6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003dc4:	2302      	movs	r3, #2
  }
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
	...

08003dd0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b0ba      	sub	sp, #232	; 0xe8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e06:	f003 030f 	and.w	r3, r3, #15
 8003e0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003e0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10f      	bne.n	8003e36 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e1a:	f003 0320 	and.w	r3, r3, #32
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d009      	beq.n	8003e36 <HAL_UART_IRQHandler+0x66>
 8003e22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e26:	f003 0320 	and.w	r3, r3, #32
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 fc07 	bl	8004642 <UART_Receive_IT>
      return;
 8003e34:	e256      	b.n	80042e4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003e36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f000 80de 	beq.w	8003ffc <HAL_UART_IRQHandler+0x22c>
 8003e40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d106      	bne.n	8003e5a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e50:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 80d1 	beq.w	8003ffc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00b      	beq.n	8003e7e <HAL_UART_IRQHandler+0xae>
 8003e66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d005      	beq.n	8003e7e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	f043 0201 	orr.w	r2, r3, #1
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e82:	f003 0304 	and.w	r3, r3, #4
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00b      	beq.n	8003ea2 <HAL_UART_IRQHandler+0xd2>
 8003e8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d005      	beq.n	8003ea2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	f043 0202 	orr.w	r2, r3, #2
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00b      	beq.n	8003ec6 <HAL_UART_IRQHandler+0xf6>
 8003eae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d005      	beq.n	8003ec6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	f043 0204 	orr.w	r2, r3, #4
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eca:	f003 0308 	and.w	r3, r3, #8
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d011      	beq.n	8003ef6 <HAL_UART_IRQHandler+0x126>
 8003ed2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ed6:	f003 0320 	and.w	r3, r3, #32
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d105      	bne.n	8003eea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d005      	beq.n	8003ef6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	f043 0208 	orr.w	r2, r3, #8
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f000 81ed 	beq.w	80042da <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f04:	f003 0320 	and.w	r3, r3, #32
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d008      	beq.n	8003f1e <HAL_UART_IRQHandler+0x14e>
 8003f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f10:	f003 0320 	and.w	r3, r3, #32
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d002      	beq.n	8003f1e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 fb92 	bl	8004642 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f28:	2b40      	cmp	r3, #64	; 0x40
 8003f2a:	bf0c      	ite	eq
 8003f2c:	2301      	moveq	r3, #1
 8003f2e:	2300      	movne	r3, #0
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	f003 0308 	and.w	r3, r3, #8
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d103      	bne.n	8003f4a <HAL_UART_IRQHandler+0x17a>
 8003f42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d04f      	beq.n	8003fea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 fa9a 	bl	8004484 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5a:	2b40      	cmp	r3, #64	; 0x40
 8003f5c:	d141      	bne.n	8003fe2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	3314      	adds	r3, #20
 8003f64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f6c:	e853 3f00 	ldrex	r3, [r3]
 8003f70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003f74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	3314      	adds	r3, #20
 8003f86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f8a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003f8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f9a:	e841 2300 	strex	r3, r2, [r1]
 8003f9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003fa2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1d9      	bne.n	8003f5e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d013      	beq.n	8003fda <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb6:	4a7d      	ldr	r2, [pc, #500]	; (80041ac <HAL_UART_IRQHandler+0x3dc>)
 8003fb8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fe f8c6 	bl	8002150 <HAL_DMA_Abort_IT>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d016      	beq.n	8003ff8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fd4:	4610      	mov	r0, r2
 8003fd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fd8:	e00e      	b.n	8003ff8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f990 	bl	8004300 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fe0:	e00a      	b.n	8003ff8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f98c 	bl	8004300 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fe8:	e006      	b.n	8003ff8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f988 	bl	8004300 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003ff6:	e170      	b.n	80042da <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ff8:	bf00      	nop
    return;
 8003ffa:	e16e      	b.n	80042da <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004000:	2b01      	cmp	r3, #1
 8004002:	f040 814a 	bne.w	800429a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800400a:	f003 0310 	and.w	r3, r3, #16
 800400e:	2b00      	cmp	r3, #0
 8004010:	f000 8143 	beq.w	800429a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004018:	f003 0310 	and.w	r3, r3, #16
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 813c 	beq.w	800429a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004022:	2300      	movs	r3, #0
 8004024:	60bb      	str	r3, [r7, #8]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	60bb      	str	r3, [r7, #8]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	60bb      	str	r3, [r7, #8]
 8004036:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004042:	2b40      	cmp	r3, #64	; 0x40
 8004044:	f040 80b4 	bne.w	80041b0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004054:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 8140 	beq.w	80042de <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004062:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004066:	429a      	cmp	r2, r3
 8004068:	f080 8139 	bcs.w	80042de <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004072:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004078:	69db      	ldr	r3, [r3, #28]
 800407a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800407e:	f000 8088 	beq.w	8004192 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	330c      	adds	r3, #12
 8004088:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004090:	e853 3f00 	ldrex	r3, [r3]
 8004094:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004098:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800409c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	330c      	adds	r3, #12
 80040aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80040ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80040b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80040ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80040be:	e841 2300 	strex	r3, r2, [r1]
 80040c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80040c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1d9      	bne.n	8004082 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	3314      	adds	r3, #20
 80040d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040d8:	e853 3f00 	ldrex	r3, [r3]
 80040dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80040de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040e0:	f023 0301 	bic.w	r3, r3, #1
 80040e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	3314      	adds	r3, #20
 80040ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80040f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80040f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80040fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80040fe:	e841 2300 	strex	r3, r2, [r1]
 8004102:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004104:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1e1      	bne.n	80040ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	3314      	adds	r3, #20
 8004110:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004112:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004114:	e853 3f00 	ldrex	r3, [r3]
 8004118:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800411a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800411c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004120:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	3314      	adds	r3, #20
 800412a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800412e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004130:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004132:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004134:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004136:	e841 2300 	strex	r3, r2, [r1]
 800413a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800413c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1e3      	bne.n	800410a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2220      	movs	r2, #32
 8004146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	330c      	adds	r3, #12
 8004156:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800415a:	e853 3f00 	ldrex	r3, [r3]
 800415e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004160:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004162:	f023 0310 	bic.w	r3, r3, #16
 8004166:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	330c      	adds	r3, #12
 8004170:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004174:	65ba      	str	r2, [r7, #88]	; 0x58
 8004176:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004178:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800417a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800417c:	e841 2300 	strex	r3, r2, [r1]
 8004180:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1e3      	bne.n	8004150 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418c:	4618      	mov	r0, r3
 800418e:	f7fd ff6f 	bl	8002070 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800419a:	b29b      	uxth	r3, r3
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	b29b      	uxth	r3, r3
 80041a0:	4619      	mov	r1, r3
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 f8b6 	bl	8004314 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80041a8:	e099      	b.n	80042de <HAL_UART_IRQHandler+0x50e>
 80041aa:	bf00      	nop
 80041ac:	0800454b 	.word	0x0800454b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f000 808b 	beq.w	80042e2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80041cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 8086 	beq.w	80042e2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	330c      	adds	r3, #12
 80041dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e0:	e853 3f00 	ldrex	r3, [r3]
 80041e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80041e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	330c      	adds	r3, #12
 80041f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80041fa:	647a      	str	r2, [r7, #68]	; 0x44
 80041fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004200:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004202:	e841 2300 	strex	r3, r2, [r1]
 8004206:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1e3      	bne.n	80041d6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	3314      	adds	r3, #20
 8004214:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	e853 3f00 	ldrex	r3, [r3]
 800421c:	623b      	str	r3, [r7, #32]
   return(result);
 800421e:	6a3b      	ldr	r3, [r7, #32]
 8004220:	f023 0301 	bic.w	r3, r3, #1
 8004224:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	3314      	adds	r3, #20
 800422e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004232:	633a      	str	r2, [r7, #48]	; 0x30
 8004234:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004236:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800423a:	e841 2300 	strex	r3, r2, [r1]
 800423e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1e3      	bne.n	800420e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2220      	movs	r2, #32
 800424a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	330c      	adds	r3, #12
 800425a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	e853 3f00 	ldrex	r3, [r3]
 8004262:	60fb      	str	r3, [r7, #12]
   return(result);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f023 0310 	bic.w	r3, r3, #16
 800426a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	330c      	adds	r3, #12
 8004274:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004278:	61fa      	str	r2, [r7, #28]
 800427a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427c:	69b9      	ldr	r1, [r7, #24]
 800427e:	69fa      	ldr	r2, [r7, #28]
 8004280:	e841 2300 	strex	r3, r2, [r1]
 8004284:	617b      	str	r3, [r7, #20]
   return(result);
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1e3      	bne.n	8004254 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800428c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004290:	4619      	mov	r1, r3
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f83e 	bl	8004314 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004298:	e023      	b.n	80042e2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800429a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800429e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d009      	beq.n	80042ba <HAL_UART_IRQHandler+0x4ea>
 80042a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 f95d 	bl	8004572 <UART_Transmit_IT>
    return;
 80042b8:	e014      	b.n	80042e4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80042ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00e      	beq.n	80042e4 <HAL_UART_IRQHandler+0x514>
 80042c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d008      	beq.n	80042e4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f99d 	bl	8004612 <UART_EndTransmit_IT>
    return;
 80042d8:	e004      	b.n	80042e4 <HAL_UART_IRQHandler+0x514>
    return;
 80042da:	bf00      	nop
 80042dc:	e002      	b.n	80042e4 <HAL_UART_IRQHandler+0x514>
      return;
 80042de:	bf00      	nop
 80042e0:	e000      	b.n	80042e4 <HAL_UART_IRQHandler+0x514>
      return;
 80042e2:	bf00      	nop
  }
}
 80042e4:	37e8      	adds	r7, #232	; 0xe8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop

080042ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	460b      	mov	r3, r1
 800431e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b090      	sub	sp, #64	; 0x40
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	603b      	str	r3, [r7, #0]
 8004338:	4613      	mov	r3, r2
 800433a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800433c:	e050      	b.n	80043e0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800433e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004344:	d04c      	beq.n	80043e0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004346:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004348:	2b00      	cmp	r3, #0
 800434a:	d007      	beq.n	800435c <UART_WaitOnFlagUntilTimeout+0x30>
 800434c:	f7fd fda2 	bl	8001e94 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004358:	429a      	cmp	r2, r3
 800435a:	d241      	bcs.n	80043e0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	330c      	adds	r3, #12
 8004362:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004366:	e853 3f00 	ldrex	r3, [r3]
 800436a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004372:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	330c      	adds	r3, #12
 800437a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800437c:	637a      	str	r2, [r7, #52]	; 0x34
 800437e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004380:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004382:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004384:	e841 2300 	strex	r3, r2, [r1]
 8004388:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800438a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1e5      	bne.n	800435c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	3314      	adds	r3, #20
 8004396:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	e853 3f00 	ldrex	r3, [r3]
 800439e:	613b      	str	r3, [r7, #16]
   return(result);
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	f023 0301 	bic.w	r3, r3, #1
 80043a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	3314      	adds	r3, #20
 80043ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043b0:	623a      	str	r2, [r7, #32]
 80043b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b4:	69f9      	ldr	r1, [r7, #28]
 80043b6:	6a3a      	ldr	r2, [r7, #32]
 80043b8:	e841 2300 	strex	r3, r2, [r1]
 80043bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1e5      	bne.n	8004390 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2220      	movs	r2, #32
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2220      	movs	r2, #32
 80043d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e00f      	b.n	8004400 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	4013      	ands	r3, r2
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	bf0c      	ite	eq
 80043f0:	2301      	moveq	r3, #1
 80043f2:	2300      	movne	r3, #0
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	461a      	mov	r2, r3
 80043f8:	79fb      	ldrb	r3, [r7, #7]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d09f      	beq.n	800433e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3740      	adds	r7, #64	; 0x40
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	4613      	mov	r3, r2
 8004414:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	68ba      	ldr	r2, [r7, #8]
 800441a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	88fa      	ldrh	r2, [r7, #6]
 8004420:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	88fa      	ldrh	r2, [r7, #6]
 8004426:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2222      	movs	r2, #34	; 0x22
 8004432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d007      	beq.n	8004456 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68da      	ldr	r2, [r3, #12]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004454:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	695a      	ldr	r2, [r3, #20]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f042 0201 	orr.w	r2, r2, #1
 8004464:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68da      	ldr	r2, [r3, #12]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f042 0220 	orr.w	r2, r2, #32
 8004474:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3714      	adds	r7, #20
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004484:	b480      	push	{r7}
 8004486:	b095      	sub	sp, #84	; 0x54
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	330c      	adds	r3, #12
 8004492:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004496:	e853 3f00 	ldrex	r3, [r3]
 800449a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800449c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	330c      	adds	r3, #12
 80044aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044ac:	643a      	str	r2, [r7, #64]	; 0x40
 80044ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044b4:	e841 2300 	strex	r3, r2, [r1]
 80044b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1e5      	bne.n	800448c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	3314      	adds	r3, #20
 80044c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	e853 3f00 	ldrex	r3, [r3]
 80044ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	f023 0301 	bic.w	r3, r3, #1
 80044d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	3314      	adds	r3, #20
 80044de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044e8:	e841 2300 	strex	r3, r2, [r1]
 80044ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1e5      	bne.n	80044c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d119      	bne.n	8004530 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	330c      	adds	r3, #12
 8004502:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	e853 3f00 	ldrex	r3, [r3]
 800450a:	60bb      	str	r3, [r7, #8]
   return(result);
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	f023 0310 	bic.w	r3, r3, #16
 8004512:	647b      	str	r3, [r7, #68]	; 0x44
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	330c      	adds	r3, #12
 800451a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800451c:	61ba      	str	r2, [r7, #24]
 800451e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004520:	6979      	ldr	r1, [r7, #20]
 8004522:	69ba      	ldr	r2, [r7, #24]
 8004524:	e841 2300 	strex	r3, r2, [r1]
 8004528:	613b      	str	r3, [r7, #16]
   return(result);
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1e5      	bne.n	80044fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2220      	movs	r2, #32
 8004534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800453e:	bf00      	nop
 8004540:	3754      	adds	r7, #84	; 0x54
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr

0800454a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b084      	sub	sp, #16
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004556:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f7ff fecb 	bl	8004300 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800456a:	bf00      	nop
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004572:	b480      	push	{r7}
 8004574:	b085      	sub	sp, #20
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b21      	cmp	r3, #33	; 0x21
 8004584:	d13e      	bne.n	8004604 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800458e:	d114      	bne.n	80045ba <UART_Transmit_IT+0x48>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d110      	bne.n	80045ba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	881b      	ldrh	r3, [r3, #0]
 80045a2:	461a      	mov	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045ac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	1c9a      	adds	r2, r3, #2
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	621a      	str	r2, [r3, #32]
 80045b8:	e008      	b.n	80045cc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	1c59      	adds	r1, r3, #1
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	6211      	str	r1, [r2, #32]
 80045c4:	781a      	ldrb	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	3b01      	subs	r3, #1
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	4619      	mov	r1, r3
 80045da:	84d1      	strh	r1, [r2, #38]	; 0x26
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10f      	bne.n	8004600 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68da      	ldr	r2, [r3, #12]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045ee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68da      	ldr	r2, [r3, #12]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045fe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004600:	2300      	movs	r3, #0
 8004602:	e000      	b.n	8004606 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004604:	2302      	movs	r3, #2
  }
}
 8004606:	4618      	mov	r0, r3
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b082      	sub	sp, #8
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68da      	ldr	r2, [r3, #12]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004628:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2220      	movs	r2, #32
 800462e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f7ff fe5a 	bl	80042ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b08c      	sub	sp, #48	; 0x30
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b22      	cmp	r3, #34	; 0x22
 8004654:	f040 80ab 	bne.w	80047ae <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004660:	d117      	bne.n	8004692 <UART_Receive_IT+0x50>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d113      	bne.n	8004692 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800466a:	2300      	movs	r3, #0
 800466c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004672:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	b29b      	uxth	r3, r3
 800467c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004680:	b29a      	uxth	r2, r3
 8004682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004684:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468a:	1c9a      	adds	r2, r3, #2
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	629a      	str	r2, [r3, #40]	; 0x28
 8004690:	e026      	b.n	80046e0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004696:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004698:	2300      	movs	r3, #0
 800469a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a4:	d007      	beq.n	80046b6 <UART_Receive_IT+0x74>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10a      	bne.n	80046c4 <UART_Receive_IT+0x82>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d106      	bne.n	80046c4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	b2da      	uxtb	r2, r3
 80046be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c0:	701a      	strb	r2, [r3, #0]
 80046c2:	e008      	b.n	80046d6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046d0:	b2da      	uxtb	r2, r3
 80046d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046da:	1c5a      	adds	r2, r3, #1
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	3b01      	subs	r3, #1
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	4619      	mov	r1, r3
 80046ee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d15a      	bne.n	80047aa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68da      	ldr	r2, [r3, #12]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 0220 	bic.w	r2, r2, #32
 8004702:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004712:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	695a      	ldr	r2, [r3, #20]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 0201 	bic.w	r2, r2, #1
 8004722:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2220      	movs	r2, #32
 8004728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004730:	2b01      	cmp	r3, #1
 8004732:	d135      	bne.n	80047a0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	330c      	adds	r3, #12
 8004740:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	e853 3f00 	ldrex	r3, [r3]
 8004748:	613b      	str	r3, [r7, #16]
   return(result);
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	f023 0310 	bic.w	r3, r3, #16
 8004750:	627b      	str	r3, [r7, #36]	; 0x24
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	330c      	adds	r3, #12
 8004758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800475a:	623a      	str	r2, [r7, #32]
 800475c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475e:	69f9      	ldr	r1, [r7, #28]
 8004760:	6a3a      	ldr	r2, [r7, #32]
 8004762:	e841 2300 	strex	r3, r2, [r1]
 8004766:	61bb      	str	r3, [r7, #24]
   return(result);
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1e5      	bne.n	800473a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0310 	and.w	r3, r3, #16
 8004778:	2b10      	cmp	r3, #16
 800477a:	d10a      	bne.n	8004792 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800477c:	2300      	movs	r3, #0
 800477e:	60fb      	str	r3, [r7, #12]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	60fb      	str	r3, [r7, #12]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	60fb      	str	r3, [r7, #12]
 8004790:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004796:	4619      	mov	r1, r3
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7ff fdbb 	bl	8004314 <HAL_UARTEx_RxEventCallback>
 800479e:	e002      	b.n	80047a6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f7fc fbaf 	bl	8000f04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	e002      	b.n	80047b0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80047aa:	2300      	movs	r3, #0
 80047ac:	e000      	b.n	80047b0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80047ae:	2302      	movs	r3, #2
  }
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3730      	adds	r7, #48	; 0x30
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047bc:	b0c0      	sub	sp, #256	; 0x100
 80047be:	af00      	add	r7, sp, #0
 80047c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80047d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d4:	68d9      	ldr	r1, [r3, #12]
 80047d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	ea40 0301 	orr.w	r3, r0, r1
 80047e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e6:	689a      	ldr	r2, [r3, #8]
 80047e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	431a      	orrs	r2, r3
 80047f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	431a      	orrs	r2, r3
 80047f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047fc:	69db      	ldr	r3, [r3, #28]
 80047fe:	4313      	orrs	r3, r2
 8004800:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004810:	f021 010c 	bic.w	r1, r1, #12
 8004814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800481e:	430b      	orrs	r3, r1
 8004820:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800482e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004832:	6999      	ldr	r1, [r3, #24]
 8004834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	ea40 0301 	orr.w	r3, r0, r1
 800483e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	4b8f      	ldr	r3, [pc, #572]	; (8004a84 <UART_SetConfig+0x2cc>)
 8004848:	429a      	cmp	r2, r3
 800484a:	d005      	beq.n	8004858 <UART_SetConfig+0xa0>
 800484c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	4b8d      	ldr	r3, [pc, #564]	; (8004a88 <UART_SetConfig+0x2d0>)
 8004854:	429a      	cmp	r2, r3
 8004856:	d104      	bne.n	8004862 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004858:	f7fe fad6 	bl	8002e08 <HAL_RCC_GetPCLK2Freq>
 800485c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004860:	e003      	b.n	800486a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004862:	f7fe fabd 	bl	8002de0 <HAL_RCC_GetPCLK1Freq>
 8004866:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800486a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800486e:	69db      	ldr	r3, [r3, #28]
 8004870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004874:	f040 810c 	bne.w	8004a90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004878:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800487c:	2200      	movs	r2, #0
 800487e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004882:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004886:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800488a:	4622      	mov	r2, r4
 800488c:	462b      	mov	r3, r5
 800488e:	1891      	adds	r1, r2, r2
 8004890:	65b9      	str	r1, [r7, #88]	; 0x58
 8004892:	415b      	adcs	r3, r3
 8004894:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004896:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800489a:	4621      	mov	r1, r4
 800489c:	eb12 0801 	adds.w	r8, r2, r1
 80048a0:	4629      	mov	r1, r5
 80048a2:	eb43 0901 	adc.w	r9, r3, r1
 80048a6:	f04f 0200 	mov.w	r2, #0
 80048aa:	f04f 0300 	mov.w	r3, #0
 80048ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048ba:	4690      	mov	r8, r2
 80048bc:	4699      	mov	r9, r3
 80048be:	4623      	mov	r3, r4
 80048c0:	eb18 0303 	adds.w	r3, r8, r3
 80048c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80048c8:	462b      	mov	r3, r5
 80048ca:	eb49 0303 	adc.w	r3, r9, r3
 80048ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80048d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80048de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80048e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80048e6:	460b      	mov	r3, r1
 80048e8:	18db      	adds	r3, r3, r3
 80048ea:	653b      	str	r3, [r7, #80]	; 0x50
 80048ec:	4613      	mov	r3, r2
 80048ee:	eb42 0303 	adc.w	r3, r2, r3
 80048f2:	657b      	str	r3, [r7, #84]	; 0x54
 80048f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80048f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80048fc:	f7fb fcd0 	bl	80002a0 <__aeabi_uldivmod>
 8004900:	4602      	mov	r2, r0
 8004902:	460b      	mov	r3, r1
 8004904:	4b61      	ldr	r3, [pc, #388]	; (8004a8c <UART_SetConfig+0x2d4>)
 8004906:	fba3 2302 	umull	r2, r3, r3, r2
 800490a:	095b      	lsrs	r3, r3, #5
 800490c:	011c      	lsls	r4, r3, #4
 800490e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004912:	2200      	movs	r2, #0
 8004914:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004918:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800491c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004920:	4642      	mov	r2, r8
 8004922:	464b      	mov	r3, r9
 8004924:	1891      	adds	r1, r2, r2
 8004926:	64b9      	str	r1, [r7, #72]	; 0x48
 8004928:	415b      	adcs	r3, r3
 800492a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800492c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004930:	4641      	mov	r1, r8
 8004932:	eb12 0a01 	adds.w	sl, r2, r1
 8004936:	4649      	mov	r1, r9
 8004938:	eb43 0b01 	adc.w	fp, r3, r1
 800493c:	f04f 0200 	mov.w	r2, #0
 8004940:	f04f 0300 	mov.w	r3, #0
 8004944:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004948:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800494c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004950:	4692      	mov	sl, r2
 8004952:	469b      	mov	fp, r3
 8004954:	4643      	mov	r3, r8
 8004956:	eb1a 0303 	adds.w	r3, sl, r3
 800495a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800495e:	464b      	mov	r3, r9
 8004960:	eb4b 0303 	adc.w	r3, fp, r3
 8004964:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004974:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004978:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800497c:	460b      	mov	r3, r1
 800497e:	18db      	adds	r3, r3, r3
 8004980:	643b      	str	r3, [r7, #64]	; 0x40
 8004982:	4613      	mov	r3, r2
 8004984:	eb42 0303 	adc.w	r3, r2, r3
 8004988:	647b      	str	r3, [r7, #68]	; 0x44
 800498a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800498e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004992:	f7fb fc85 	bl	80002a0 <__aeabi_uldivmod>
 8004996:	4602      	mov	r2, r0
 8004998:	460b      	mov	r3, r1
 800499a:	4611      	mov	r1, r2
 800499c:	4b3b      	ldr	r3, [pc, #236]	; (8004a8c <UART_SetConfig+0x2d4>)
 800499e:	fba3 2301 	umull	r2, r3, r3, r1
 80049a2:	095b      	lsrs	r3, r3, #5
 80049a4:	2264      	movs	r2, #100	; 0x64
 80049a6:	fb02 f303 	mul.w	r3, r2, r3
 80049aa:	1acb      	subs	r3, r1, r3
 80049ac:	00db      	lsls	r3, r3, #3
 80049ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80049b2:	4b36      	ldr	r3, [pc, #216]	; (8004a8c <UART_SetConfig+0x2d4>)
 80049b4:	fba3 2302 	umull	r2, r3, r3, r2
 80049b8:	095b      	lsrs	r3, r3, #5
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049c0:	441c      	add	r4, r3
 80049c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049c6:	2200      	movs	r2, #0
 80049c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80049d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80049d4:	4642      	mov	r2, r8
 80049d6:	464b      	mov	r3, r9
 80049d8:	1891      	adds	r1, r2, r2
 80049da:	63b9      	str	r1, [r7, #56]	; 0x38
 80049dc:	415b      	adcs	r3, r3
 80049de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80049e4:	4641      	mov	r1, r8
 80049e6:	1851      	adds	r1, r2, r1
 80049e8:	6339      	str	r1, [r7, #48]	; 0x30
 80049ea:	4649      	mov	r1, r9
 80049ec:	414b      	adcs	r3, r1
 80049ee:	637b      	str	r3, [r7, #52]	; 0x34
 80049f0:	f04f 0200 	mov.w	r2, #0
 80049f4:	f04f 0300 	mov.w	r3, #0
 80049f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80049fc:	4659      	mov	r1, fp
 80049fe:	00cb      	lsls	r3, r1, #3
 8004a00:	4651      	mov	r1, sl
 8004a02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a06:	4651      	mov	r1, sl
 8004a08:	00ca      	lsls	r2, r1, #3
 8004a0a:	4610      	mov	r0, r2
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	4603      	mov	r3, r0
 8004a10:	4642      	mov	r2, r8
 8004a12:	189b      	adds	r3, r3, r2
 8004a14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a18:	464b      	mov	r3, r9
 8004a1a:	460a      	mov	r2, r1
 8004a1c:	eb42 0303 	adc.w	r3, r2, r3
 8004a20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a30:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004a34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a38:	460b      	mov	r3, r1
 8004a3a:	18db      	adds	r3, r3, r3
 8004a3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a3e:	4613      	mov	r3, r2
 8004a40:	eb42 0303 	adc.w	r3, r2, r3
 8004a44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004a4e:	f7fb fc27 	bl	80002a0 <__aeabi_uldivmod>
 8004a52:	4602      	mov	r2, r0
 8004a54:	460b      	mov	r3, r1
 8004a56:	4b0d      	ldr	r3, [pc, #52]	; (8004a8c <UART_SetConfig+0x2d4>)
 8004a58:	fba3 1302 	umull	r1, r3, r3, r2
 8004a5c:	095b      	lsrs	r3, r3, #5
 8004a5e:	2164      	movs	r1, #100	; 0x64
 8004a60:	fb01 f303 	mul.w	r3, r1, r3
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	3332      	adds	r3, #50	; 0x32
 8004a6a:	4a08      	ldr	r2, [pc, #32]	; (8004a8c <UART_SetConfig+0x2d4>)
 8004a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a70:	095b      	lsrs	r3, r3, #5
 8004a72:	f003 0207 	and.w	r2, r3, #7
 8004a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4422      	add	r2, r4
 8004a7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a80:	e105      	b.n	8004c8e <UART_SetConfig+0x4d6>
 8004a82:	bf00      	nop
 8004a84:	40011000 	.word	0x40011000
 8004a88:	40011400 	.word	0x40011400
 8004a8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a94:	2200      	movs	r2, #0
 8004a96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a9a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004aa2:	4642      	mov	r2, r8
 8004aa4:	464b      	mov	r3, r9
 8004aa6:	1891      	adds	r1, r2, r2
 8004aa8:	6239      	str	r1, [r7, #32]
 8004aaa:	415b      	adcs	r3, r3
 8004aac:	627b      	str	r3, [r7, #36]	; 0x24
 8004aae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ab2:	4641      	mov	r1, r8
 8004ab4:	1854      	adds	r4, r2, r1
 8004ab6:	4649      	mov	r1, r9
 8004ab8:	eb43 0501 	adc.w	r5, r3, r1
 8004abc:	f04f 0200 	mov.w	r2, #0
 8004ac0:	f04f 0300 	mov.w	r3, #0
 8004ac4:	00eb      	lsls	r3, r5, #3
 8004ac6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004aca:	00e2      	lsls	r2, r4, #3
 8004acc:	4614      	mov	r4, r2
 8004ace:	461d      	mov	r5, r3
 8004ad0:	4643      	mov	r3, r8
 8004ad2:	18e3      	adds	r3, r4, r3
 8004ad4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ad8:	464b      	mov	r3, r9
 8004ada:	eb45 0303 	adc.w	r3, r5, r3
 8004ade:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004aee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004af2:	f04f 0200 	mov.w	r2, #0
 8004af6:	f04f 0300 	mov.w	r3, #0
 8004afa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004afe:	4629      	mov	r1, r5
 8004b00:	008b      	lsls	r3, r1, #2
 8004b02:	4621      	mov	r1, r4
 8004b04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b08:	4621      	mov	r1, r4
 8004b0a:	008a      	lsls	r2, r1, #2
 8004b0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004b10:	f7fb fbc6 	bl	80002a0 <__aeabi_uldivmod>
 8004b14:	4602      	mov	r2, r0
 8004b16:	460b      	mov	r3, r1
 8004b18:	4b60      	ldr	r3, [pc, #384]	; (8004c9c <UART_SetConfig+0x4e4>)
 8004b1a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b1e:	095b      	lsrs	r3, r3, #5
 8004b20:	011c      	lsls	r4, r3, #4
 8004b22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b26:	2200      	movs	r2, #0
 8004b28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004b30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004b34:	4642      	mov	r2, r8
 8004b36:	464b      	mov	r3, r9
 8004b38:	1891      	adds	r1, r2, r2
 8004b3a:	61b9      	str	r1, [r7, #24]
 8004b3c:	415b      	adcs	r3, r3
 8004b3e:	61fb      	str	r3, [r7, #28]
 8004b40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b44:	4641      	mov	r1, r8
 8004b46:	1851      	adds	r1, r2, r1
 8004b48:	6139      	str	r1, [r7, #16]
 8004b4a:	4649      	mov	r1, r9
 8004b4c:	414b      	adcs	r3, r1
 8004b4e:	617b      	str	r3, [r7, #20]
 8004b50:	f04f 0200 	mov.w	r2, #0
 8004b54:	f04f 0300 	mov.w	r3, #0
 8004b58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b5c:	4659      	mov	r1, fp
 8004b5e:	00cb      	lsls	r3, r1, #3
 8004b60:	4651      	mov	r1, sl
 8004b62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b66:	4651      	mov	r1, sl
 8004b68:	00ca      	lsls	r2, r1, #3
 8004b6a:	4610      	mov	r0, r2
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	4603      	mov	r3, r0
 8004b70:	4642      	mov	r2, r8
 8004b72:	189b      	adds	r3, r3, r2
 8004b74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b78:	464b      	mov	r3, r9
 8004b7a:	460a      	mov	r2, r1
 8004b7c:	eb42 0303 	adc.w	r3, r2, r3
 8004b80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b8e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b90:	f04f 0200 	mov.w	r2, #0
 8004b94:	f04f 0300 	mov.w	r3, #0
 8004b98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004b9c:	4649      	mov	r1, r9
 8004b9e:	008b      	lsls	r3, r1, #2
 8004ba0:	4641      	mov	r1, r8
 8004ba2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ba6:	4641      	mov	r1, r8
 8004ba8:	008a      	lsls	r2, r1, #2
 8004baa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004bae:	f7fb fb77 	bl	80002a0 <__aeabi_uldivmod>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	4b39      	ldr	r3, [pc, #228]	; (8004c9c <UART_SetConfig+0x4e4>)
 8004bb8:	fba3 1302 	umull	r1, r3, r3, r2
 8004bbc:	095b      	lsrs	r3, r3, #5
 8004bbe:	2164      	movs	r1, #100	; 0x64
 8004bc0:	fb01 f303 	mul.w	r3, r1, r3
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	011b      	lsls	r3, r3, #4
 8004bc8:	3332      	adds	r3, #50	; 0x32
 8004bca:	4a34      	ldr	r2, [pc, #208]	; (8004c9c <UART_SetConfig+0x4e4>)
 8004bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd0:	095b      	lsrs	r3, r3, #5
 8004bd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bd6:	441c      	add	r4, r3
 8004bd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bdc:	2200      	movs	r2, #0
 8004bde:	673b      	str	r3, [r7, #112]	; 0x70
 8004be0:	677a      	str	r2, [r7, #116]	; 0x74
 8004be2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004be6:	4642      	mov	r2, r8
 8004be8:	464b      	mov	r3, r9
 8004bea:	1891      	adds	r1, r2, r2
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	415b      	adcs	r3, r3
 8004bf0:	60fb      	str	r3, [r7, #12]
 8004bf2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bf6:	4641      	mov	r1, r8
 8004bf8:	1851      	adds	r1, r2, r1
 8004bfa:	6039      	str	r1, [r7, #0]
 8004bfc:	4649      	mov	r1, r9
 8004bfe:	414b      	adcs	r3, r1
 8004c00:	607b      	str	r3, [r7, #4]
 8004c02:	f04f 0200 	mov.w	r2, #0
 8004c06:	f04f 0300 	mov.w	r3, #0
 8004c0a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c0e:	4659      	mov	r1, fp
 8004c10:	00cb      	lsls	r3, r1, #3
 8004c12:	4651      	mov	r1, sl
 8004c14:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c18:	4651      	mov	r1, sl
 8004c1a:	00ca      	lsls	r2, r1, #3
 8004c1c:	4610      	mov	r0, r2
 8004c1e:	4619      	mov	r1, r3
 8004c20:	4603      	mov	r3, r0
 8004c22:	4642      	mov	r2, r8
 8004c24:	189b      	adds	r3, r3, r2
 8004c26:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c28:	464b      	mov	r3, r9
 8004c2a:	460a      	mov	r2, r1
 8004c2c:	eb42 0303 	adc.w	r3, r2, r3
 8004c30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	663b      	str	r3, [r7, #96]	; 0x60
 8004c3c:	667a      	str	r2, [r7, #100]	; 0x64
 8004c3e:	f04f 0200 	mov.w	r2, #0
 8004c42:	f04f 0300 	mov.w	r3, #0
 8004c46:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004c4a:	4649      	mov	r1, r9
 8004c4c:	008b      	lsls	r3, r1, #2
 8004c4e:	4641      	mov	r1, r8
 8004c50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c54:	4641      	mov	r1, r8
 8004c56:	008a      	lsls	r2, r1, #2
 8004c58:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004c5c:	f7fb fb20 	bl	80002a0 <__aeabi_uldivmod>
 8004c60:	4602      	mov	r2, r0
 8004c62:	460b      	mov	r3, r1
 8004c64:	4b0d      	ldr	r3, [pc, #52]	; (8004c9c <UART_SetConfig+0x4e4>)
 8004c66:	fba3 1302 	umull	r1, r3, r3, r2
 8004c6a:	095b      	lsrs	r3, r3, #5
 8004c6c:	2164      	movs	r1, #100	; 0x64
 8004c6e:	fb01 f303 	mul.w	r3, r1, r3
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	011b      	lsls	r3, r3, #4
 8004c76:	3332      	adds	r3, #50	; 0x32
 8004c78:	4a08      	ldr	r2, [pc, #32]	; (8004c9c <UART_SetConfig+0x4e4>)
 8004c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7e:	095b      	lsrs	r3, r3, #5
 8004c80:	f003 020f 	and.w	r2, r3, #15
 8004c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4422      	add	r2, r4
 8004c8c:	609a      	str	r2, [r3, #8]
}
 8004c8e:	bf00      	nop
 8004c90:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c94:	46bd      	mov	sp, r7
 8004c96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c9a:	bf00      	nop
 8004c9c:	51eb851f 	.word	0x51eb851f

08004ca0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f103 0208 	add.w	r2, r3, #8
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8004cb8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f103 0208 	add.w	r2, r3, #8
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f103 0208 	add.w	r2, r3, #8
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004cee:	bf00      	nop
 8004cf0:	370c      	adds	r7, #12
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr

08004cfa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8004cfa:	b480      	push	{r7}
 8004cfc:	b085      	sub	sp, #20
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
 8004d02:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	689a      	ldr	r2, [r3, #8]
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	683a      	ldr	r2, [r7, #0]
 8004d1e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	683a      	ldr	r2, [r7, #0]
 8004d24:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	1c5a      	adds	r2, r3, #1
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	601a      	str	r2, [r3, #0]
}
 8004d36:	bf00      	nop
 8004d38:	3714      	adds	r7, #20
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8004d42:	b480      	push	{r7}
 8004d44:	b085      	sub	sp, #20
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
 8004d4a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d58:	d103      	bne.n	8004d62 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	60fb      	str	r3, [r7, #12]
 8004d60:	e00c      	b.n	8004d7c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	3308      	adds	r3, #8
 8004d66:	60fb      	str	r3, [r7, #12]
 8004d68:	e002      	b.n	8004d70 <vListInsert+0x2e>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	60fb      	str	r3, [r7, #12]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d2f6      	bcs.n	8004d6a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	683a      	ldr	r2, [r7, #0]
 8004d96:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	1c5a      	adds	r2, r3, #1
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	601a      	str	r2, [r3, #0]
}
 8004da8:	bf00      	nop
 8004daa:	3714      	adds	r7, #20
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	6892      	ldr	r2, [r2, #8]
 8004dca:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	6852      	ldr	r2, [r2, #4]
 8004dd4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d103      	bne.n	8004de8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689a      	ldr	r2, [r3, #8]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	1e5a      	subs	r2, r3, #1
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3714      	adds	r7, #20
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10a      	bne.n	8004e32 <xQueueGenericReset+0x2a>
        __asm volatile
 8004e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e20:	f383 8811 	msr	BASEPRI, r3
 8004e24:	f3bf 8f6f 	isb	sy
 8004e28:	f3bf 8f4f 	dsb	sy
 8004e2c:	60bb      	str	r3, [r7, #8]
    }
 8004e2e:	bf00      	nop
 8004e30:	e7fe      	b.n	8004e30 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8004e32:	f002 fb39 	bl	80074a8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e3e:	68f9      	ldr	r1, [r7, #12]
 8004e40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e42:	fb01 f303 	mul.w	r3, r1, r3
 8004e46:	441a      	add	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e62:	3b01      	subs	r3, #1
 8004e64:	68f9      	ldr	r1, [r7, #12]
 8004e66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e68:	fb01 f303 	mul.w	r3, r1, r3
 8004e6c:	441a      	add	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	22ff      	movs	r2, #255	; 0xff
 8004e76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	22ff      	movs	r2, #255	; 0xff
 8004e7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d114      	bne.n	8004eb2 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d01a      	beq.n	8004ec6 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	3310      	adds	r3, #16
 8004e94:	4618      	mov	r0, r3
 8004e96:	f001 f921 	bl	80060dc <xTaskRemoveFromEventList>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d012      	beq.n	8004ec6 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8004ea0:	4b0c      	ldr	r3, [pc, #48]	; (8004ed4 <xQueueGenericReset+0xcc>)
 8004ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ea6:	601a      	str	r2, [r3, #0]
 8004ea8:	f3bf 8f4f 	dsb	sy
 8004eac:	f3bf 8f6f 	isb	sy
 8004eb0:	e009      	b.n	8004ec6 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	3310      	adds	r3, #16
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7ff fef2 	bl	8004ca0 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	3324      	adds	r3, #36	; 0x24
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7ff feed 	bl	8004ca0 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8004ec6:	f002 fb1f 	bl	8007508 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8004eca:	2301      	movs	r3, #1
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	e000ed04 	.word	0xe000ed04

08004ed8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b08c      	sub	sp, #48	; 0x30
 8004edc:	af02      	add	r7, sp, #8
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10a      	bne.n	8004f02 <xQueueGenericCreate+0x2a>
        __asm volatile
 8004eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef0:	f383 8811 	msr	BASEPRI, r3
 8004ef4:	f3bf 8f6f 	isb	sy
 8004ef8:	f3bf 8f4f 	dsb	sy
 8004efc:	61bb      	str	r3, [r7, #24]
    }
 8004efe:	bf00      	nop
 8004f00:	e7fe      	b.n	8004f00 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	fb02 f303 	mul.w	r3, r2, r3
 8004f0a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d006      	beq.n	8004f20 <xQueueGenericCreate+0x48>
 8004f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d101      	bne.n	8004f24 <xQueueGenericCreate+0x4c>
 8004f20:	2301      	movs	r3, #1
 8004f22:	e000      	b.n	8004f26 <xQueueGenericCreate+0x4e>
 8004f24:	2300      	movs	r3, #0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10a      	bne.n	8004f40 <xQueueGenericCreate+0x68>
        __asm volatile
 8004f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2e:	f383 8811 	msr	BASEPRI, r3
 8004f32:	f3bf 8f6f 	isb	sy
 8004f36:	f3bf 8f4f 	dsb	sy
 8004f3a:	617b      	str	r3, [r7, #20]
    }
 8004f3c:	bf00      	nop
 8004f3e:	e7fe      	b.n	8004f3e <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8004f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f42:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8004f46:	d90a      	bls.n	8004f5e <xQueueGenericCreate+0x86>
        __asm volatile
 8004f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4c:	f383 8811 	msr	BASEPRI, r3
 8004f50:	f3bf 8f6f 	isb	sy
 8004f54:	f3bf 8f4f 	dsb	sy
 8004f58:	613b      	str	r3, [r7, #16]
    }
 8004f5a:	bf00      	nop
 8004f5c:	e7fe      	b.n	8004f5c <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f60:	3350      	adds	r3, #80	; 0x50
 8004f62:	4618      	mov	r0, r3
 8004f64:	f002 fbc2 	bl	80076ec <pvPortMalloc>
 8004f68:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8004f6a:	6a3b      	ldr	r3, [r7, #32]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00d      	beq.n	8004f8c <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004f70:	6a3b      	ldr	r3, [r7, #32]
 8004f72:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	3350      	adds	r3, #80	; 0x50
 8004f78:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f7a:	79fa      	ldrb	r2, [r7, #7]
 8004f7c:	6a3b      	ldr	r3, [r7, #32]
 8004f7e:	9300      	str	r3, [sp, #0]
 8004f80:	4613      	mov	r3, r2
 8004f82:	69fa      	ldr	r2, [r7, #28]
 8004f84:	68b9      	ldr	r1, [r7, #8]
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f000 f805 	bl	8004f96 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8004f8c:	6a3b      	ldr	r3, [r7, #32]
    }
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3728      	adds	r7, #40	; 0x28
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b084      	sub	sp, #16
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	60f8      	str	r0, [r7, #12]
 8004f9e:	60b9      	str	r1, [r7, #8]
 8004fa0:	607a      	str	r2, [r7, #4]
 8004fa2:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d103      	bne.n	8004fb2 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	601a      	str	r2, [r3, #0]
 8004fb0:	e002      	b.n	8004fb8 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	68ba      	ldr	r2, [r7, #8]
 8004fc2:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004fc4:	2101      	movs	r1, #1
 8004fc6:	69b8      	ldr	r0, [r7, #24]
 8004fc8:	f7ff ff1e 	bl	8004e08 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	78fa      	ldrb	r2, [r7, #3]
 8004fd0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8004fd4:	bf00      	nop
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b08e      	sub	sp, #56	; 0x38
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
 8004fe8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004fea:	2300      	movs	r3, #0
 8004fec:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8004ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d10a      	bne.n	800500e <xQueueGenericSend+0x32>
        __asm volatile
 8004ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffc:	f383 8811 	msr	BASEPRI, r3
 8005000:	f3bf 8f6f 	isb	sy
 8005004:	f3bf 8f4f 	dsb	sy
 8005008:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800500a:	bf00      	nop
 800500c:	e7fe      	b.n	800500c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d103      	bne.n	800501c <xQueueGenericSend+0x40>
 8005014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005018:	2b00      	cmp	r3, #0
 800501a:	d101      	bne.n	8005020 <xQueueGenericSend+0x44>
 800501c:	2301      	movs	r3, #1
 800501e:	e000      	b.n	8005022 <xQueueGenericSend+0x46>
 8005020:	2300      	movs	r3, #0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10a      	bne.n	800503c <xQueueGenericSend+0x60>
        __asm volatile
 8005026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502a:	f383 8811 	msr	BASEPRI, r3
 800502e:	f3bf 8f6f 	isb	sy
 8005032:	f3bf 8f4f 	dsb	sy
 8005036:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005038:	bf00      	nop
 800503a:	e7fe      	b.n	800503a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	2b02      	cmp	r3, #2
 8005040:	d103      	bne.n	800504a <xQueueGenericSend+0x6e>
 8005042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005046:	2b01      	cmp	r3, #1
 8005048:	d101      	bne.n	800504e <xQueueGenericSend+0x72>
 800504a:	2301      	movs	r3, #1
 800504c:	e000      	b.n	8005050 <xQueueGenericSend+0x74>
 800504e:	2300      	movs	r3, #0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d10a      	bne.n	800506a <xQueueGenericSend+0x8e>
        __asm volatile
 8005054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005058:	f383 8811 	msr	BASEPRI, r3
 800505c:	f3bf 8f6f 	isb	sy
 8005060:	f3bf 8f4f 	dsb	sy
 8005064:	623b      	str	r3, [r7, #32]
    }
 8005066:	bf00      	nop
 8005068:	e7fe      	b.n	8005068 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800506a:	f001 f9d3 	bl	8006414 <xTaskGetSchedulerState>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d102      	bne.n	800507a <xQueueGenericSend+0x9e>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <xQueueGenericSend+0xa2>
 800507a:	2301      	movs	r3, #1
 800507c:	e000      	b.n	8005080 <xQueueGenericSend+0xa4>
 800507e:	2300      	movs	r3, #0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d10a      	bne.n	800509a <xQueueGenericSend+0xbe>
        __asm volatile
 8005084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005088:	f383 8811 	msr	BASEPRI, r3
 800508c:	f3bf 8f6f 	isb	sy
 8005090:	f3bf 8f4f 	dsb	sy
 8005094:	61fb      	str	r3, [r7, #28]
    }
 8005096:	bf00      	nop
 8005098:	e7fe      	b.n	8005098 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800509a:	f002 fa05 	bl	80074a8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800509e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d302      	bcc.n	80050b0 <xQueueGenericSend+0xd4>
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d129      	bne.n	8005104 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80050b0:	683a      	ldr	r2, [r7, #0]
 80050b2:	68b9      	ldr	r1, [r7, #8]
 80050b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050b6:	f000 fac6 	bl	8005646 <prvCopyDataToQueue>
 80050ba:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d010      	beq.n	80050e6 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c6:	3324      	adds	r3, #36	; 0x24
 80050c8:	4618      	mov	r0, r3
 80050ca:	f001 f807 	bl	80060dc <xTaskRemoveFromEventList>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d013      	beq.n	80050fc <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80050d4:	4b3f      	ldr	r3, [pc, #252]	; (80051d4 <xQueueGenericSend+0x1f8>)
 80050d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050da:	601a      	str	r2, [r3, #0]
 80050dc:	f3bf 8f4f 	dsb	sy
 80050e0:	f3bf 8f6f 	isb	sy
 80050e4:	e00a      	b.n	80050fc <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80050e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d007      	beq.n	80050fc <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80050ec:	4b39      	ldr	r3, [pc, #228]	; (80051d4 <xQueueGenericSend+0x1f8>)
 80050ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	f3bf 8f4f 	dsb	sy
 80050f8:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80050fc:	f002 fa04 	bl	8007508 <vPortExitCritical>
                return pdPASS;
 8005100:	2301      	movs	r3, #1
 8005102:	e063      	b.n	80051cc <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d103      	bne.n	8005112 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800510a:	f002 f9fd 	bl	8007508 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800510e:	2300      	movs	r3, #0
 8005110:	e05c      	b.n	80051cc <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005114:	2b00      	cmp	r3, #0
 8005116:	d106      	bne.n	8005126 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005118:	f107 0314 	add.w	r3, r7, #20
 800511c:	4618      	mov	r0, r3
 800511e:	f001 f83f 	bl	80061a0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005122:	2301      	movs	r3, #1
 8005124:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005126:	f002 f9ef 	bl	8007508 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800512a:	f000 fdb9 	bl	8005ca0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800512e:	f002 f9bb 	bl	80074a8 <vPortEnterCritical>
 8005132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005134:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005138:	b25b      	sxtb	r3, r3
 800513a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800513e:	d103      	bne.n	8005148 <xQueueGenericSend+0x16c>
 8005140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005142:	2200      	movs	r2, #0
 8005144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800514e:	b25b      	sxtb	r3, r3
 8005150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005154:	d103      	bne.n	800515e <xQueueGenericSend+0x182>
 8005156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800515e:	f002 f9d3 	bl	8007508 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005162:	1d3a      	adds	r2, r7, #4
 8005164:	f107 0314 	add.w	r3, r7, #20
 8005168:	4611      	mov	r1, r2
 800516a:	4618      	mov	r0, r3
 800516c:	f001 f82e 	bl	80061cc <xTaskCheckForTimeOut>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d124      	bne.n	80051c0 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005176:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005178:	f000 fb5d 	bl	8005836 <prvIsQueueFull>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d018      	beq.n	80051b4 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005184:	3310      	adds	r3, #16
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	4611      	mov	r1, r2
 800518a:	4618      	mov	r0, r3
 800518c:	f000 ff56 	bl	800603c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8005190:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005192:	f000 fae8 	bl	8005766 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8005196:	f000 fd91 	bl	8005cbc <xTaskResumeAll>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	f47f af7c 	bne.w	800509a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80051a2:	4b0c      	ldr	r3, [pc, #48]	; (80051d4 <xQueueGenericSend+0x1f8>)
 80051a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051a8:	601a      	str	r2, [r3, #0]
 80051aa:	f3bf 8f4f 	dsb	sy
 80051ae:	f3bf 8f6f 	isb	sy
 80051b2:	e772      	b.n	800509a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80051b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051b6:	f000 fad6 	bl	8005766 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80051ba:	f000 fd7f 	bl	8005cbc <xTaskResumeAll>
 80051be:	e76c      	b.n	800509a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80051c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051c2:	f000 fad0 	bl	8005766 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80051c6:	f000 fd79 	bl	8005cbc <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80051ca:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3738      	adds	r7, #56	; 0x38
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	e000ed04 	.word	0xe000ed04

080051d8 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b090      	sub	sp, #64	; 0x40
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]
 80051e4:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80051ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10a      	bne.n	8005206 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80051f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f4:	f383 8811 	msr	BASEPRI, r3
 80051f8:	f3bf 8f6f 	isb	sy
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005202:	bf00      	nop
 8005204:	e7fe      	b.n	8005204 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d103      	bne.n	8005214 <xQueueGenericSendFromISR+0x3c>
 800520c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800520e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005210:	2b00      	cmp	r3, #0
 8005212:	d101      	bne.n	8005218 <xQueueGenericSendFromISR+0x40>
 8005214:	2301      	movs	r3, #1
 8005216:	e000      	b.n	800521a <xQueueGenericSendFromISR+0x42>
 8005218:	2300      	movs	r3, #0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10a      	bne.n	8005234 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800521e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005222:	f383 8811 	msr	BASEPRI, r3
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005230:	bf00      	nop
 8005232:	e7fe      	b.n	8005232 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	2b02      	cmp	r3, #2
 8005238:	d103      	bne.n	8005242 <xQueueGenericSendFromISR+0x6a>
 800523a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800523e:	2b01      	cmp	r3, #1
 8005240:	d101      	bne.n	8005246 <xQueueGenericSendFromISR+0x6e>
 8005242:	2301      	movs	r3, #1
 8005244:	e000      	b.n	8005248 <xQueueGenericSendFromISR+0x70>
 8005246:	2300      	movs	r3, #0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d10a      	bne.n	8005262 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 800524c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005250:	f383 8811 	msr	BASEPRI, r3
 8005254:	f3bf 8f6f 	isb	sy
 8005258:	f3bf 8f4f 	dsb	sy
 800525c:	623b      	str	r3, [r7, #32]
    }
 800525e:	bf00      	nop
 8005260:	e7fe      	b.n	8005260 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005262:	f002 fa03 	bl	800766c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8005266:	f3ef 8211 	mrs	r2, BASEPRI
 800526a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526e:	f383 8811 	msr	BASEPRI, r3
 8005272:	f3bf 8f6f 	isb	sy
 8005276:	f3bf 8f4f 	dsb	sy
 800527a:	61fa      	str	r2, [r7, #28]
 800527c:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800527e:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005280:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005284:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800528a:	429a      	cmp	r2, r3
 800528c:	d302      	bcc.n	8005294 <xQueueGenericSendFromISR+0xbc>
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b02      	cmp	r3, #2
 8005292:	d13e      	bne.n	8005312 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8005294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005296:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800529a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800529e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a2:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	68b9      	ldr	r1, [r7, #8]
 80052a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80052aa:	f000 f9cc 	bl	8005646 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80052ae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80052b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b6:	d112      	bne.n	80052de <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d025      	beq.n	800530c <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c2:	3324      	adds	r3, #36	; 0x24
 80052c4:	4618      	mov	r0, r3
 80052c6:	f000 ff09 	bl	80060dc <xTaskRemoveFromEventList>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d01d      	beq.n	800530c <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d01a      	beq.n	800530c <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	601a      	str	r2, [r3, #0]
 80052dc:	e016      	b.n	800530c <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80052de:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80052e2:	2b7f      	cmp	r3, #127	; 0x7f
 80052e4:	d10a      	bne.n	80052fc <xQueueGenericSendFromISR+0x124>
        __asm volatile
 80052e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ea:	f383 8811 	msr	BASEPRI, r3
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	f3bf 8f4f 	dsb	sy
 80052f6:	617b      	str	r3, [r7, #20]
    }
 80052f8:	bf00      	nop
 80052fa:	e7fe      	b.n	80052fa <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80052fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005300:	3301      	adds	r3, #1
 8005302:	b2db      	uxtb	r3, r3
 8005304:	b25a      	sxtb	r2, r3
 8005306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 800530c:	2301      	movs	r3, #1
 800530e:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8005310:	e001      	b.n	8005316 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8005312:	2300      	movs	r3, #0
 8005314:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005318:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005320:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005324:	4618      	mov	r0, r3
 8005326:	3740      	adds	r7, #64	; 0x40
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b08c      	sub	sp, #48	; 0x30
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005338:	2300      	movs	r3, #0
 800533a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10a      	bne.n	800535c <xQueueReceive+0x30>
        __asm volatile
 8005346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534a:	f383 8811 	msr	BASEPRI, r3
 800534e:	f3bf 8f6f 	isb	sy
 8005352:	f3bf 8f4f 	dsb	sy
 8005356:	623b      	str	r3, [r7, #32]
    }
 8005358:	bf00      	nop
 800535a:	e7fe      	b.n	800535a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d103      	bne.n	800536a <xQueueReceive+0x3e>
 8005362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005366:	2b00      	cmp	r3, #0
 8005368:	d101      	bne.n	800536e <xQueueReceive+0x42>
 800536a:	2301      	movs	r3, #1
 800536c:	e000      	b.n	8005370 <xQueueReceive+0x44>
 800536e:	2300      	movs	r3, #0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10a      	bne.n	800538a <xQueueReceive+0x5e>
        __asm volatile
 8005374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005378:	f383 8811 	msr	BASEPRI, r3
 800537c:	f3bf 8f6f 	isb	sy
 8005380:	f3bf 8f4f 	dsb	sy
 8005384:	61fb      	str	r3, [r7, #28]
    }
 8005386:	bf00      	nop
 8005388:	e7fe      	b.n	8005388 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800538a:	f001 f843 	bl	8006414 <xTaskGetSchedulerState>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d102      	bne.n	800539a <xQueueReceive+0x6e>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d101      	bne.n	800539e <xQueueReceive+0x72>
 800539a:	2301      	movs	r3, #1
 800539c:	e000      	b.n	80053a0 <xQueueReceive+0x74>
 800539e:	2300      	movs	r3, #0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10a      	bne.n	80053ba <xQueueReceive+0x8e>
        __asm volatile
 80053a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a8:	f383 8811 	msr	BASEPRI, r3
 80053ac:	f3bf 8f6f 	isb	sy
 80053b0:	f3bf 8f4f 	dsb	sy
 80053b4:	61bb      	str	r3, [r7, #24]
    }
 80053b6:	bf00      	nop
 80053b8:	e7fe      	b.n	80053b8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80053ba:	f002 f875 	bl	80074a8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d01f      	beq.n	800540a <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80053ca:	68b9      	ldr	r1, [r7, #8]
 80053cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053ce:	f000 f9a4 	bl	800571a <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80053d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d4:	1e5a      	subs	r2, r3, #1
 80053d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00f      	beq.n	8005402 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e4:	3310      	adds	r3, #16
 80053e6:	4618      	mov	r0, r3
 80053e8:	f000 fe78 	bl	80060dc <xTaskRemoveFromEventList>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d007      	beq.n	8005402 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80053f2:	4b3d      	ldr	r3, [pc, #244]	; (80054e8 <xQueueReceive+0x1bc>)
 80053f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053f8:	601a      	str	r2, [r3, #0]
 80053fa:	f3bf 8f4f 	dsb	sy
 80053fe:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005402:	f002 f881 	bl	8007508 <vPortExitCritical>
                return pdPASS;
 8005406:	2301      	movs	r3, #1
 8005408:	e069      	b.n	80054de <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d103      	bne.n	8005418 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005410:	f002 f87a 	bl	8007508 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8005414:	2300      	movs	r3, #0
 8005416:	e062      	b.n	80054de <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800541a:	2b00      	cmp	r3, #0
 800541c:	d106      	bne.n	800542c <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800541e:	f107 0310 	add.w	r3, r7, #16
 8005422:	4618      	mov	r0, r3
 8005424:	f000 febc 	bl	80061a0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005428:	2301      	movs	r3, #1
 800542a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800542c:	f002 f86c 	bl	8007508 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005430:	f000 fc36 	bl	8005ca0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005434:	f002 f838 	bl	80074a8 <vPortEnterCritical>
 8005438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800543e:	b25b      	sxtb	r3, r3
 8005440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005444:	d103      	bne.n	800544e <xQueueReceive+0x122>
 8005446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005448:	2200      	movs	r2, #0
 800544a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800544e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005450:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005454:	b25b      	sxtb	r3, r3
 8005456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800545a:	d103      	bne.n	8005464 <xQueueReceive+0x138>
 800545c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545e:	2200      	movs	r2, #0
 8005460:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005464:	f002 f850 	bl	8007508 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005468:	1d3a      	adds	r2, r7, #4
 800546a:	f107 0310 	add.w	r3, r7, #16
 800546e:	4611      	mov	r1, r2
 8005470:	4618      	mov	r0, r3
 8005472:	f000 feab 	bl	80061cc <xTaskCheckForTimeOut>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d123      	bne.n	80054c4 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800547c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800547e:	f000 f9c4 	bl	800580a <prvIsQueueEmpty>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d017      	beq.n	80054b8 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548a:	3324      	adds	r3, #36	; 0x24
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	4611      	mov	r1, r2
 8005490:	4618      	mov	r0, r3
 8005492:	f000 fdd3 	bl	800603c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8005496:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005498:	f000 f965 	bl	8005766 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800549c:	f000 fc0e 	bl	8005cbc <xTaskResumeAll>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d189      	bne.n	80053ba <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80054a6:	4b10      	ldr	r3, [pc, #64]	; (80054e8 <xQueueReceive+0x1bc>)
 80054a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054ac:	601a      	str	r2, [r3, #0]
 80054ae:	f3bf 8f4f 	dsb	sy
 80054b2:	f3bf 8f6f 	isb	sy
 80054b6:	e780      	b.n	80053ba <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80054b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054ba:	f000 f954 	bl	8005766 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80054be:	f000 fbfd 	bl	8005cbc <xTaskResumeAll>
 80054c2:	e77a      	b.n	80053ba <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80054c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054c6:	f000 f94e 	bl	8005766 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80054ca:	f000 fbf7 	bl	8005cbc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054d0:	f000 f99b 	bl	800580a <prvIsQueueEmpty>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f43f af6f 	beq.w	80053ba <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80054dc:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3730      	adds	r7, #48	; 0x30
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	e000ed04 	.word	0xe000ed04

080054ec <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b090      	sub	sp, #64	; 0x40
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80054fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10a      	bne.n	8005518 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 8005502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005506:	f383 8811 	msr	BASEPRI, r3
 800550a:	f3bf 8f6f 	isb	sy
 800550e:	f3bf 8f4f 	dsb	sy
 8005512:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005514:	bf00      	nop
 8005516:	e7fe      	b.n	8005516 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d103      	bne.n	8005526 <xQueueReceiveFromISR+0x3a>
 800551e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005522:	2b00      	cmp	r3, #0
 8005524:	d101      	bne.n	800552a <xQueueReceiveFromISR+0x3e>
 8005526:	2301      	movs	r3, #1
 8005528:	e000      	b.n	800552c <xQueueReceiveFromISR+0x40>
 800552a:	2300      	movs	r3, #0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10a      	bne.n	8005546 <xQueueReceiveFromISR+0x5a>
        __asm volatile
 8005530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005534:	f383 8811 	msr	BASEPRI, r3
 8005538:	f3bf 8f6f 	isb	sy
 800553c:	f3bf 8f4f 	dsb	sy
 8005540:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005542:	bf00      	nop
 8005544:	e7fe      	b.n	8005544 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005546:	f002 f891 	bl	800766c <vPortValidateInterruptPriority>
        __asm volatile
 800554a:	f3ef 8211 	mrs	r2, BASEPRI
 800554e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	623a      	str	r2, [r7, #32]
 8005560:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8005562:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005564:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556a:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800556c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556e:	2b00      	cmp	r3, #0
 8005570:	d03e      	beq.n	80055f0 <xQueueReceiveFromISR+0x104>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8005572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005574:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005578:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 800557c:	68b9      	ldr	r1, [r7, #8]
 800557e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005580:	f000 f8cb 	bl	800571a <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005586:	1e5a      	subs	r2, r3, #1
 8005588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558a:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 800558c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005594:	d112      	bne.n	80055bc <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d025      	beq.n	80055ea <xQueueReceiveFromISR+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800559e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a0:	3310      	adds	r3, #16
 80055a2:	4618      	mov	r0, r3
 80055a4:	f000 fd9a 	bl	80060dc <xTaskRemoveFromEventList>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d01d      	beq.n	80055ea <xQueueReceiveFromISR+0xfe>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d01a      	beq.n	80055ea <xQueueReceiveFromISR+0xfe>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	601a      	str	r2, [r3, #0]
 80055ba:	e016      	b.n	80055ea <xQueueReceiveFromISR+0xfe>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 80055bc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80055c0:	2b7f      	cmp	r3, #127	; 0x7f
 80055c2:	d10a      	bne.n	80055da <xQueueReceiveFromISR+0xee>
        __asm volatile
 80055c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c8:	f383 8811 	msr	BASEPRI, r3
 80055cc:	f3bf 8f6f 	isb	sy
 80055d0:	f3bf 8f4f 	dsb	sy
 80055d4:	61bb      	str	r3, [r7, #24]
    }
 80055d6:	bf00      	nop
 80055d8:	e7fe      	b.n	80055d8 <xQueueReceiveFromISR+0xec>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80055da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80055de:	3301      	adds	r3, #1
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	b25a      	sxtb	r2, r3
 80055e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 80055ea:	2301      	movs	r3, #1
 80055ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055ee:	e001      	b.n	80055f4 <xQueueReceiveFromISR+0x108>
        }
        else
        {
            xReturn = pdFAIL;
 80055f0:	2300      	movs	r3, #0
 80055f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055f6:	617b      	str	r3, [r7, #20]
        __asm volatile
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	f383 8811 	msr	BASEPRI, r3
    }
 80055fe:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005602:	4618      	mov	r0, r3
 8005604:	3740      	adds	r7, #64	; 0x40
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800560a:	b580      	push	{r7, lr}
 800560c:	b084      	sub	sp, #16
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10a      	bne.n	800562e <uxQueueMessagesWaiting+0x24>
        __asm volatile
 8005618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561c:	f383 8811 	msr	BASEPRI, r3
 8005620:	f3bf 8f6f 	isb	sy
 8005624:	f3bf 8f4f 	dsb	sy
 8005628:	60bb      	str	r3, [r7, #8]
    }
 800562a:	bf00      	nop
 800562c:	e7fe      	b.n	800562c <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 800562e:	f001 ff3b 	bl	80074a8 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005636:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8005638:	f001 ff66 	bl	8007508 <vPortExitCritical>

    return uxReturn;
 800563c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800563e:	4618      	mov	r0, r3
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8005646:	b580      	push	{r7, lr}
 8005648:	b086      	sub	sp, #24
 800564a:	af00      	add	r7, sp, #0
 800564c:	60f8      	str	r0, [r7, #12]
 800564e:	60b9      	str	r1, [r7, #8]
 8005650:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8005652:	2300      	movs	r3, #0
 8005654:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565a:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005660:	2b00      	cmp	r3, #0
 8005662:	d10d      	bne.n	8005680 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d14d      	bne.n	8005708 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	4618      	mov	r0, r3
 8005672:	f000 feed 	bl	8006450 <xTaskPriorityDisinherit>
 8005676:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	609a      	str	r2, [r3, #8]
 800567e:	e043      	b.n	8005708 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d119      	bne.n	80056ba <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6858      	ldr	r0, [r3, #4]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568e:	461a      	mov	r2, r3
 8005690:	68b9      	ldr	r1, [r7, #8]
 8005692:	f002 fa53 	bl	8007b3c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	685a      	ldr	r2, [r3, #4]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569e:	441a      	add	r2, r3
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d32b      	bcc.n	8005708 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	605a      	str	r2, [r3, #4]
 80056b8:	e026      	b.n	8005708 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	68d8      	ldr	r0, [r3, #12]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c2:	461a      	mov	r2, r3
 80056c4:	68b9      	ldr	r1, [r7, #8]
 80056c6:	f002 fa39 	bl	8007b3c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	68da      	ldr	r2, [r3, #12]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d2:	425b      	negs	r3, r3
 80056d4:	441a      	add	r2, r3
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	68da      	ldr	r2, [r3, #12]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d207      	bcs.n	80056f6 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	689a      	ldr	r2, [r3, #8]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ee:	425b      	negs	r3, r3
 80056f0:	441a      	add	r2, r3
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d105      	bne.n	8005708 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d002      	beq.n	8005708 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	3b01      	subs	r3, #1
 8005706:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	1c5a      	adds	r2, r3, #1
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8005710:	697b      	ldr	r3, [r7, #20]
}
 8005712:	4618      	mov	r0, r3
 8005714:	3718      	adds	r7, #24
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b082      	sub	sp, #8
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
 8005722:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005728:	2b00      	cmp	r3, #0
 800572a:	d018      	beq.n	800575e <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	68da      	ldr	r2, [r3, #12]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005734:	441a      	add	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68da      	ldr	r2, [r3, #12]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	429a      	cmp	r2, r3
 8005744:	d303      	bcc.n	800574e <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68d9      	ldr	r1, [r3, #12]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005756:	461a      	mov	r2, r3
 8005758:	6838      	ldr	r0, [r7, #0]
 800575a:	f002 f9ef 	bl	8007b3c <memcpy>
    }
}
 800575e:	bf00      	nop
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b084      	sub	sp, #16
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800576e:	f001 fe9b 	bl	80074a8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005778:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800577a:	e011      	b.n	80057a0 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005780:	2b00      	cmp	r3, #0
 8005782:	d012      	beq.n	80057aa <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	3324      	adds	r3, #36	; 0x24
 8005788:	4618      	mov	r0, r3
 800578a:	f000 fca7 	bl	80060dc <xTaskRemoveFromEventList>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d001      	beq.n	8005798 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8005794:	f000 fd80 	bl	8006298 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8005798:	7bfb      	ldrb	r3, [r7, #15]
 800579a:	3b01      	subs	r3, #1
 800579c:	b2db      	uxtb	r3, r3
 800579e:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80057a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	dce9      	bgt.n	800577c <prvUnlockQueue+0x16>
 80057a8:	e000      	b.n	80057ac <prvUnlockQueue+0x46>
                        break;
 80057aa:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	22ff      	movs	r2, #255	; 0xff
 80057b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80057b4:	f001 fea8 	bl	8007508 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80057b8:	f001 fe76 	bl	80074a8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057c2:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80057c4:	e011      	b.n	80057ea <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d012      	beq.n	80057f4 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	3310      	adds	r3, #16
 80057d2:	4618      	mov	r0, r3
 80057d4:	f000 fc82 	bl	80060dc <xTaskRemoveFromEventList>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d001      	beq.n	80057e2 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80057de:	f000 fd5b 	bl	8006298 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80057e2:	7bbb      	ldrb	r3, [r7, #14]
 80057e4:	3b01      	subs	r3, #1
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80057ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	dce9      	bgt.n	80057c6 <prvUnlockQueue+0x60>
 80057f2:	e000      	b.n	80057f6 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80057f4:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	22ff      	movs	r2, #255	; 0xff
 80057fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80057fe:	f001 fe83 	bl	8007508 <vPortExitCritical>
}
 8005802:	bf00      	nop
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b084      	sub	sp, #16
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005812:	f001 fe49 	bl	80074a8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581a:	2b00      	cmp	r3, #0
 800581c:	d102      	bne.n	8005824 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800581e:	2301      	movs	r3, #1
 8005820:	60fb      	str	r3, [r7, #12]
 8005822:	e001      	b.n	8005828 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8005824:	2300      	movs	r3, #0
 8005826:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005828:	f001 fe6e 	bl	8007508 <vPortExitCritical>

    return xReturn;
 800582c:	68fb      	ldr	r3, [r7, #12]
}
 800582e:	4618      	mov	r0, r3
 8005830:	3710      	adds	r7, #16
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}

08005836 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8005836:	b580      	push	{r7, lr}
 8005838:	b084      	sub	sp, #16
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800583e:	f001 fe33 	bl	80074a8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800584a:	429a      	cmp	r2, r3
 800584c:	d102      	bne.n	8005854 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800584e:	2301      	movs	r3, #1
 8005850:	60fb      	str	r3, [r7, #12]
 8005852:	e001      	b.n	8005858 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8005854:	2300      	movs	r3, #0
 8005856:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005858:	f001 fe56 	bl	8007508 <vPortExitCritical>

    return xReturn;
 800585c:	68fb      	ldr	r3, [r7, #12]
}
 800585e:	4618      	mov	r0, r3
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8005866:	b480      	push	{r7}
 8005868:	b087      	sub	sp, #28
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10a      	bne.n	800588e <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 8005878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587c:	f383 8811 	msr	BASEPRI, r3
 8005880:	f3bf 8f6f 	isb	sy
 8005884:	f3bf 8f4f 	dsb	sy
 8005888:	60fb      	str	r3, [r7, #12]
    }
 800588a:	bf00      	nop
 800588c:	e7fe      	b.n	800588c <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005896:	429a      	cmp	r2, r3
 8005898:	d102      	bne.n	80058a0 <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 800589a:	2301      	movs	r3, #1
 800589c:	617b      	str	r3, [r7, #20]
 800589e:	e001      	b.n	80058a4 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 80058a0:	2300      	movs	r3, #0
 80058a2:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80058a4:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80058a6:	4618      	mov	r0, r3
 80058a8:	371c      	adds	r7, #28
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
	...

080058b4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80058be:	2300      	movs	r3, #0
 80058c0:	60fb      	str	r3, [r7, #12]
 80058c2:	e014      	b.n	80058ee <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80058c4:	4a0f      	ldr	r2, [pc, #60]	; (8005904 <vQueueAddToRegistry+0x50>)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10b      	bne.n	80058e8 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80058d0:	490c      	ldr	r1, [pc, #48]	; (8005904 <vQueueAddToRegistry+0x50>)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80058da:	4a0a      	ldr	r2, [pc, #40]	; (8005904 <vQueueAddToRegistry+0x50>)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	00db      	lsls	r3, r3, #3
 80058e0:	4413      	add	r3, r2
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80058e6:	e006      	b.n	80058f6 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	3301      	adds	r3, #1
 80058ec:	60fb      	str	r3, [r7, #12]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2b07      	cmp	r3, #7
 80058f2:	d9e7      	bls.n	80058c4 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80058f4:	bf00      	nop
 80058f6:	bf00      	nop
 80058f8:	3714      	adds	r7, #20
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	200001ec 	.word	0x200001ec

08005908 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8005908:	b580      	push	{r7, lr}
 800590a:	b086      	sub	sp, #24
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8005918:	f001 fdc6 	bl	80074a8 <vPortEnterCritical>
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005922:	b25b      	sxtb	r3, r3
 8005924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005928:	d103      	bne.n	8005932 <vQueueWaitForMessageRestricted+0x2a>
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005938:	b25b      	sxtb	r3, r3
 800593a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800593e:	d103      	bne.n	8005948 <vQueueWaitForMessageRestricted+0x40>
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005948:	f001 fdde 	bl	8007508 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005950:	2b00      	cmp	r3, #0
 8005952:	d106      	bne.n	8005962 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	3324      	adds	r3, #36	; 0x24
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	68b9      	ldr	r1, [r7, #8]
 800595c:	4618      	mov	r0, r3
 800595e:	f000 fb91 	bl	8006084 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8005962:	6978      	ldr	r0, [r7, #20]
 8005964:	f7ff feff 	bl	8005766 <prvUnlockQueue>
    }
 8005968:	bf00      	nop
 800596a:	3718      	adds	r7, #24
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8005970:	b580      	push	{r7, lr}
 8005972:	b08c      	sub	sp, #48	; 0x30
 8005974:	af04      	add	r7, sp, #16
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	603b      	str	r3, [r7, #0]
 800597c:	4613      	mov	r3, r2
 800597e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005980:	88fb      	ldrh	r3, [r7, #6]
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4618      	mov	r0, r3
 8005986:	f001 feb1 	bl	80076ec <pvPortMalloc>
 800598a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00e      	beq.n	80059b0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005992:	2058      	movs	r0, #88	; 0x58
 8005994:	f001 feaa 	bl	80076ec <pvPortMalloc>
 8005998:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d003      	beq.n	80059a8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	631a      	str	r2, [r3, #48]	; 0x30
 80059a6:	e005      	b.n	80059b4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80059a8:	6978      	ldr	r0, [r7, #20]
 80059aa:	f001 ff7f 	bl	80078ac <vPortFree>
 80059ae:	e001      	b.n	80059b4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80059b0:	2300      	movs	r3, #0
 80059b2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d013      	beq.n	80059e2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80059ba:	88fa      	ldrh	r2, [r7, #6]
 80059bc:	2300      	movs	r3, #0
 80059be:	9303      	str	r3, [sp, #12]
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	9302      	str	r3, [sp, #8]
 80059c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c6:	9301      	str	r3, [sp, #4]
 80059c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ca:	9300      	str	r3, [sp, #0]
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	68b9      	ldr	r1, [r7, #8]
 80059d0:	68f8      	ldr	r0, [r7, #12]
 80059d2:	f000 f80e 	bl	80059f2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80059d6:	69f8      	ldr	r0, [r7, #28]
 80059d8:	f000 f8a2 	bl	8005b20 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80059dc:	2301      	movs	r3, #1
 80059de:	61bb      	str	r3, [r7, #24]
 80059e0:	e002      	b.n	80059e8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80059e2:	f04f 33ff 	mov.w	r3, #4294967295
 80059e6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80059e8:	69bb      	ldr	r3, [r7, #24]
    }
 80059ea:	4618      	mov	r0, r3
 80059ec:	3720      	adds	r7, #32
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b088      	sub	sp, #32
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	60f8      	str	r0, [r7, #12]
 80059fa:	60b9      	str	r1, [r7, #8]
 80059fc:	607a      	str	r2, [r7, #4]
 80059fe:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a02:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	461a      	mov	r2, r3
 8005a0a:	21a5      	movs	r1, #165	; 0xa5
 8005a0c:	f002 f8a4 	bl	8007b58 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	4413      	add	r3, r2
 8005a20:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	f023 0307 	bic.w	r3, r3, #7
 8005a28:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	f003 0307 	and.w	r3, r3, #7
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00a      	beq.n	8005a4a <prvInitialiseNewTask+0x58>
        __asm volatile
 8005a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a38:	f383 8811 	msr	BASEPRI, r3
 8005a3c:	f3bf 8f6f 	isb	sy
 8005a40:	f3bf 8f4f 	dsb	sy
 8005a44:	617b      	str	r3, [r7, #20]
    }
 8005a46:	bf00      	nop
 8005a48:	e7fe      	b.n	8005a48 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d01f      	beq.n	8005a90 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a50:	2300      	movs	r3, #0
 8005a52:	61fb      	str	r3, [r7, #28]
 8005a54:	e012      	b.n	8005a7c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005a56:	68ba      	ldr	r2, [r7, #8]
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	7819      	ldrb	r1, [r3, #0]
 8005a5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	4413      	add	r3, r2
 8005a64:	3334      	adds	r3, #52	; 0x34
 8005a66:	460a      	mov	r2, r1
 8005a68:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8005a6a:	68ba      	ldr	r2, [r7, #8]
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	4413      	add	r3, r2
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d006      	beq.n	8005a84 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	61fb      	str	r3, [r7, #28]
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	2b09      	cmp	r3, #9
 8005a80:	d9e9      	bls.n	8005a56 <prvInitialiseNewTask+0x64>
 8005a82:	e000      	b.n	8005a86 <prvInitialiseNewTask+0x94>
            {
                break;
 8005a84:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005a8e:	e003      	b.n	8005a98 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9a:	2b04      	cmp	r3, #4
 8005a9c:	d901      	bls.n	8005aa2 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a9e:	2304      	movs	r3, #4
 8005aa0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8005aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005aa6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8005aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005aac:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8005aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab6:	3304      	adds	r3, #4
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f7ff f911 	bl	8004ce0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac0:	3318      	adds	r3, #24
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7ff f90c 	bl	8004ce0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005acc:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad0:	f1c3 0205 	rsb	r2, r3, #5
 8005ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ada:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005adc:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8005ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae0:	3350      	adds	r3, #80	; 0x50
 8005ae2:	2204      	movs	r2, #4
 8005ae4:	2100      	movs	r1, #0
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f002 f836 	bl	8007b58 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8005aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aee:	3354      	adds	r3, #84	; 0x54
 8005af0:	2201      	movs	r2, #1
 8005af2:	2100      	movs	r1, #0
 8005af4:	4618      	mov	r0, r3
 8005af6:	f002 f82f 	bl	8007b58 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005afa:	683a      	ldr	r2, [r7, #0]
 8005afc:	68f9      	ldr	r1, [r7, #12]
 8005afe:	69b8      	ldr	r0, [r7, #24]
 8005b00:	f001 fba0 	bl	8007244 <pxPortInitialiseStack>
 8005b04:	4602      	mov	r2, r0
 8005b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b08:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8005b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d002      	beq.n	8005b16 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b14:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005b16:	bf00      	nop
 8005b18:	3720      	adds	r7, #32
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
	...

08005b20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8005b28:	f001 fcbe 	bl	80074a8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8005b2c:	4b2c      	ldr	r3, [pc, #176]	; (8005be0 <prvAddNewTaskToReadyList+0xc0>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	3301      	adds	r3, #1
 8005b32:	4a2b      	ldr	r2, [pc, #172]	; (8005be0 <prvAddNewTaskToReadyList+0xc0>)
 8005b34:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8005b36:	4b2b      	ldr	r3, [pc, #172]	; (8005be4 <prvAddNewTaskToReadyList+0xc4>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d109      	bne.n	8005b52 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8005b3e:	4a29      	ldr	r2, [pc, #164]	; (8005be4 <prvAddNewTaskToReadyList+0xc4>)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005b44:	4b26      	ldr	r3, [pc, #152]	; (8005be0 <prvAddNewTaskToReadyList+0xc0>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d110      	bne.n	8005b6e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8005b4c:	f000 fbc8 	bl	80062e0 <prvInitialiseTaskLists>
 8005b50:	e00d      	b.n	8005b6e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8005b52:	4b25      	ldr	r3, [pc, #148]	; (8005be8 <prvAddNewTaskToReadyList+0xc8>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d109      	bne.n	8005b6e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b5a:	4b22      	ldr	r3, [pc, #136]	; (8005be4 <prvAddNewTaskToReadyList+0xc4>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d802      	bhi.n	8005b6e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8005b68:	4a1e      	ldr	r2, [pc, #120]	; (8005be4 <prvAddNewTaskToReadyList+0xc4>)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8005b6e:	4b1f      	ldr	r3, [pc, #124]	; (8005bec <prvAddNewTaskToReadyList+0xcc>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	3301      	adds	r3, #1
 8005b74:	4a1d      	ldr	r2, [pc, #116]	; (8005bec <prvAddNewTaskToReadyList+0xcc>)
 8005b76:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005b78:	4b1c      	ldr	r3, [pc, #112]	; (8005bec <prvAddNewTaskToReadyList+0xcc>)
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b84:	2201      	movs	r2, #1
 8005b86:	409a      	lsls	r2, r3
 8005b88:	4b19      	ldr	r3, [pc, #100]	; (8005bf0 <prvAddNewTaskToReadyList+0xd0>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	4a18      	ldr	r2, [pc, #96]	; (8005bf0 <prvAddNewTaskToReadyList+0xd0>)
 8005b90:	6013      	str	r3, [r2, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b96:	4613      	mov	r3, r2
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	4413      	add	r3, r2
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	4a15      	ldr	r2, [pc, #84]	; (8005bf4 <prvAddNewTaskToReadyList+0xd4>)
 8005ba0:	441a      	add	r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	3304      	adds	r3, #4
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	4610      	mov	r0, r2
 8005baa:	f7ff f8a6 	bl	8004cfa <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8005bae:	f001 fcab 	bl	8007508 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8005bb2:	4b0d      	ldr	r3, [pc, #52]	; (8005be8 <prvAddNewTaskToReadyList+0xc8>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00e      	beq.n	8005bd8 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005bba:	4b0a      	ldr	r3, [pc, #40]	; (8005be4 <prvAddNewTaskToReadyList+0xc4>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d207      	bcs.n	8005bd8 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8005bc8:	4b0b      	ldr	r3, [pc, #44]	; (8005bf8 <prvAddNewTaskToReadyList+0xd8>)
 8005bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bce:	601a      	str	r2, [r3, #0]
 8005bd0:	f3bf 8f4f 	dsb	sy
 8005bd4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005bd8:	bf00      	nop
 8005bda:	3708      	adds	r7, #8
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	20000304 	.word	0x20000304
 8005be4:	2000022c 	.word	0x2000022c
 8005be8:	20000310 	.word	0x20000310
 8005bec:	20000320 	.word	0x20000320
 8005bf0:	2000030c 	.word	0x2000030c
 8005bf4:	20000230 	.word	0x20000230
 8005bf8:	e000ed04 	.word	0xe000ed04

08005bfc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b086      	sub	sp, #24
 8005c00:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8005c02:	4b20      	ldr	r3, [pc, #128]	; (8005c84 <vTaskStartScheduler+0x88>)
 8005c04:	9301      	str	r3, [sp, #4]
 8005c06:	2300      	movs	r3, #0
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	2282      	movs	r2, #130	; 0x82
 8005c0e:	491e      	ldr	r1, [pc, #120]	; (8005c88 <vTaskStartScheduler+0x8c>)
 8005c10:	481e      	ldr	r0, [pc, #120]	; (8005c8c <vTaskStartScheduler+0x90>)
 8005c12:	f7ff fead 	bl	8005970 <xTaskCreate>
 8005c16:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d102      	bne.n	8005c24 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8005c1e:	f000 ff59 	bl	8006ad4 <xTimerCreateTimerTask>
 8005c22:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d116      	bne.n	8005c58 <vTaskStartScheduler+0x5c>
        __asm volatile
 8005c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2e:	f383 8811 	msr	BASEPRI, r3
 8005c32:	f3bf 8f6f 	isb	sy
 8005c36:	f3bf 8f4f 	dsb	sy
 8005c3a:	60bb      	str	r3, [r7, #8]
    }
 8005c3c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8005c3e:	4b14      	ldr	r3, [pc, #80]	; (8005c90 <vTaskStartScheduler+0x94>)
 8005c40:	f04f 32ff 	mov.w	r2, #4294967295
 8005c44:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005c46:	4b13      	ldr	r3, [pc, #76]	; (8005c94 <vTaskStartScheduler+0x98>)
 8005c48:	2201      	movs	r2, #1
 8005c4a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005c4c:	4b12      	ldr	r3, [pc, #72]	; (8005c98 <vTaskStartScheduler+0x9c>)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8005c52:	f001 fb87 	bl	8007364 <xPortStartScheduler>
 8005c56:	e00e      	b.n	8005c76 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c5e:	d10a      	bne.n	8005c76 <vTaskStartScheduler+0x7a>
        __asm volatile
 8005c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	607b      	str	r3, [r7, #4]
    }
 8005c72:	bf00      	nop
 8005c74:	e7fe      	b.n	8005c74 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005c76:	4b09      	ldr	r3, [pc, #36]	; (8005c9c <vTaskStartScheduler+0xa0>)
 8005c78:	681b      	ldr	r3, [r3, #0]
}
 8005c7a:	bf00      	nop
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	20000328 	.word	0x20000328
 8005c88:	08009204 	.word	0x08009204
 8005c8c:	080062b1 	.word	0x080062b1
 8005c90:	20000324 	.word	0x20000324
 8005c94:	20000310 	.word	0x20000310
 8005c98:	20000308 	.word	0x20000308
 8005c9c:	20000020 	.word	0x20000020

08005ca0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8005ca4:	4b04      	ldr	r3, [pc, #16]	; (8005cb8 <vTaskSuspendAll+0x18>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	4a03      	ldr	r2, [pc, #12]	; (8005cb8 <vTaskSuspendAll+0x18>)
 8005cac:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8005cae:	bf00      	nop
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr
 8005cb8:	2000032c 	.word	0x2000032c

08005cbc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8005cca:	4b41      	ldr	r3, [pc, #260]	; (8005dd0 <xTaskResumeAll+0x114>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10a      	bne.n	8005ce8 <xTaskResumeAll+0x2c>
        __asm volatile
 8005cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd6:	f383 8811 	msr	BASEPRI, r3
 8005cda:	f3bf 8f6f 	isb	sy
 8005cde:	f3bf 8f4f 	dsb	sy
 8005ce2:	603b      	str	r3, [r7, #0]
    }
 8005ce4:	bf00      	nop
 8005ce6:	e7fe      	b.n	8005ce6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8005ce8:	f001 fbde 	bl	80074a8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8005cec:	4b38      	ldr	r3, [pc, #224]	; (8005dd0 <xTaskResumeAll+0x114>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	4a37      	ldr	r2, [pc, #220]	; (8005dd0 <xTaskResumeAll+0x114>)
 8005cf4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cf6:	4b36      	ldr	r3, [pc, #216]	; (8005dd0 <xTaskResumeAll+0x114>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d161      	bne.n	8005dc2 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005cfe:	4b35      	ldr	r3, [pc, #212]	; (8005dd4 <xTaskResumeAll+0x118>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d05d      	beq.n	8005dc2 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d06:	e02e      	b.n	8005d66 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d08:	4b33      	ldr	r3, [pc, #204]	; (8005dd8 <xTaskResumeAll+0x11c>)
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	3318      	adds	r3, #24
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7ff f84d 	bl	8004db4 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	3304      	adds	r3, #4
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7ff f848 	bl	8004db4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d28:	2201      	movs	r2, #1
 8005d2a:	409a      	lsls	r2, r3
 8005d2c:	4b2b      	ldr	r3, [pc, #172]	; (8005ddc <xTaskResumeAll+0x120>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	4a2a      	ldr	r2, [pc, #168]	; (8005ddc <xTaskResumeAll+0x120>)
 8005d34:	6013      	str	r3, [r2, #0]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	4413      	add	r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4a27      	ldr	r2, [pc, #156]	; (8005de0 <xTaskResumeAll+0x124>)
 8005d44:	441a      	add	r2, r3
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	3304      	adds	r3, #4
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	4610      	mov	r0, r2
 8005d4e:	f7fe ffd4 	bl	8004cfa <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d56:	4b23      	ldr	r3, [pc, #140]	; (8005de4 <xTaskResumeAll+0x128>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d302      	bcc.n	8005d66 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8005d60:	4b21      	ldr	r3, [pc, #132]	; (8005de8 <xTaskResumeAll+0x12c>)
 8005d62:	2201      	movs	r2, #1
 8005d64:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d66:	4b1c      	ldr	r3, [pc, #112]	; (8005dd8 <xTaskResumeAll+0x11c>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d1cc      	bne.n	8005d08 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d001      	beq.n	8005d78 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8005d74:	f000 fb32 	bl	80063dc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005d78:	4b1c      	ldr	r3, [pc, #112]	; (8005dec <xTaskResumeAll+0x130>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d010      	beq.n	8005da6 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8005d84:	f000 f846 	bl	8005e14 <xTaskIncrementTick>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d002      	beq.n	8005d94 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8005d8e:	4b16      	ldr	r3, [pc, #88]	; (8005de8 <xTaskResumeAll+0x12c>)
 8005d90:	2201      	movs	r2, #1
 8005d92:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	3b01      	subs	r3, #1
 8005d98:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1f1      	bne.n	8005d84 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8005da0:	4b12      	ldr	r3, [pc, #72]	; (8005dec <xTaskResumeAll+0x130>)
 8005da2:	2200      	movs	r2, #0
 8005da4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8005da6:	4b10      	ldr	r3, [pc, #64]	; (8005de8 <xTaskResumeAll+0x12c>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d009      	beq.n	8005dc2 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8005dae:	2301      	movs	r3, #1
 8005db0:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8005db2:	4b0f      	ldr	r3, [pc, #60]	; (8005df0 <xTaskResumeAll+0x134>)
 8005db4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005db8:	601a      	str	r2, [r3, #0]
 8005dba:	f3bf 8f4f 	dsb	sy
 8005dbe:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8005dc2:	f001 fba1 	bl	8007508 <vPortExitCritical>

    return xAlreadyYielded;
 8005dc6:	68bb      	ldr	r3, [r7, #8]
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3710      	adds	r7, #16
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	2000032c 	.word	0x2000032c
 8005dd4:	20000304 	.word	0x20000304
 8005dd8:	200002c4 	.word	0x200002c4
 8005ddc:	2000030c 	.word	0x2000030c
 8005de0:	20000230 	.word	0x20000230
 8005de4:	2000022c 	.word	0x2000022c
 8005de8:	20000318 	.word	0x20000318
 8005dec:	20000314 	.word	0x20000314
 8005df0:	e000ed04 	.word	0xe000ed04

08005df4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8005dfa:	4b05      	ldr	r3, [pc, #20]	; (8005e10 <xTaskGetTickCount+0x1c>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005e00:	687b      	ldr	r3, [r7, #4]
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	370c      	adds	r7, #12
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	20000308 	.word	0x20000308

08005e14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b086      	sub	sp, #24
 8005e18:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e1e:	4b4e      	ldr	r3, [pc, #312]	; (8005f58 <xTaskIncrementTick+0x144>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	f040 808e 	bne.w	8005f44 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e28:	4b4c      	ldr	r3, [pc, #304]	; (8005f5c <xTaskIncrementTick+0x148>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005e30:	4a4a      	ldr	r2, [pc, #296]	; (8005f5c <xTaskIncrementTick+0x148>)
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d120      	bne.n	8005e7e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8005e3c:	4b48      	ldr	r3, [pc, #288]	; (8005f60 <xTaskIncrementTick+0x14c>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00a      	beq.n	8005e5c <xTaskIncrementTick+0x48>
        __asm volatile
 8005e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4a:	f383 8811 	msr	BASEPRI, r3
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	f3bf 8f4f 	dsb	sy
 8005e56:	603b      	str	r3, [r7, #0]
    }
 8005e58:	bf00      	nop
 8005e5a:	e7fe      	b.n	8005e5a <xTaskIncrementTick+0x46>
 8005e5c:	4b40      	ldr	r3, [pc, #256]	; (8005f60 <xTaskIncrementTick+0x14c>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	60fb      	str	r3, [r7, #12]
 8005e62:	4b40      	ldr	r3, [pc, #256]	; (8005f64 <xTaskIncrementTick+0x150>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a3e      	ldr	r2, [pc, #248]	; (8005f60 <xTaskIncrementTick+0x14c>)
 8005e68:	6013      	str	r3, [r2, #0]
 8005e6a:	4a3e      	ldr	r2, [pc, #248]	; (8005f64 <xTaskIncrementTick+0x150>)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6013      	str	r3, [r2, #0]
 8005e70:	4b3d      	ldr	r3, [pc, #244]	; (8005f68 <xTaskIncrementTick+0x154>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	3301      	adds	r3, #1
 8005e76:	4a3c      	ldr	r2, [pc, #240]	; (8005f68 <xTaskIncrementTick+0x154>)
 8005e78:	6013      	str	r3, [r2, #0]
 8005e7a:	f000 faaf 	bl	80063dc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005e7e:	4b3b      	ldr	r3, [pc, #236]	; (8005f6c <xTaskIncrementTick+0x158>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d348      	bcc.n	8005f1a <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e88:	4b35      	ldr	r3, [pc, #212]	; (8005f60 <xTaskIncrementTick+0x14c>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d104      	bne.n	8005e9c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e92:	4b36      	ldr	r3, [pc, #216]	; (8005f6c <xTaskIncrementTick+0x158>)
 8005e94:	f04f 32ff 	mov.w	r2, #4294967295
 8005e98:	601a      	str	r2, [r3, #0]
                    break;
 8005e9a:	e03e      	b.n	8005f1a <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e9c:	4b30      	ldr	r3, [pc, #192]	; (8005f60 <xTaskIncrementTick+0x14c>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8005eac:	693a      	ldr	r2, [r7, #16]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d203      	bcs.n	8005ebc <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005eb4:	4a2d      	ldr	r2, [pc, #180]	; (8005f6c <xTaskIncrementTick+0x158>)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005eba:	e02e      	b.n	8005f1a <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	3304      	adds	r3, #4
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f7fe ff77 	bl	8004db4 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d004      	beq.n	8005ed8 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	3318      	adds	r3, #24
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f7fe ff6e 	bl	8004db4 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005edc:	2201      	movs	r2, #1
 8005ede:	409a      	lsls	r2, r3
 8005ee0:	4b23      	ldr	r3, [pc, #140]	; (8005f70 <xTaskIncrementTick+0x15c>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	4a22      	ldr	r2, [pc, #136]	; (8005f70 <xTaskIncrementTick+0x15c>)
 8005ee8:	6013      	str	r3, [r2, #0]
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eee:	4613      	mov	r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	4413      	add	r3, r2
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	4a1f      	ldr	r2, [pc, #124]	; (8005f74 <xTaskIncrementTick+0x160>)
 8005ef8:	441a      	add	r2, r3
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	3304      	adds	r3, #4
 8005efe:	4619      	mov	r1, r3
 8005f00:	4610      	mov	r0, r2
 8005f02:	f7fe fefa 	bl	8004cfa <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f0a:	4b1b      	ldr	r3, [pc, #108]	; (8005f78 <xTaskIncrementTick+0x164>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d3b9      	bcc.n	8005e88 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8005f14:	2301      	movs	r3, #1
 8005f16:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f18:	e7b6      	b.n	8005e88 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f1a:	4b17      	ldr	r3, [pc, #92]	; (8005f78 <xTaskIncrementTick+0x164>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f20:	4914      	ldr	r1, [pc, #80]	; (8005f74 <xTaskIncrementTick+0x160>)
 8005f22:	4613      	mov	r3, r2
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	4413      	add	r3, r2
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	440b      	add	r3, r1
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d901      	bls.n	8005f36 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8005f32:	2301      	movs	r3, #1
 8005f34:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8005f36:	4b11      	ldr	r3, [pc, #68]	; (8005f7c <xTaskIncrementTick+0x168>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d007      	beq.n	8005f4e <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	617b      	str	r3, [r7, #20]
 8005f42:	e004      	b.n	8005f4e <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005f44:	4b0e      	ldr	r3, [pc, #56]	; (8005f80 <xTaskIncrementTick+0x16c>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	4a0d      	ldr	r2, [pc, #52]	; (8005f80 <xTaskIncrementTick+0x16c>)
 8005f4c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8005f4e:	697b      	ldr	r3, [r7, #20]
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3718      	adds	r7, #24
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	2000032c 	.word	0x2000032c
 8005f5c:	20000308 	.word	0x20000308
 8005f60:	200002bc 	.word	0x200002bc
 8005f64:	200002c0 	.word	0x200002c0
 8005f68:	2000031c 	.word	0x2000031c
 8005f6c:	20000324 	.word	0x20000324
 8005f70:	2000030c 	.word	0x2000030c
 8005f74:	20000230 	.word	0x20000230
 8005f78:	2000022c 	.word	0x2000022c
 8005f7c:	20000318 	.word	0x20000318
 8005f80:	20000314 	.word	0x20000314

08005f84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f84:	b480      	push	{r7}
 8005f86:	b087      	sub	sp, #28
 8005f88:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f8a:	4b27      	ldr	r3, [pc, #156]	; (8006028 <vTaskSwitchContext+0xa4>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d003      	beq.n	8005f9a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005f92:	4b26      	ldr	r3, [pc, #152]	; (800602c <vTaskSwitchContext+0xa8>)
 8005f94:	2201      	movs	r2, #1
 8005f96:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8005f98:	e03f      	b.n	800601a <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8005f9a:	4b24      	ldr	r3, [pc, #144]	; (800602c <vTaskSwitchContext+0xa8>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fa0:	4b23      	ldr	r3, [pc, #140]	; (8006030 <vTaskSwitchContext+0xac>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	fab3 f383 	clz	r3, r3
 8005fac:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8005fae:	7afb      	ldrb	r3, [r7, #11]
 8005fb0:	f1c3 031f 	rsb	r3, r3, #31
 8005fb4:	617b      	str	r3, [r7, #20]
 8005fb6:	491f      	ldr	r1, [pc, #124]	; (8006034 <vTaskSwitchContext+0xb0>)
 8005fb8:	697a      	ldr	r2, [r7, #20]
 8005fba:	4613      	mov	r3, r2
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	4413      	add	r3, r2
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	440b      	add	r3, r1
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d10a      	bne.n	8005fe0 <vTaskSwitchContext+0x5c>
        __asm volatile
 8005fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fce:	f383 8811 	msr	BASEPRI, r3
 8005fd2:	f3bf 8f6f 	isb	sy
 8005fd6:	f3bf 8f4f 	dsb	sy
 8005fda:	607b      	str	r3, [r7, #4]
    }
 8005fdc:	bf00      	nop
 8005fde:	e7fe      	b.n	8005fde <vTaskSwitchContext+0x5a>
 8005fe0:	697a      	ldr	r2, [r7, #20]
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	4413      	add	r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	4a12      	ldr	r2, [pc, #72]	; (8006034 <vTaskSwitchContext+0xb0>)
 8005fec:	4413      	add	r3, r2
 8005fee:	613b      	str	r3, [r7, #16]
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	685a      	ldr	r2, [r3, #4]
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	605a      	str	r2, [r3, #4]
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	685a      	ldr	r2, [r3, #4]
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	3308      	adds	r3, #8
 8006002:	429a      	cmp	r2, r3
 8006004:	d104      	bne.n	8006010 <vTaskSwitchContext+0x8c>
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	605a      	str	r2, [r3, #4]
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	4a08      	ldr	r2, [pc, #32]	; (8006038 <vTaskSwitchContext+0xb4>)
 8006018:	6013      	str	r3, [r2, #0]
}
 800601a:	bf00      	nop
 800601c:	371c      	adds	r7, #28
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	2000032c 	.word	0x2000032c
 800602c:	20000318 	.word	0x20000318
 8006030:	2000030c 	.word	0x2000030c
 8006034:	20000230 	.word	0x20000230
 8006038:	2000022c 	.word	0x2000022c

0800603c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d10a      	bne.n	8006062 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800604c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006050:	f383 8811 	msr	BASEPRI, r3
 8006054:	f3bf 8f6f 	isb	sy
 8006058:	f3bf 8f4f 	dsb	sy
 800605c:	60fb      	str	r3, [r7, #12]
    }
 800605e:	bf00      	nop
 8006060:	e7fe      	b.n	8006060 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006062:	4b07      	ldr	r3, [pc, #28]	; (8006080 <vTaskPlaceOnEventList+0x44>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	3318      	adds	r3, #24
 8006068:	4619      	mov	r1, r3
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f7fe fe69 	bl	8004d42 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006070:	2101      	movs	r1, #1
 8006072:	6838      	ldr	r0, [r7, #0]
 8006074:	f000 fcc8 	bl	8006a08 <prvAddCurrentTaskToDelayedList>
}
 8006078:	bf00      	nop
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	2000022c 	.word	0x2000022c

08006084 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10a      	bne.n	80060ac <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8006096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800609a:	f383 8811 	msr	BASEPRI, r3
 800609e:	f3bf 8f6f 	isb	sy
 80060a2:	f3bf 8f4f 	dsb	sy
 80060a6:	617b      	str	r3, [r7, #20]
    }
 80060a8:	bf00      	nop
 80060aa:	e7fe      	b.n	80060aa <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060ac:	4b0a      	ldr	r3, [pc, #40]	; (80060d8 <vTaskPlaceOnEventListRestricted+0x54>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	3318      	adds	r3, #24
 80060b2:	4619      	mov	r1, r3
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f7fe fe20 	bl	8004cfa <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d002      	beq.n	80060c6 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80060c0:	f04f 33ff 	mov.w	r3, #4294967295
 80060c4:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80060c6:	6879      	ldr	r1, [r7, #4]
 80060c8:	68b8      	ldr	r0, [r7, #8]
 80060ca:	f000 fc9d 	bl	8006a08 <prvAddCurrentTaskToDelayedList>
    }
 80060ce:	bf00      	nop
 80060d0:	3718      	adds	r7, #24
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	2000022c 	.word	0x2000022c

080060dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b086      	sub	sp, #24
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10a      	bne.n	8006108 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80060f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f6:	f383 8811 	msr	BASEPRI, r3
 80060fa:	f3bf 8f6f 	isb	sy
 80060fe:	f3bf 8f4f 	dsb	sy
 8006102:	60fb      	str	r3, [r7, #12]
    }
 8006104:	bf00      	nop
 8006106:	e7fe      	b.n	8006106 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	3318      	adds	r3, #24
 800610c:	4618      	mov	r0, r3
 800610e:	f7fe fe51 	bl	8004db4 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006112:	4b1d      	ldr	r3, [pc, #116]	; (8006188 <xTaskRemoveFromEventList+0xac>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d11c      	bne.n	8006154 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	3304      	adds	r3, #4
 800611e:	4618      	mov	r0, r3
 8006120:	f7fe fe48 	bl	8004db4 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006128:	2201      	movs	r2, #1
 800612a:	409a      	lsls	r2, r3
 800612c:	4b17      	ldr	r3, [pc, #92]	; (800618c <xTaskRemoveFromEventList+0xb0>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4313      	orrs	r3, r2
 8006132:	4a16      	ldr	r2, [pc, #88]	; (800618c <xTaskRemoveFromEventList+0xb0>)
 8006134:	6013      	str	r3, [r2, #0]
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800613a:	4613      	mov	r3, r2
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	4413      	add	r3, r2
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	4a13      	ldr	r2, [pc, #76]	; (8006190 <xTaskRemoveFromEventList+0xb4>)
 8006144:	441a      	add	r2, r3
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	3304      	adds	r3, #4
 800614a:	4619      	mov	r1, r3
 800614c:	4610      	mov	r0, r2
 800614e:	f7fe fdd4 	bl	8004cfa <vListInsertEnd>
 8006152:	e005      	b.n	8006160 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	3318      	adds	r3, #24
 8006158:	4619      	mov	r1, r3
 800615a:	480e      	ldr	r0, [pc, #56]	; (8006194 <xTaskRemoveFromEventList+0xb8>)
 800615c:	f7fe fdcd 	bl	8004cfa <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006164:	4b0c      	ldr	r3, [pc, #48]	; (8006198 <xTaskRemoveFromEventList+0xbc>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616a:	429a      	cmp	r2, r3
 800616c:	d905      	bls.n	800617a <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800616e:	2301      	movs	r3, #1
 8006170:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8006172:	4b0a      	ldr	r3, [pc, #40]	; (800619c <xTaskRemoveFromEventList+0xc0>)
 8006174:	2201      	movs	r2, #1
 8006176:	601a      	str	r2, [r3, #0]
 8006178:	e001      	b.n	800617e <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 800617a:	2300      	movs	r3, #0
 800617c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800617e:	697b      	ldr	r3, [r7, #20]
}
 8006180:	4618      	mov	r0, r3
 8006182:	3718      	adds	r7, #24
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	2000032c 	.word	0x2000032c
 800618c:	2000030c 	.word	0x2000030c
 8006190:	20000230 	.word	0x20000230
 8006194:	200002c4 	.word	0x200002c4
 8006198:	2000022c 	.word	0x2000022c
 800619c:	20000318 	.word	0x20000318

080061a0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80061a8:	4b06      	ldr	r3, [pc, #24]	; (80061c4 <vTaskInternalSetTimeOutState+0x24>)
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80061b0:	4b05      	ldr	r3, [pc, #20]	; (80061c8 <vTaskInternalSetTimeOutState+0x28>)
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	605a      	str	r2, [r3, #4]
}
 80061b8:	bf00      	nop
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr
 80061c4:	2000031c 	.word	0x2000031c
 80061c8:	20000308 	.word	0x20000308

080061cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b088      	sub	sp, #32
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10a      	bne.n	80061f2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80061dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e0:	f383 8811 	msr	BASEPRI, r3
 80061e4:	f3bf 8f6f 	isb	sy
 80061e8:	f3bf 8f4f 	dsb	sy
 80061ec:	613b      	str	r3, [r7, #16]
    }
 80061ee:	bf00      	nop
 80061f0:	e7fe      	b.n	80061f0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d10a      	bne.n	800620e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80061f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fc:	f383 8811 	msr	BASEPRI, r3
 8006200:	f3bf 8f6f 	isb	sy
 8006204:	f3bf 8f4f 	dsb	sy
 8006208:	60fb      	str	r3, [r7, #12]
    }
 800620a:	bf00      	nop
 800620c:	e7fe      	b.n	800620c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800620e:	f001 f94b 	bl	80074a8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8006212:	4b1f      	ldr	r3, [pc, #124]	; (8006290 <xTaskCheckForTimeOut+0xc4>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	69ba      	ldr	r2, [r7, #24]
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800622a:	d102      	bne.n	8006232 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800622c:	2300      	movs	r3, #0
 800622e:	61fb      	str	r3, [r7, #28]
 8006230:	e026      	b.n	8006280 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	4b17      	ldr	r3, [pc, #92]	; (8006294 <xTaskCheckForTimeOut+0xc8>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	429a      	cmp	r2, r3
 800623c:	d00a      	beq.n	8006254 <xTaskCheckForTimeOut+0x88>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	69ba      	ldr	r2, [r7, #24]
 8006244:	429a      	cmp	r2, r3
 8006246:	d305      	bcc.n	8006254 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8006248:	2301      	movs	r3, #1
 800624a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	2200      	movs	r2, #0
 8006250:	601a      	str	r2, [r3, #0]
 8006252:	e015      	b.n	8006280 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	429a      	cmp	r2, r3
 800625c:	d20b      	bcs.n	8006276 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	1ad2      	subs	r2, r2, r3
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f7ff ff98 	bl	80061a0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8006270:	2300      	movs	r3, #0
 8006272:	61fb      	str	r3, [r7, #28]
 8006274:	e004      	b.n	8006280 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	2200      	movs	r2, #0
 800627a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800627c:	2301      	movs	r3, #1
 800627e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8006280:	f001 f942 	bl	8007508 <vPortExitCritical>

    return xReturn;
 8006284:	69fb      	ldr	r3, [r7, #28]
}
 8006286:	4618      	mov	r0, r3
 8006288:	3720      	adds	r7, #32
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	20000308 	.word	0x20000308
 8006294:	2000031c 	.word	0x2000031c

08006298 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006298:	b480      	push	{r7}
 800629a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800629c:	4b03      	ldr	r3, [pc, #12]	; (80062ac <vTaskMissedYield+0x14>)
 800629e:	2201      	movs	r2, #1
 80062a0:	601a      	str	r2, [r3, #0]
}
 80062a2:	bf00      	nop
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr
 80062ac:	20000318 	.word	0x20000318

080062b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80062b8:	f000 f852 	bl	8006360 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80062bc:	4b06      	ldr	r3, [pc, #24]	; (80062d8 <prvIdleTask+0x28>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d9f9      	bls.n	80062b8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80062c4:	4b05      	ldr	r3, [pc, #20]	; (80062dc <prvIdleTask+0x2c>)
 80062c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062ca:	601a      	str	r2, [r3, #0]
 80062cc:	f3bf 8f4f 	dsb	sy
 80062d0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80062d4:	e7f0      	b.n	80062b8 <prvIdleTask+0x8>
 80062d6:	bf00      	nop
 80062d8:	20000230 	.word	0x20000230
 80062dc:	e000ed04 	.word	0xe000ed04

080062e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062e6:	2300      	movs	r3, #0
 80062e8:	607b      	str	r3, [r7, #4]
 80062ea:	e00c      	b.n	8006306 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	4613      	mov	r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	4413      	add	r3, r2
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	4a12      	ldr	r2, [pc, #72]	; (8006340 <prvInitialiseTaskLists+0x60>)
 80062f8:	4413      	add	r3, r2
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7fe fcd0 	bl	8004ca0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	3301      	adds	r3, #1
 8006304:	607b      	str	r3, [r7, #4]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2b04      	cmp	r3, #4
 800630a:	d9ef      	bls.n	80062ec <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800630c:	480d      	ldr	r0, [pc, #52]	; (8006344 <prvInitialiseTaskLists+0x64>)
 800630e:	f7fe fcc7 	bl	8004ca0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8006312:	480d      	ldr	r0, [pc, #52]	; (8006348 <prvInitialiseTaskLists+0x68>)
 8006314:	f7fe fcc4 	bl	8004ca0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8006318:	480c      	ldr	r0, [pc, #48]	; (800634c <prvInitialiseTaskLists+0x6c>)
 800631a:	f7fe fcc1 	bl	8004ca0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800631e:	480c      	ldr	r0, [pc, #48]	; (8006350 <prvInitialiseTaskLists+0x70>)
 8006320:	f7fe fcbe 	bl	8004ca0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8006324:	480b      	ldr	r0, [pc, #44]	; (8006354 <prvInitialiseTaskLists+0x74>)
 8006326:	f7fe fcbb 	bl	8004ca0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800632a:	4b0b      	ldr	r3, [pc, #44]	; (8006358 <prvInitialiseTaskLists+0x78>)
 800632c:	4a05      	ldr	r2, [pc, #20]	; (8006344 <prvInitialiseTaskLists+0x64>)
 800632e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006330:	4b0a      	ldr	r3, [pc, #40]	; (800635c <prvInitialiseTaskLists+0x7c>)
 8006332:	4a05      	ldr	r2, [pc, #20]	; (8006348 <prvInitialiseTaskLists+0x68>)
 8006334:	601a      	str	r2, [r3, #0]
}
 8006336:	bf00      	nop
 8006338:	3708      	adds	r7, #8
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	20000230 	.word	0x20000230
 8006344:	20000294 	.word	0x20000294
 8006348:	200002a8 	.word	0x200002a8
 800634c:	200002c4 	.word	0x200002c4
 8006350:	200002d8 	.word	0x200002d8
 8006354:	200002f0 	.word	0x200002f0
 8006358:	200002bc 	.word	0x200002bc
 800635c:	200002c0 	.word	0x200002c0

08006360 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006366:	e019      	b.n	800639c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8006368:	f001 f89e 	bl	80074a8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800636c:	4b10      	ldr	r3, [pc, #64]	; (80063b0 <prvCheckTasksWaitingTermination+0x50>)
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	3304      	adds	r3, #4
 8006378:	4618      	mov	r0, r3
 800637a:	f7fe fd1b 	bl	8004db4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800637e:	4b0d      	ldr	r3, [pc, #52]	; (80063b4 <prvCheckTasksWaitingTermination+0x54>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	3b01      	subs	r3, #1
 8006384:	4a0b      	ldr	r2, [pc, #44]	; (80063b4 <prvCheckTasksWaitingTermination+0x54>)
 8006386:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8006388:	4b0b      	ldr	r3, [pc, #44]	; (80063b8 <prvCheckTasksWaitingTermination+0x58>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	3b01      	subs	r3, #1
 800638e:	4a0a      	ldr	r2, [pc, #40]	; (80063b8 <prvCheckTasksWaitingTermination+0x58>)
 8006390:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8006392:	f001 f8b9 	bl	8007508 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f810 	bl	80063bc <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800639c:	4b06      	ldr	r3, [pc, #24]	; (80063b8 <prvCheckTasksWaitingTermination+0x58>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d1e1      	bne.n	8006368 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80063a4:	bf00      	nop
 80063a6:	bf00      	nop
 80063a8:	3708      	adds	r7, #8
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	200002d8 	.word	0x200002d8
 80063b4:	20000304 	.word	0x20000304
 80063b8:	200002ec 	.word	0x200002ec

080063bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c8:	4618      	mov	r0, r3
 80063ca:	f001 fa6f 	bl	80078ac <vPortFree>
                vPortFree( pxTCB );
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f001 fa6c 	bl	80078ac <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80063d4:	bf00      	nop
 80063d6:	3708      	adds	r7, #8
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80063dc:	b480      	push	{r7}
 80063de:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063e0:	4b0a      	ldr	r3, [pc, #40]	; (800640c <prvResetNextTaskUnblockTime+0x30>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d104      	bne.n	80063f4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80063ea:	4b09      	ldr	r3, [pc, #36]	; (8006410 <prvResetNextTaskUnblockTime+0x34>)
 80063ec:	f04f 32ff 	mov.w	r2, #4294967295
 80063f0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80063f2:	e005      	b.n	8006400 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80063f4:	4b05      	ldr	r3, [pc, #20]	; (800640c <prvResetNextTaskUnblockTime+0x30>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a04      	ldr	r2, [pc, #16]	; (8006410 <prvResetNextTaskUnblockTime+0x34>)
 80063fe:	6013      	str	r3, [r2, #0]
}
 8006400:	bf00      	nop
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop
 800640c:	200002bc 	.word	0x200002bc
 8006410:	20000324 	.word	0x20000324

08006414 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800641a:	4b0b      	ldr	r3, [pc, #44]	; (8006448 <xTaskGetSchedulerState+0x34>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d102      	bne.n	8006428 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8006422:	2301      	movs	r3, #1
 8006424:	607b      	str	r3, [r7, #4]
 8006426:	e008      	b.n	800643a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006428:	4b08      	ldr	r3, [pc, #32]	; (800644c <xTaskGetSchedulerState+0x38>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d102      	bne.n	8006436 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8006430:	2302      	movs	r3, #2
 8006432:	607b      	str	r3, [r7, #4]
 8006434:	e001      	b.n	800643a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8006436:	2300      	movs	r3, #0
 8006438:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800643a:	687b      	ldr	r3, [r7, #4]
    }
 800643c:	4618      	mov	r0, r3
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr
 8006448:	20000310 	.word	0x20000310
 800644c:	2000032c 	.word	0x2000032c

08006450 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8006450:	b580      	push	{r7, lr}
 8006452:	b086      	sub	sp, #24
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800645c:	2300      	movs	r3, #0
 800645e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d063      	beq.n	800652e <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8006466:	4b34      	ldr	r3, [pc, #208]	; (8006538 <xTaskPriorityDisinherit+0xe8>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	693a      	ldr	r2, [r7, #16]
 800646c:	429a      	cmp	r2, r3
 800646e:	d00a      	beq.n	8006486 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8006470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006474:	f383 8811 	msr	BASEPRI, r3
 8006478:	f3bf 8f6f 	isb	sy
 800647c:	f3bf 8f4f 	dsb	sy
 8006480:	60fb      	str	r3, [r7, #12]
    }
 8006482:	bf00      	nop
 8006484:	e7fe      	b.n	8006484 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800648a:	2b00      	cmp	r3, #0
 800648c:	d10a      	bne.n	80064a4 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800648e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006492:	f383 8811 	msr	BASEPRI, r3
 8006496:	f3bf 8f6f 	isb	sy
 800649a:	f3bf 8f4f 	dsb	sy
 800649e:	60bb      	str	r3, [r7, #8]
    }
 80064a0:	bf00      	nop
 80064a2:	e7fe      	b.n	80064a2 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064a8:	1e5a      	subs	r2, r3, #1
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d039      	beq.n	800652e <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d135      	bne.n	800652e <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	3304      	adds	r3, #4
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7fe fc74 	bl	8004db4 <uxListRemove>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10a      	bne.n	80064e8 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d6:	2201      	movs	r2, #1
 80064d8:	fa02 f303 	lsl.w	r3, r2, r3
 80064dc:	43da      	mvns	r2, r3
 80064de:	4b17      	ldr	r3, [pc, #92]	; (800653c <xTaskPriorityDisinherit+0xec>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4013      	ands	r3, r2
 80064e4:	4a15      	ldr	r2, [pc, #84]	; (800653c <xTaskPriorityDisinherit+0xec>)
 80064e6:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f4:	f1c3 0205 	rsb	r2, r3, #5
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006500:	2201      	movs	r2, #1
 8006502:	409a      	lsls	r2, r3
 8006504:	4b0d      	ldr	r3, [pc, #52]	; (800653c <xTaskPriorityDisinherit+0xec>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4313      	orrs	r3, r2
 800650a:	4a0c      	ldr	r2, [pc, #48]	; (800653c <xTaskPriorityDisinherit+0xec>)
 800650c:	6013      	str	r3, [r2, #0]
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006512:	4613      	mov	r3, r2
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	4413      	add	r3, r2
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	4a09      	ldr	r2, [pc, #36]	; (8006540 <xTaskPriorityDisinherit+0xf0>)
 800651c:	441a      	add	r2, r3
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	3304      	adds	r3, #4
 8006522:	4619      	mov	r1, r3
 8006524:	4610      	mov	r0, r2
 8006526:	f7fe fbe8 	bl	8004cfa <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800652a:	2301      	movs	r3, #1
 800652c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800652e:	697b      	ldr	r3, [r7, #20]
    }
 8006530:	4618      	mov	r0, r3
 8006532:	3718      	adds	r7, #24
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	2000022c 	.word	0x2000022c
 800653c:	2000030c 	.word	0x2000030c
 8006540:	20000230 	.word	0x20000230

08006544 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
 8006550:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00a      	beq.n	800656e <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8006558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655c:	f383 8811 	msr	BASEPRI, r3
 8006560:	f3bf 8f6f 	isb	sy
 8006564:	f3bf 8f4f 	dsb	sy
 8006568:	613b      	str	r3, [r7, #16]
    }
 800656a:	bf00      	nop
 800656c:	e7fe      	b.n	800656c <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 800656e:	f000 ff9b 	bl	80074a8 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006572:	4b32      	ldr	r3, [pc, #200]	; (800663c <xTaskGenericNotifyWait+0xf8>)
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	4413      	add	r3, r2
 800657a:	3354      	adds	r3, #84	; 0x54
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	b2db      	uxtb	r3, r3
 8006580:	2b02      	cmp	r3, #2
 8006582:	d022      	beq.n	80065ca <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8006584:	4b2d      	ldr	r3, [pc, #180]	; (800663c <xTaskGenericNotifyWait+0xf8>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	3214      	adds	r2, #20
 800658c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006590:	68ba      	ldr	r2, [r7, #8]
 8006592:	43d2      	mvns	r2, r2
 8006594:	4011      	ands	r1, r2
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	3214      	adds	r2, #20
 800659a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800659e:	4b27      	ldr	r3, [pc, #156]	; (800663c <xTaskGenericNotifyWait+0xf8>)
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	4413      	add	r3, r2
 80065a6:	3354      	adds	r3, #84	; 0x54
 80065a8:	2201      	movs	r2, #1
 80065aa:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80065ac:	6a3b      	ldr	r3, [r7, #32]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00b      	beq.n	80065ca <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80065b2:	2101      	movs	r1, #1
 80065b4:	6a38      	ldr	r0, [r7, #32]
 80065b6:	f000 fa27 	bl	8006a08 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80065ba:	4b21      	ldr	r3, [pc, #132]	; (8006640 <xTaskGenericNotifyWait+0xfc>)
 80065bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065c0:	601a      	str	r2, [r3, #0]
 80065c2:	f3bf 8f4f 	dsb	sy
 80065c6:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80065ca:	f000 ff9d 	bl	8007508 <vPortExitCritical>

        taskENTER_CRITICAL();
 80065ce:	f000 ff6b 	bl	80074a8 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d007      	beq.n	80065e8 <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80065d8:	4b18      	ldr	r3, [pc, #96]	; (800663c <xTaskGenericNotifyWait+0xf8>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	3214      	adds	r2, #20
 80065e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80065e8:	4b14      	ldr	r3, [pc, #80]	; (800663c <xTaskGenericNotifyWait+0xf8>)
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	4413      	add	r3, r2
 80065f0:	3354      	adds	r3, #84	; 0x54
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d002      	beq.n	8006600 <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80065fa:	2300      	movs	r3, #0
 80065fc:	617b      	str	r3, [r7, #20]
 80065fe:	e00e      	b.n	800661e <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8006600:	4b0e      	ldr	r3, [pc, #56]	; (800663c <xTaskGenericNotifyWait+0xf8>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	3214      	adds	r2, #20
 8006608:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	43d2      	mvns	r2, r2
 8006610:	4011      	ands	r1, r2
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	3214      	adds	r2, #20
 8006616:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 800661a:	2301      	movs	r3, #1
 800661c:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 800661e:	4b07      	ldr	r3, [pc, #28]	; (800663c <xTaskGenericNotifyWait+0xf8>)
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	4413      	add	r3, r2
 8006626:	3354      	adds	r3, #84	; 0x54
 8006628:	2200      	movs	r2, #0
 800662a:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800662c:	f000 ff6c 	bl	8007508 <vPortExitCritical>

        return xReturn;
 8006630:	697b      	ldr	r3, [r7, #20]
    }
 8006632:	4618      	mov	r0, r3
 8006634:	3718      	adds	r7, #24
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	2000022c 	.word	0x2000022c
 8006640:	e000ed04 	.word	0xe000ed04

08006644 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8006644:	b580      	push	{r7, lr}
 8006646:	b08c      	sub	sp, #48	; 0x30
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	607a      	str	r2, [r7, #4]
 8006650:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8006652:	2301      	movs	r3, #1
 8006654:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00a      	beq.n	8006672 <xTaskGenericNotify+0x2e>
        __asm volatile
 800665c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006660:	f383 8811 	msr	BASEPRI, r3
 8006664:	f3bf 8f6f 	isb	sy
 8006668:	f3bf 8f4f 	dsb	sy
 800666c:	623b      	str	r3, [r7, #32]
    }
 800666e:	bf00      	nop
 8006670:	e7fe      	b.n	8006670 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d10a      	bne.n	800668e <xTaskGenericNotify+0x4a>
        __asm volatile
 8006678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667c:	f383 8811 	msr	BASEPRI, r3
 8006680:	f3bf 8f6f 	isb	sy
 8006684:	f3bf 8f4f 	dsb	sy
 8006688:	61fb      	str	r3, [r7, #28]
    }
 800668a:	bf00      	nop
 800668c:	e7fe      	b.n	800668c <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8006692:	f000 ff09 	bl	80074a8 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8006696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006698:	2b00      	cmp	r3, #0
 800669a:	d006      	beq.n	80066aa <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800669c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669e:	68ba      	ldr	r2, [r7, #8]
 80066a0:	3214      	adds	r2, #20
 80066a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80066a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a8:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80066aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	4413      	add	r3, r2
 80066b0:	3354      	adds	r3, #84	; 0x54
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80066b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	4413      	add	r3, r2
 80066be:	3354      	adds	r3, #84	; 0x54
 80066c0:	2202      	movs	r2, #2
 80066c2:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80066c4:	78fb      	ldrb	r3, [r7, #3]
 80066c6:	2b04      	cmp	r3, #4
 80066c8:	d83b      	bhi.n	8006742 <xTaskGenericNotify+0xfe>
 80066ca:	a201      	add	r2, pc, #4	; (adr r2, 80066d0 <xTaskGenericNotify+0x8c>)
 80066cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d0:	08006761 	.word	0x08006761
 80066d4:	080066e5 	.word	0x080066e5
 80066d8:	08006701 	.word	0x08006701
 80066dc:	08006719 	.word	0x08006719
 80066e0:	08006727 	.word	0x08006727
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80066e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e6:	68ba      	ldr	r2, [r7, #8]
 80066e8:	3214      	adds	r2, #20
 80066ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	ea42 0103 	orr.w	r1, r2, r3
 80066f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f6:	68ba      	ldr	r2, [r7, #8]
 80066f8:	3214      	adds	r2, #20
 80066fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80066fe:	e032      	b.n	8006766 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	3214      	adds	r2, #20
 8006706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800670a:	1c59      	adds	r1, r3, #1
 800670c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670e:	68ba      	ldr	r2, [r7, #8]
 8006710:	3214      	adds	r2, #20
 8006712:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006716:	e026      	b.n	8006766 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671a:	68ba      	ldr	r2, [r7, #8]
 800671c:	3214      	adds	r2, #20
 800671e:	6879      	ldr	r1, [r7, #4]
 8006720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006724:	e01f      	b.n	8006766 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006726:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800672a:	2b02      	cmp	r3, #2
 800672c:	d006      	beq.n	800673c <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800672e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006730:	68ba      	ldr	r2, [r7, #8]
 8006732:	3214      	adds	r2, #20
 8006734:	6879      	ldr	r1, [r7, #4]
 8006736:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800673a:	e014      	b.n	8006766 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 800673c:	2300      	movs	r3, #0
 800673e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8006740:	e011      	b.n	8006766 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006742:	4b2b      	ldr	r3, [pc, #172]	; (80067f0 <xTaskGenericNotify+0x1ac>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00c      	beq.n	8006764 <xTaskGenericNotify+0x120>
        __asm volatile
 800674a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674e:	f383 8811 	msr	BASEPRI, r3
 8006752:	f3bf 8f6f 	isb	sy
 8006756:	f3bf 8f4f 	dsb	sy
 800675a:	61bb      	str	r3, [r7, #24]
    }
 800675c:	bf00      	nop
 800675e:	e7fe      	b.n	800675e <xTaskGenericNotify+0x11a>
                    break;
 8006760:	bf00      	nop
 8006762:	e000      	b.n	8006766 <xTaskGenericNotify+0x122>

                    break;
 8006764:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006766:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800676a:	2b01      	cmp	r3, #1
 800676c:	d139      	bne.n	80067e2 <xTaskGenericNotify+0x19e>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800676e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006770:	3304      	adds	r3, #4
 8006772:	4618      	mov	r0, r3
 8006774:	f7fe fb1e 	bl	8004db4 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8006778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677c:	2201      	movs	r2, #1
 800677e:	409a      	lsls	r2, r3
 8006780:	4b1c      	ldr	r3, [pc, #112]	; (80067f4 <xTaskGenericNotify+0x1b0>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4313      	orrs	r3, r2
 8006786:	4a1b      	ldr	r2, [pc, #108]	; (80067f4 <xTaskGenericNotify+0x1b0>)
 8006788:	6013      	str	r3, [r2, #0]
 800678a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800678e:	4613      	mov	r3, r2
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	4413      	add	r3, r2
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	4a18      	ldr	r2, [pc, #96]	; (80067f8 <xTaskGenericNotify+0x1b4>)
 8006798:	441a      	add	r2, r3
 800679a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679c:	3304      	adds	r3, #4
 800679e:	4619      	mov	r1, r3
 80067a0:	4610      	mov	r0, r2
 80067a2:	f7fe faaa 	bl	8004cfa <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80067a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00a      	beq.n	80067c4 <xTaskGenericNotify+0x180>
        __asm volatile
 80067ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b2:	f383 8811 	msr	BASEPRI, r3
 80067b6:	f3bf 8f6f 	isb	sy
 80067ba:	f3bf 8f4f 	dsb	sy
 80067be:	617b      	str	r3, [r7, #20]
    }
 80067c0:	bf00      	nop
 80067c2:	e7fe      	b.n	80067c2 <xTaskGenericNotify+0x17e>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80067c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067c8:	4b0c      	ldr	r3, [pc, #48]	; (80067fc <xTaskGenericNotify+0x1b8>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d907      	bls.n	80067e2 <xTaskGenericNotify+0x19e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80067d2:	4b0b      	ldr	r3, [pc, #44]	; (8006800 <xTaskGenericNotify+0x1bc>)
 80067d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067d8:	601a      	str	r2, [r3, #0]
 80067da:	f3bf 8f4f 	dsb	sy
 80067de:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80067e2:	f000 fe91 	bl	8007508 <vPortExitCritical>

        return xReturn;
 80067e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 80067e8:	4618      	mov	r0, r3
 80067ea:	3730      	adds	r7, #48	; 0x30
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	20000308 	.word	0x20000308
 80067f4:	2000030c 	.word	0x2000030c
 80067f8:	20000230 	.word	0x20000230
 80067fc:	2000022c 	.word	0x2000022c
 8006800:	e000ed04 	.word	0xe000ed04

08006804 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8006804:	b580      	push	{r7, lr}
 8006806:	b090      	sub	sp, #64	; 0x40
 8006808:	af00      	add	r7, sp, #0
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	607a      	str	r2, [r7, #4]
 8006810:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8006812:	2301      	movs	r3, #1
 8006814:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d10a      	bne.n	8006832 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 800681c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006820:	f383 8811 	msr	BASEPRI, r3
 8006824:	f3bf 8f6f 	isb	sy
 8006828:	f3bf 8f4f 	dsb	sy
 800682c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 800682e:	bf00      	nop
 8006830:	e7fe      	b.n	8006830 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00a      	beq.n	800684e <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8006838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683c:	f383 8811 	msr	BASEPRI, r3
 8006840:	f3bf 8f6f 	isb	sy
 8006844:	f3bf 8f4f 	dsb	sy
 8006848:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800684a:	bf00      	nop
 800684c:	e7fe      	b.n	800684c <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800684e:	f000 ff0d 	bl	800766c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 8006856:	f3ef 8211 	mrs	r2, BASEPRI
 800685a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685e:	f383 8811 	msr	BASEPRI, r3
 8006862:	f3bf 8f6f 	isb	sy
 8006866:	f3bf 8f4f 	dsb	sy
 800686a:	627a      	str	r2, [r7, #36]	; 0x24
 800686c:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 800686e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006870:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8006872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006874:	2b00      	cmp	r3, #0
 8006876:	d006      	beq.n	8006886 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800687a:	68ba      	ldr	r2, [r7, #8]
 800687c:	3214      	adds	r2, #20
 800687e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006882:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006884:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006886:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	4413      	add	r3, r2
 800688c:	3354      	adds	r3, #84	; 0x54
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006894:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	4413      	add	r3, r2
 800689a:	3354      	adds	r3, #84	; 0x54
 800689c:	2202      	movs	r2, #2
 800689e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80068a0:	78fb      	ldrb	r3, [r7, #3]
 80068a2:	2b04      	cmp	r3, #4
 80068a4:	d83b      	bhi.n	800691e <xTaskGenericNotifyFromISR+0x11a>
 80068a6:	a201      	add	r2, pc, #4	; (adr r2, 80068ac <xTaskGenericNotifyFromISR+0xa8>)
 80068a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ac:	0800693d 	.word	0x0800693d
 80068b0:	080068c1 	.word	0x080068c1
 80068b4:	080068dd 	.word	0x080068dd
 80068b8:	080068f5 	.word	0x080068f5
 80068bc:	08006903 	.word	0x08006903
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80068c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c2:	68ba      	ldr	r2, [r7, #8]
 80068c4:	3214      	adds	r2, #20
 80068c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	ea42 0103 	orr.w	r1, r2, r3
 80068d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d2:	68ba      	ldr	r2, [r7, #8]
 80068d4:	3214      	adds	r2, #20
 80068d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80068da:	e032      	b.n	8006942 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80068dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068de:	68ba      	ldr	r2, [r7, #8]
 80068e0:	3214      	adds	r2, #20
 80068e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068e6:	1c59      	adds	r1, r3, #1
 80068e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ea:	68ba      	ldr	r2, [r7, #8]
 80068ec:	3214      	adds	r2, #20
 80068ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80068f2:	e026      	b.n	8006942 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80068f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f6:	68ba      	ldr	r2, [r7, #8]
 80068f8:	3214      	adds	r2, #20
 80068fa:	6879      	ldr	r1, [r7, #4]
 80068fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006900:	e01f      	b.n	8006942 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006902:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006906:	2b02      	cmp	r3, #2
 8006908:	d006      	beq.n	8006918 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800690a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690c:	68ba      	ldr	r2, [r7, #8]
 800690e:	3214      	adds	r2, #20
 8006910:	6879      	ldr	r1, [r7, #4]
 8006912:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8006916:	e014      	b.n	8006942 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8006918:	2300      	movs	r3, #0
 800691a:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 800691c:	e011      	b.n	8006942 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800691e:	4b33      	ldr	r3, [pc, #204]	; (80069ec <xTaskGenericNotifyFromISR+0x1e8>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00c      	beq.n	8006940 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8006926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692a:	f383 8811 	msr	BASEPRI, r3
 800692e:	f3bf 8f6f 	isb	sy
 8006932:	f3bf 8f4f 	dsb	sy
 8006936:	61fb      	str	r3, [r7, #28]
    }
 8006938:	bf00      	nop
 800693a:	e7fe      	b.n	800693a <xTaskGenericNotifyFromISR+0x136>
                    break;
 800693c:	bf00      	nop
 800693e:	e000      	b.n	8006942 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8006940:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006942:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006946:	2b01      	cmp	r3, #1
 8006948:	d145      	bne.n	80069d6 <xTaskGenericNotifyFromISR+0x1d2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800694a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00a      	beq.n	8006968 <xTaskGenericNotifyFromISR+0x164>
        __asm volatile
 8006952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006956:	f383 8811 	msr	BASEPRI, r3
 800695a:	f3bf 8f6f 	isb	sy
 800695e:	f3bf 8f4f 	dsb	sy
 8006962:	61bb      	str	r3, [r7, #24]
    }
 8006964:	bf00      	nop
 8006966:	e7fe      	b.n	8006966 <xTaskGenericNotifyFromISR+0x162>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006968:	4b21      	ldr	r3, [pc, #132]	; (80069f0 <xTaskGenericNotifyFromISR+0x1ec>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d11c      	bne.n	80069aa <xTaskGenericNotifyFromISR+0x1a6>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006972:	3304      	adds	r3, #4
 8006974:	4618      	mov	r0, r3
 8006976:	f7fe fa1d 	bl	8004db4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800697a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697e:	2201      	movs	r2, #1
 8006980:	409a      	lsls	r2, r3
 8006982:	4b1c      	ldr	r3, [pc, #112]	; (80069f4 <xTaskGenericNotifyFromISR+0x1f0>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4313      	orrs	r3, r2
 8006988:	4a1a      	ldr	r2, [pc, #104]	; (80069f4 <xTaskGenericNotifyFromISR+0x1f0>)
 800698a:	6013      	str	r3, [r2, #0]
 800698c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006990:	4613      	mov	r3, r2
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	4413      	add	r3, r2
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	4a17      	ldr	r2, [pc, #92]	; (80069f8 <xTaskGenericNotifyFromISR+0x1f4>)
 800699a:	441a      	add	r2, r3
 800699c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800699e:	3304      	adds	r3, #4
 80069a0:	4619      	mov	r1, r3
 80069a2:	4610      	mov	r0, r2
 80069a4:	f7fe f9a9 	bl	8004cfa <vListInsertEnd>
 80069a8:	e005      	b.n	80069b6 <xTaskGenericNotifyFromISR+0x1b2>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80069aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ac:	3318      	adds	r3, #24
 80069ae:	4619      	mov	r1, r3
 80069b0:	4812      	ldr	r0, [pc, #72]	; (80069fc <xTaskGenericNotifyFromISR+0x1f8>)
 80069b2:	f7fe f9a2 	bl	8004cfa <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80069b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ba:	4b11      	ldr	r3, [pc, #68]	; (8006a00 <xTaskGenericNotifyFromISR+0x1fc>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d908      	bls.n	80069d6 <xTaskGenericNotifyFromISR+0x1d2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 80069c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d002      	beq.n	80069d0 <xTaskGenericNotifyFromISR+0x1cc>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 80069ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069cc:	2201      	movs	r2, #1
 80069ce:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 80069d0:	4b0c      	ldr	r3, [pc, #48]	; (8006a04 <xTaskGenericNotifyFromISR+0x200>)
 80069d2:	2201      	movs	r2, #1
 80069d4:	601a      	str	r2, [r3, #0]
 80069d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069d8:	617b      	str	r3, [r7, #20]
        __asm volatile
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	f383 8811 	msr	BASEPRI, r3
    }
 80069e0:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 80069e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 80069e4:	4618      	mov	r0, r3
 80069e6:	3740      	adds	r7, #64	; 0x40
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	20000308 	.word	0x20000308
 80069f0:	2000032c 	.word	0x2000032c
 80069f4:	2000030c 	.word	0x2000030c
 80069f8:	20000230 	.word	0x20000230
 80069fc:	200002c4 	.word	0x200002c4
 8006a00:	2000022c 	.word	0x2000022c
 8006a04:	20000318 	.word	0x20000318

08006a08 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8006a12:	4b29      	ldr	r3, [pc, #164]	; (8006ab8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a18:	4b28      	ldr	r3, [pc, #160]	; (8006abc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	3304      	adds	r3, #4
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7fe f9c8 	bl	8004db4 <uxListRemove>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d10b      	bne.n	8006a42 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006a2a:	4b24      	ldr	r3, [pc, #144]	; (8006abc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a30:	2201      	movs	r2, #1
 8006a32:	fa02 f303 	lsl.w	r3, r2, r3
 8006a36:	43da      	mvns	r2, r3
 8006a38:	4b21      	ldr	r3, [pc, #132]	; (8006ac0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	4a20      	ldr	r2, [pc, #128]	; (8006ac0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006a40:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a48:	d10a      	bne.n	8006a60 <prvAddCurrentTaskToDelayedList+0x58>
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d007      	beq.n	8006a60 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a50:	4b1a      	ldr	r3, [pc, #104]	; (8006abc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	3304      	adds	r3, #4
 8006a56:	4619      	mov	r1, r3
 8006a58:	481a      	ldr	r0, [pc, #104]	; (8006ac4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006a5a:	f7fe f94e 	bl	8004cfa <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8006a5e:	e026      	b.n	8006aae <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4413      	add	r3, r2
 8006a66:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a68:	4b14      	ldr	r3, [pc, #80]	; (8006abc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68ba      	ldr	r2, [r7, #8]
 8006a6e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8006a70:	68ba      	ldr	r2, [r7, #8]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d209      	bcs.n	8006a8c <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a78:	4b13      	ldr	r3, [pc, #76]	; (8006ac8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	4b0f      	ldr	r3, [pc, #60]	; (8006abc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	3304      	adds	r3, #4
 8006a82:	4619      	mov	r1, r3
 8006a84:	4610      	mov	r0, r2
 8006a86:	f7fe f95c 	bl	8004d42 <vListInsert>
}
 8006a8a:	e010      	b.n	8006aae <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a8c:	4b0f      	ldr	r3, [pc, #60]	; (8006acc <prvAddCurrentTaskToDelayedList+0xc4>)
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	4b0a      	ldr	r3, [pc, #40]	; (8006abc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	3304      	adds	r3, #4
 8006a96:	4619      	mov	r1, r3
 8006a98:	4610      	mov	r0, r2
 8006a9a:	f7fe f952 	bl	8004d42 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8006a9e:	4b0c      	ldr	r3, [pc, #48]	; (8006ad0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68ba      	ldr	r2, [r7, #8]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d202      	bcs.n	8006aae <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8006aa8:	4a09      	ldr	r2, [pc, #36]	; (8006ad0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	6013      	str	r3, [r2, #0]
}
 8006aae:	bf00      	nop
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	20000308 	.word	0x20000308
 8006abc:	2000022c 	.word	0x2000022c
 8006ac0:	2000030c 	.word	0x2000030c
 8006ac4:	200002f0 	.word	0x200002f0
 8006ac8:	200002c0 	.word	0x200002c0
 8006acc:	200002bc 	.word	0x200002bc
 8006ad0:	20000324 	.word	0x20000324

08006ad4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8006ada:	2300      	movs	r3, #0
 8006adc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8006ade:	f000 fb31 	bl	8007144 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8006ae2:	4b11      	ldr	r3, [pc, #68]	; (8006b28 <xTimerCreateTimerTask+0x54>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00b      	beq.n	8006b02 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8006aea:	4b10      	ldr	r3, [pc, #64]	; (8006b2c <xTimerCreateTimerTask+0x58>)
 8006aec:	9301      	str	r3, [sp, #4]
 8006aee:	2302      	movs	r3, #2
 8006af0:	9300      	str	r3, [sp, #0]
 8006af2:	2300      	movs	r3, #0
 8006af4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006af8:	490d      	ldr	r1, [pc, #52]	; (8006b30 <xTimerCreateTimerTask+0x5c>)
 8006afa:	480e      	ldr	r0, [pc, #56]	; (8006b34 <xTimerCreateTimerTask+0x60>)
 8006afc:	f7fe ff38 	bl	8005970 <xTaskCreate>
 8006b00:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d10a      	bne.n	8006b1e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8006b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b0c:	f383 8811 	msr	BASEPRI, r3
 8006b10:	f3bf 8f6f 	isb	sy
 8006b14:	f3bf 8f4f 	dsb	sy
 8006b18:	603b      	str	r3, [r7, #0]
    }
 8006b1a:	bf00      	nop
 8006b1c:	e7fe      	b.n	8006b1c <xTimerCreateTimerTask+0x48>
        return xReturn;
 8006b1e:	687b      	ldr	r3, [r7, #4]
    }
 8006b20:	4618      	mov	r0, r3
 8006b22:	3708      	adds	r7, #8
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	20000360 	.word	0x20000360
 8006b2c:	20000364 	.word	0x20000364
 8006b30:	0800920c 	.word	0x0800920c
 8006b34:	08006d25 	.word	0x08006d25

08006b38 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b088      	sub	sp, #32
 8006b3c:	af02      	add	r7, sp, #8
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	607a      	str	r2, [r7, #4]
 8006b44:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006b46:	202c      	movs	r0, #44	; 0x2c
 8006b48:	f000 fdd0 	bl	80076ec <pvPortMalloc>
 8006b4c:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d00d      	beq.n	8006b70 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	9301      	str	r3, [sp, #4]
 8006b60:	6a3b      	ldr	r3, [r7, #32]
 8006b62:	9300      	str	r3, [sp, #0]
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	68b9      	ldr	r1, [r7, #8]
 8006b6a:	68f8      	ldr	r0, [r7, #12]
 8006b6c:	f000 f805 	bl	8006b7a <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8006b70:	697b      	ldr	r3, [r7, #20]
        }
 8006b72:	4618      	mov	r0, r3
 8006b74:	3718      	adds	r7, #24
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b086      	sub	sp, #24
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	60f8      	str	r0, [r7, #12]
 8006b82:	60b9      	str	r1, [r7, #8]
 8006b84:	607a      	str	r2, [r7, #4]
 8006b86:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d10a      	bne.n	8006ba4 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8006b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b92:	f383 8811 	msr	BASEPRI, r3
 8006b96:	f3bf 8f6f 	isb	sy
 8006b9a:	f3bf 8f4f 	dsb	sy
 8006b9e:	617b      	str	r3, [r7, #20]
    }
 8006ba0:	bf00      	nop
 8006ba2:	e7fe      	b.n	8006ba2 <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d01e      	beq.n	8006be8 <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 8006baa:	f000 facb 	bl	8007144 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 8006bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb6:	68ba      	ldr	r2, [r7, #8]
 8006bb8:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 8006bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbc:	683a      	ldr	r2, [r7, #0]
 8006bbe:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc2:	6a3a      	ldr	r2, [r7, #32]
 8006bc4:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc8:	3304      	adds	r3, #4
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f7fe f888 	bl	8004ce0 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d008      	beq.n	8006be8 <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bdc:	f043 0304 	orr.w	r3, r3, #4
 8006be0:	b2da      	uxtb	r2, r3
 8006be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 8006be8:	bf00      	nop
 8006bea:	3718      	adds	r7, #24
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b08a      	sub	sp, #40	; 0x28
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	607a      	str	r2, [r7, #4]
 8006bfc:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d10a      	bne.n	8006c1e <xTimerGenericCommand+0x2e>
        __asm volatile
 8006c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0c:	f383 8811 	msr	BASEPRI, r3
 8006c10:	f3bf 8f6f 	isb	sy
 8006c14:	f3bf 8f4f 	dsb	sy
 8006c18:	623b      	str	r3, [r7, #32]
    }
 8006c1a:	bf00      	nop
 8006c1c:	e7fe      	b.n	8006c1c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8006c1e:	4b1a      	ldr	r3, [pc, #104]	; (8006c88 <xTimerGenericCommand+0x98>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d02a      	beq.n	8006c7c <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	2b05      	cmp	r3, #5
 8006c36:	dc18      	bgt.n	8006c6a <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006c38:	f7ff fbec 	bl	8006414 <xTaskGetSchedulerState>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	d109      	bne.n	8006c56 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006c42:	4b11      	ldr	r3, [pc, #68]	; (8006c88 <xTimerGenericCommand+0x98>)
 8006c44:	6818      	ldr	r0, [r3, #0]
 8006c46:	f107 0114 	add.w	r1, r7, #20
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c4e:	f7fe f9c5 	bl	8004fdc <xQueueGenericSend>
 8006c52:	6278      	str	r0, [r7, #36]	; 0x24
 8006c54:	e012      	b.n	8006c7c <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006c56:	4b0c      	ldr	r3, [pc, #48]	; (8006c88 <xTimerGenericCommand+0x98>)
 8006c58:	6818      	ldr	r0, [r3, #0]
 8006c5a:	f107 0114 	add.w	r1, r7, #20
 8006c5e:	2300      	movs	r3, #0
 8006c60:	2200      	movs	r2, #0
 8006c62:	f7fe f9bb 	bl	8004fdc <xQueueGenericSend>
 8006c66:	6278      	str	r0, [r7, #36]	; 0x24
 8006c68:	e008      	b.n	8006c7c <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006c6a:	4b07      	ldr	r3, [pc, #28]	; (8006c88 <xTimerGenericCommand+0x98>)
 8006c6c:	6818      	ldr	r0, [r3, #0]
 8006c6e:	f107 0114 	add.w	r1, r7, #20
 8006c72:	2300      	movs	r3, #0
 8006c74:	683a      	ldr	r2, [r7, #0]
 8006c76:	f7fe faaf 	bl	80051d8 <xQueueGenericSendFromISR>
 8006c7a:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3728      	adds	r7, #40	; 0x28
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	20000360 	.word	0x20000360

08006c8c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b088      	sub	sp, #32
 8006c90:	af02      	add	r7, sp, #8
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c96:	4b22      	ldr	r3, [pc, #136]	; (8006d20 <prvProcessExpiredTimer+0x94>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	3304      	adds	r3, #4
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7fe f885 	bl	8004db4 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cb0:	f003 0304 	and.w	r3, r3, #4
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d022      	beq.n	8006cfe <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	699a      	ldr	r2, [r3, #24]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	18d1      	adds	r1, r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	683a      	ldr	r2, [r7, #0]
 8006cc4:	6978      	ldr	r0, [r7, #20]
 8006cc6:	f000 f8d1 	bl	8006e6c <prvInsertTimerInActiveList>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d01f      	beq.n	8006d10 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	9300      	str	r3, [sp, #0]
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	2100      	movs	r1, #0
 8006cda:	6978      	ldr	r0, [r7, #20]
 8006cdc:	f7ff ff88 	bl	8006bf0 <xTimerGenericCommand>
 8006ce0:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d113      	bne.n	8006d10 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8006ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cec:	f383 8811 	msr	BASEPRI, r3
 8006cf0:	f3bf 8f6f 	isb	sy
 8006cf4:	f3bf 8f4f 	dsb	sy
 8006cf8:	60fb      	str	r3, [r7, #12]
    }
 8006cfa:	bf00      	nop
 8006cfc:	e7fe      	b.n	8006cfc <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d04:	f023 0301 	bic.w	r3, r3, #1
 8006d08:	b2da      	uxtb	r2, r3
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	6a1b      	ldr	r3, [r3, #32]
 8006d14:	6978      	ldr	r0, [r7, #20]
 8006d16:	4798      	blx	r3
    }
 8006d18:	bf00      	nop
 8006d1a:	3718      	adds	r7, #24
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	20000358 	.word	0x20000358

08006d24 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d2c:	f107 0308 	add.w	r3, r7, #8
 8006d30:	4618      	mov	r0, r3
 8006d32:	f000 f857 	bl	8006de4 <prvGetNextExpireTime>
 8006d36:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	68f8      	ldr	r0, [r7, #12]
 8006d3e:	f000 f803 	bl	8006d48 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8006d42:	f000 f8d5 	bl	8006ef0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d46:	e7f1      	b.n	8006d2c <prvTimerTask+0x8>

08006d48 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8006d52:	f7fe ffa5 	bl	8005ca0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d56:	f107 0308 	add.w	r3, r7, #8
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f000 f866 	bl	8006e2c <prvSampleTimeNow>
 8006d60:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d130      	bne.n	8006dca <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d10a      	bne.n	8006d84 <prvProcessTimerOrBlockTask+0x3c>
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d806      	bhi.n	8006d84 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8006d76:	f7fe ffa1 	bl	8005cbc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006d7a:	68f9      	ldr	r1, [r7, #12]
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f7ff ff85 	bl	8006c8c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8006d82:	e024      	b.n	8006dce <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d008      	beq.n	8006d9c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006d8a:	4b13      	ldr	r3, [pc, #76]	; (8006dd8 <prvProcessTimerOrBlockTask+0x90>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d101      	bne.n	8006d98 <prvProcessTimerOrBlockTask+0x50>
 8006d94:	2301      	movs	r3, #1
 8006d96:	e000      	b.n	8006d9a <prvProcessTimerOrBlockTask+0x52>
 8006d98:	2300      	movs	r3, #0
 8006d9a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006d9c:	4b0f      	ldr	r3, [pc, #60]	; (8006ddc <prvProcessTimerOrBlockTask+0x94>)
 8006d9e:	6818      	ldr	r0, [r3, #0]
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	683a      	ldr	r2, [r7, #0]
 8006da8:	4619      	mov	r1, r3
 8006daa:	f7fe fdad 	bl	8005908 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006dae:	f7fe ff85 	bl	8005cbc <xTaskResumeAll>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d10a      	bne.n	8006dce <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8006db8:	4b09      	ldr	r3, [pc, #36]	; (8006de0 <prvProcessTimerOrBlockTask+0x98>)
 8006dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dbe:	601a      	str	r2, [r3, #0]
 8006dc0:	f3bf 8f4f 	dsb	sy
 8006dc4:	f3bf 8f6f 	isb	sy
    }
 8006dc8:	e001      	b.n	8006dce <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8006dca:	f7fe ff77 	bl	8005cbc <xTaskResumeAll>
    }
 8006dce:	bf00      	nop
 8006dd0:	3710      	adds	r7, #16
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	2000035c 	.word	0x2000035c
 8006ddc:	20000360 	.word	0x20000360
 8006de0:	e000ed04 	.word	0xe000ed04

08006de4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8006de4:	b480      	push	{r7}
 8006de6:	b085      	sub	sp, #20
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006dec:	4b0e      	ldr	r3, [pc, #56]	; (8006e28 <prvGetNextExpireTime+0x44>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d101      	bne.n	8006dfa <prvGetNextExpireTime+0x16>
 8006df6:	2201      	movs	r2, #1
 8006df8:	e000      	b.n	8006dfc <prvGetNextExpireTime+0x18>
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d105      	bne.n	8006e14 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e08:	4b07      	ldr	r3, [pc, #28]	; (8006e28 <prvGetNextExpireTime+0x44>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	60fb      	str	r3, [r7, #12]
 8006e12:	e001      	b.n	8006e18 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8006e14:	2300      	movs	r3, #0
 8006e16:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8006e18:	68fb      	ldr	r3, [r7, #12]
    }
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3714      	adds	r7, #20
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop
 8006e28:	20000358 	.word	0x20000358

08006e2c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8006e34:	f7fe ffde 	bl	8005df4 <xTaskGetTickCount>
 8006e38:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8006e3a:	4b0b      	ldr	r3, [pc, #44]	; (8006e68 <prvSampleTimeNow+0x3c>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68fa      	ldr	r2, [r7, #12]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d205      	bcs.n	8006e50 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8006e44:	f000 f91a 	bl	800707c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	601a      	str	r2, [r3, #0]
 8006e4e:	e002      	b.n	8006e56 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8006e56:	4a04      	ldr	r2, [pc, #16]	; (8006e68 <prvSampleTimeNow+0x3c>)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
    }
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3710      	adds	r7, #16
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	20000368 	.word	0x20000368

08006e6c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b086      	sub	sp, #24
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	607a      	str	r2, [r7, #4]
 8006e78:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	68ba      	ldr	r2, [r7, #8]
 8006e82:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	68fa      	ldr	r2, [r7, #12]
 8006e88:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8006e8a:	68ba      	ldr	r2, [r7, #8]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d812      	bhi.n	8006eb8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	1ad2      	subs	r2, r2, r3
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	699b      	ldr	r3, [r3, #24]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d302      	bcc.n	8006ea6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	617b      	str	r3, [r7, #20]
 8006ea4:	e01b      	b.n	8006ede <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006ea6:	4b10      	ldr	r3, [pc, #64]	; (8006ee8 <prvInsertTimerInActiveList+0x7c>)
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	3304      	adds	r3, #4
 8006eae:	4619      	mov	r1, r3
 8006eb0:	4610      	mov	r0, r2
 8006eb2:	f7fd ff46 	bl	8004d42 <vListInsert>
 8006eb6:	e012      	b.n	8006ede <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d206      	bcs.n	8006ece <prvInsertTimerInActiveList+0x62>
 8006ec0:	68ba      	ldr	r2, [r7, #8]
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d302      	bcc.n	8006ece <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	617b      	str	r3, [r7, #20]
 8006ecc:	e007      	b.n	8006ede <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ece:	4b07      	ldr	r3, [pc, #28]	; (8006eec <prvInsertTimerInActiveList+0x80>)
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	3304      	adds	r3, #4
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	4610      	mov	r0, r2
 8006eda:	f7fd ff32 	bl	8004d42 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8006ede:	697b      	ldr	r3, [r7, #20]
    }
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3718      	adds	r7, #24
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	2000035c 	.word	0x2000035c
 8006eec:	20000358 	.word	0x20000358

08006ef0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b08c      	sub	sp, #48	; 0x30
 8006ef4:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ef6:	e0ae      	b.n	8007056 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	f2c0 80aa 	blt.w	8007054 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f06:	695b      	ldr	r3, [r3, #20]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d004      	beq.n	8006f16 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0e:	3304      	adds	r3, #4
 8006f10:	4618      	mov	r0, r3
 8006f12:	f7fd ff4f 	bl	8004db4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f16:	1d3b      	adds	r3, r7, #4
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f7ff ff87 	bl	8006e2c <prvSampleTimeNow>
 8006f1e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	2b09      	cmp	r3, #9
 8006f24:	f200 8097 	bhi.w	8007056 <prvProcessReceivedCommands+0x166>
 8006f28:	a201      	add	r2, pc, #4	; (adr r2, 8006f30 <prvProcessReceivedCommands+0x40>)
 8006f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f2e:	bf00      	nop
 8006f30:	08006f59 	.word	0x08006f59
 8006f34:	08006f59 	.word	0x08006f59
 8006f38:	08006f59 	.word	0x08006f59
 8006f3c:	08006fcd 	.word	0x08006fcd
 8006f40:	08006fe1 	.word	0x08006fe1
 8006f44:	0800702b 	.word	0x0800702b
 8006f48:	08006f59 	.word	0x08006f59
 8006f4c:	08006f59 	.word	0x08006f59
 8006f50:	08006fcd 	.word	0x08006fcd
 8006f54:	08006fe1 	.word	0x08006fe1
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f5e:	f043 0301 	orr.w	r3, r3, #1
 8006f62:	b2da      	uxtb	r2, r3
 8006f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6e:	699b      	ldr	r3, [r3, #24]
 8006f70:	18d1      	adds	r1, r2, r3
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6a3a      	ldr	r2, [r7, #32]
 8006f76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f78:	f7ff ff78 	bl	8006e6c <prvInsertTimerInActiveList>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d069      	beq.n	8007056 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f84:	6a1b      	ldr	r3, [r3, #32]
 8006f86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f88:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f90:	f003 0304 	and.w	r3, r3, #4
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d05e      	beq.n	8007056 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006f98:	68fa      	ldr	r2, [r7, #12]
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	441a      	add	r2, r3
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	9300      	str	r3, [sp, #0]
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006faa:	f7ff fe21 	bl	8006bf0 <xTimerGenericCommand>
 8006fae:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d14f      	bne.n	8007056 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8006fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fba:	f383 8811 	msr	BASEPRI, r3
 8006fbe:	f3bf 8f6f 	isb	sy
 8006fc2:	f3bf 8f4f 	dsb	sy
 8006fc6:	61bb      	str	r3, [r7, #24]
    }
 8006fc8:	bf00      	nop
 8006fca:	e7fe      	b.n	8006fca <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fd2:	f023 0301 	bic.w	r3, r3, #1
 8006fd6:	b2da      	uxtb	r2, r3
 8006fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8006fde:	e03a      	b.n	8007056 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fe6:	f043 0301 	orr.w	r3, r3, #1
 8006fea:	b2da      	uxtb	r2, r3
 8006fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006ff2:	68fa      	ldr	r2, [r7, #12]
 8006ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffa:	699b      	ldr	r3, [r3, #24]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d10a      	bne.n	8007016 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8007000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007004:	f383 8811 	msr	BASEPRI, r3
 8007008:	f3bf 8f6f 	isb	sy
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	617b      	str	r3, [r7, #20]
    }
 8007012:	bf00      	nop
 8007014:	e7fe      	b.n	8007014 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007018:	699a      	ldr	r2, [r3, #24]
 800701a:	6a3b      	ldr	r3, [r7, #32]
 800701c:	18d1      	adds	r1, r2, r3
 800701e:	6a3b      	ldr	r3, [r7, #32]
 8007020:	6a3a      	ldr	r2, [r7, #32]
 8007022:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007024:	f7ff ff22 	bl	8006e6c <prvInsertTimerInActiveList>
                        break;
 8007028:	e015      	b.n	8007056 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800702a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007030:	f003 0302 	and.w	r3, r3, #2
 8007034:	2b00      	cmp	r3, #0
 8007036:	d103      	bne.n	8007040 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8007038:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800703a:	f000 fc37 	bl	80078ac <vPortFree>
 800703e:	e00a      	b.n	8007056 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007042:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007046:	f023 0301 	bic.w	r3, r3, #1
 800704a:	b2da      	uxtb	r2, r3
 800704c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8007052:	e000      	b.n	8007056 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8007054:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007056:	4b08      	ldr	r3, [pc, #32]	; (8007078 <prvProcessReceivedCommands+0x188>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f107 0108 	add.w	r1, r7, #8
 800705e:	2200      	movs	r2, #0
 8007060:	4618      	mov	r0, r3
 8007062:	f7fe f963 	bl	800532c <xQueueReceive>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	f47f af45 	bne.w	8006ef8 <prvProcessReceivedCommands+0x8>
        }
    }
 800706e:	bf00      	nop
 8007070:	bf00      	nop
 8007072:	3728      	adds	r7, #40	; 0x28
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}
 8007078:	20000360 	.word	0x20000360

0800707c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800707c:	b580      	push	{r7, lr}
 800707e:	b088      	sub	sp, #32
 8007080:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007082:	e048      	b.n	8007116 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007084:	4b2d      	ldr	r3, [pc, #180]	; (800713c <prvSwitchTimerLists+0xc0>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800708e:	4b2b      	ldr	r3, [pc, #172]	; (800713c <prvSwitchTimerLists+0xc0>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	3304      	adds	r3, #4
 800709c:	4618      	mov	r0, r3
 800709e:	f7fd fe89 	bl	8004db4 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6a1b      	ldr	r3, [r3, #32]
 80070a6:	68f8      	ldr	r0, [r7, #12]
 80070a8:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070b0:	f003 0304 	and.w	r3, r3, #4
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d02e      	beq.n	8007116 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	699b      	ldr	r3, [r3, #24]
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	4413      	add	r3, r2
 80070c0:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80070c2:	68ba      	ldr	r2, [r7, #8]
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d90e      	bls.n	80070e8 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80070d6:	4b19      	ldr	r3, [pc, #100]	; (800713c <prvSwitchTimerLists+0xc0>)
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	3304      	adds	r3, #4
 80070de:	4619      	mov	r1, r3
 80070e0:	4610      	mov	r0, r2
 80070e2:	f7fd fe2e 	bl	8004d42 <vListInsert>
 80070e6:	e016      	b.n	8007116 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80070e8:	2300      	movs	r3, #0
 80070ea:	9300      	str	r3, [sp, #0]
 80070ec:	2300      	movs	r3, #0
 80070ee:	693a      	ldr	r2, [r7, #16]
 80070f0:	2100      	movs	r1, #0
 80070f2:	68f8      	ldr	r0, [r7, #12]
 80070f4:	f7ff fd7c 	bl	8006bf0 <xTimerGenericCommand>
 80070f8:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d10a      	bne.n	8007116 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8007100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007104:	f383 8811 	msr	BASEPRI, r3
 8007108:	f3bf 8f6f 	isb	sy
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	603b      	str	r3, [r7, #0]
    }
 8007112:	bf00      	nop
 8007114:	e7fe      	b.n	8007114 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007116:	4b09      	ldr	r3, [pc, #36]	; (800713c <prvSwitchTimerLists+0xc0>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d1b1      	bne.n	8007084 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8007120:	4b06      	ldr	r3, [pc, #24]	; (800713c <prvSwitchTimerLists+0xc0>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8007126:	4b06      	ldr	r3, [pc, #24]	; (8007140 <prvSwitchTimerLists+0xc4>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a04      	ldr	r2, [pc, #16]	; (800713c <prvSwitchTimerLists+0xc0>)
 800712c:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800712e:	4a04      	ldr	r2, [pc, #16]	; (8007140 <prvSwitchTimerLists+0xc4>)
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	6013      	str	r3, [r2, #0]
    }
 8007134:	bf00      	nop
 8007136:	3718      	adds	r7, #24
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}
 800713c:	20000358 	.word	0x20000358
 8007140:	2000035c 	.word	0x2000035c

08007144 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8007144:	b580      	push	{r7, lr}
 8007146:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8007148:	f000 f9ae 	bl	80074a8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800714c:	4b12      	ldr	r3, [pc, #72]	; (8007198 <prvCheckForValidListAndQueue+0x54>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d11d      	bne.n	8007190 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8007154:	4811      	ldr	r0, [pc, #68]	; (800719c <prvCheckForValidListAndQueue+0x58>)
 8007156:	f7fd fda3 	bl	8004ca0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800715a:	4811      	ldr	r0, [pc, #68]	; (80071a0 <prvCheckForValidListAndQueue+0x5c>)
 800715c:	f7fd fda0 	bl	8004ca0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8007160:	4b10      	ldr	r3, [pc, #64]	; (80071a4 <prvCheckForValidListAndQueue+0x60>)
 8007162:	4a0e      	ldr	r2, [pc, #56]	; (800719c <prvCheckForValidListAndQueue+0x58>)
 8007164:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8007166:	4b10      	ldr	r3, [pc, #64]	; (80071a8 <prvCheckForValidListAndQueue+0x64>)
 8007168:	4a0d      	ldr	r2, [pc, #52]	; (80071a0 <prvCheckForValidListAndQueue+0x5c>)
 800716a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800716c:	2200      	movs	r2, #0
 800716e:	210c      	movs	r1, #12
 8007170:	200a      	movs	r0, #10
 8007172:	f7fd feb1 	bl	8004ed8 <xQueueGenericCreate>
 8007176:	4603      	mov	r3, r0
 8007178:	4a07      	ldr	r2, [pc, #28]	; (8007198 <prvCheckForValidListAndQueue+0x54>)
 800717a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800717c:	4b06      	ldr	r3, [pc, #24]	; (8007198 <prvCheckForValidListAndQueue+0x54>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d005      	beq.n	8007190 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007184:	4b04      	ldr	r3, [pc, #16]	; (8007198 <prvCheckForValidListAndQueue+0x54>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4908      	ldr	r1, [pc, #32]	; (80071ac <prvCheckForValidListAndQueue+0x68>)
 800718a:	4618      	mov	r0, r3
 800718c:	f7fe fb92 	bl	80058b4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007190:	f000 f9ba 	bl	8007508 <vPortExitCritical>
    }
 8007194:	bf00      	nop
 8007196:	bd80      	pop	{r7, pc}
 8007198:	20000360 	.word	0x20000360
 800719c:	20000330 	.word	0x20000330
 80071a0:	20000344 	.word	0x20000344
 80071a4:	20000358 	.word	0x20000358
 80071a8:	2000035c 	.word	0x2000035c
 80071ac:	08009214 	.word	0x08009214

080071b0 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

    BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
    {
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b086      	sub	sp, #24
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Timer_t * pxTimer = xTimer;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	613b      	str	r3, [r7, #16]

        configASSERT( xTimer );
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d10a      	bne.n	80071d8 <xTimerIsTimerActive+0x28>
        __asm volatile
 80071c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c6:	f383 8811 	msr	BASEPRI, r3
 80071ca:	f3bf 8f6f 	isb	sy
 80071ce:	f3bf 8f4f 	dsb	sy
 80071d2:	60fb      	str	r3, [r7, #12]
    }
 80071d4:	bf00      	nop
 80071d6:	e7fe      	b.n	80071d6 <xTimerIsTimerActive+0x26>

        /* Is the timer in the list of active timers? */
        taskENTER_CRITICAL();
 80071d8:	f000 f966 	bl	80074a8 <vPortEnterCritical>
        {
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071e2:	f003 0301 	and.w	r3, r3, #1
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d102      	bne.n	80071f0 <xTimerIsTimerActive+0x40>
            {
                xReturn = pdFALSE;
 80071ea:	2300      	movs	r3, #0
 80071ec:	617b      	str	r3, [r7, #20]
 80071ee:	e001      	b.n	80071f4 <xTimerIsTimerActive+0x44>
            }
            else
            {
                xReturn = pdTRUE;
 80071f0:	2301      	movs	r3, #1
 80071f2:	617b      	str	r3, [r7, #20]
            }
        }
        taskEXIT_CRITICAL();
 80071f4:	f000 f988 	bl	8007508 <vPortExitCritical>

        return xReturn;
 80071f8:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 Can't be pointer to const due to the typedef. */
 80071fa:	4618      	mov	r0, r3
 80071fc:	3718      	adds	r7, #24
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}

08007202 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8007202:	b580      	push	{r7, lr}
 8007204:	b086      	sub	sp, #24
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d10a      	bne.n	800722a <pvTimerGetTimerID+0x28>
        __asm volatile
 8007214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007218:	f383 8811 	msr	BASEPRI, r3
 800721c:	f3bf 8f6f 	isb	sy
 8007220:	f3bf 8f4f 	dsb	sy
 8007224:	60fb      	str	r3, [r7, #12]
    }
 8007226:	bf00      	nop
 8007228:	e7fe      	b.n	8007228 <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 800722a:	f000 f93d 	bl	80074a8 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	69db      	ldr	r3, [r3, #28]
 8007232:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 8007234:	f000 f968 	bl	8007508 <vPortExitCritical>

        return pvReturn;
 8007238:	693b      	ldr	r3, [r7, #16]
    }
 800723a:	4618      	mov	r0, r3
 800723c:	3718      	adds	r7, #24
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
	...

08007244 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	3b04      	subs	r3, #4
 8007254:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800725c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	3b04      	subs	r3, #4
 8007262:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	f023 0201 	bic.w	r2, r3, #1
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	3b04      	subs	r3, #4
 8007272:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8007274:	4a0c      	ldr	r2, [pc, #48]	; (80072a8 <pxPortInitialiseStack+0x64>)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	3b14      	subs	r3, #20
 800727e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	3b04      	subs	r3, #4
 800728a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f06f 0202 	mvn.w	r2, #2
 8007292:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	3b20      	subs	r3, #32
 8007298:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800729a:	68fb      	ldr	r3, [r7, #12]
}
 800729c:	4618      	mov	r0, r3
 800729e:	3714      	adds	r7, #20
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr
 80072a8:	080072ad 	.word	0x080072ad

080072ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80072b2:	2300      	movs	r3, #0
 80072b4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80072b6:	4b12      	ldr	r3, [pc, #72]	; (8007300 <prvTaskExitError+0x54>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072be:	d00a      	beq.n	80072d6 <prvTaskExitError+0x2a>
        __asm volatile
 80072c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c4:	f383 8811 	msr	BASEPRI, r3
 80072c8:	f3bf 8f6f 	isb	sy
 80072cc:	f3bf 8f4f 	dsb	sy
 80072d0:	60fb      	str	r3, [r7, #12]
    }
 80072d2:	bf00      	nop
 80072d4:	e7fe      	b.n	80072d4 <prvTaskExitError+0x28>
        __asm volatile
 80072d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072da:	f383 8811 	msr	BASEPRI, r3
 80072de:	f3bf 8f6f 	isb	sy
 80072e2:	f3bf 8f4f 	dsb	sy
 80072e6:	60bb      	str	r3, [r7, #8]
    }
 80072e8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80072ea:	bf00      	nop
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d0fc      	beq.n	80072ec <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80072f2:	bf00      	nop
 80072f4:	bf00      	nop
 80072f6:	3714      	adds	r7, #20
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr
 8007300:	20000024 	.word	0x20000024
	...

08007310 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007310:	4b07      	ldr	r3, [pc, #28]	; (8007330 <pxCurrentTCBConst2>)
 8007312:	6819      	ldr	r1, [r3, #0]
 8007314:	6808      	ldr	r0, [r1, #0]
 8007316:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800731a:	f380 8809 	msr	PSP, r0
 800731e:	f3bf 8f6f 	isb	sy
 8007322:	f04f 0000 	mov.w	r0, #0
 8007326:	f380 8811 	msr	BASEPRI, r0
 800732a:	4770      	bx	lr
 800732c:	f3af 8000 	nop.w

08007330 <pxCurrentTCBConst2>:
 8007330:	2000022c 	.word	0x2000022c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8007334:	bf00      	nop
 8007336:	bf00      	nop

08007338 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8007338:	4808      	ldr	r0, [pc, #32]	; (800735c <prvPortStartFirstTask+0x24>)
 800733a:	6800      	ldr	r0, [r0, #0]
 800733c:	6800      	ldr	r0, [r0, #0]
 800733e:	f380 8808 	msr	MSP, r0
 8007342:	f04f 0000 	mov.w	r0, #0
 8007346:	f380 8814 	msr	CONTROL, r0
 800734a:	b662      	cpsie	i
 800734c:	b661      	cpsie	f
 800734e:	f3bf 8f4f 	dsb	sy
 8007352:	f3bf 8f6f 	isb	sy
 8007356:	df00      	svc	0
 8007358:	bf00      	nop
 800735a:	0000      	.short	0x0000
 800735c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8007360:	bf00      	nop
 8007362:	bf00      	nop

08007364 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b086      	sub	sp, #24
 8007368:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800736a:	4b46      	ldr	r3, [pc, #280]	; (8007484 <xPortStartScheduler+0x120>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a46      	ldr	r2, [pc, #280]	; (8007488 <xPortStartScheduler+0x124>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d10a      	bne.n	800738a <xPortStartScheduler+0x26>
        __asm volatile
 8007374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007378:	f383 8811 	msr	BASEPRI, r3
 800737c:	f3bf 8f6f 	isb	sy
 8007380:	f3bf 8f4f 	dsb	sy
 8007384:	613b      	str	r3, [r7, #16]
    }
 8007386:	bf00      	nop
 8007388:	e7fe      	b.n	8007388 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800738a:	4b3e      	ldr	r3, [pc, #248]	; (8007484 <xPortStartScheduler+0x120>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a3f      	ldr	r2, [pc, #252]	; (800748c <xPortStartScheduler+0x128>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d10a      	bne.n	80073aa <xPortStartScheduler+0x46>
        __asm volatile
 8007394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007398:	f383 8811 	msr	BASEPRI, r3
 800739c:	f3bf 8f6f 	isb	sy
 80073a0:	f3bf 8f4f 	dsb	sy
 80073a4:	60fb      	str	r3, [r7, #12]
    }
 80073a6:	bf00      	nop
 80073a8:	e7fe      	b.n	80073a8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80073aa:	4b39      	ldr	r3, [pc, #228]	; (8007490 <xPortStartScheduler+0x12c>)
 80073ac:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	22ff      	movs	r2, #255	; 0xff
 80073ba:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80073c4:	78fb      	ldrb	r3, [r7, #3]
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80073cc:	b2da      	uxtb	r2, r3
 80073ce:	4b31      	ldr	r3, [pc, #196]	; (8007494 <xPortStartScheduler+0x130>)
 80073d0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80073d2:	4b31      	ldr	r3, [pc, #196]	; (8007498 <xPortStartScheduler+0x134>)
 80073d4:	2207      	movs	r2, #7
 80073d6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80073d8:	e009      	b.n	80073ee <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80073da:	4b2f      	ldr	r3, [pc, #188]	; (8007498 <xPortStartScheduler+0x134>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	3b01      	subs	r3, #1
 80073e0:	4a2d      	ldr	r2, [pc, #180]	; (8007498 <xPortStartScheduler+0x134>)
 80073e2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80073e4:	78fb      	ldrb	r3, [r7, #3]
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	005b      	lsls	r3, r3, #1
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80073ee:	78fb      	ldrb	r3, [r7, #3]
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073f6:	2b80      	cmp	r3, #128	; 0x80
 80073f8:	d0ef      	beq.n	80073da <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80073fa:	4b27      	ldr	r3, [pc, #156]	; (8007498 <xPortStartScheduler+0x134>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f1c3 0307 	rsb	r3, r3, #7
 8007402:	2b04      	cmp	r3, #4
 8007404:	d00a      	beq.n	800741c <xPortStartScheduler+0xb8>
        __asm volatile
 8007406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800740a:	f383 8811 	msr	BASEPRI, r3
 800740e:	f3bf 8f6f 	isb	sy
 8007412:	f3bf 8f4f 	dsb	sy
 8007416:	60bb      	str	r3, [r7, #8]
    }
 8007418:	bf00      	nop
 800741a:	e7fe      	b.n	800741a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800741c:	4b1e      	ldr	r3, [pc, #120]	; (8007498 <xPortStartScheduler+0x134>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	021b      	lsls	r3, r3, #8
 8007422:	4a1d      	ldr	r2, [pc, #116]	; (8007498 <xPortStartScheduler+0x134>)
 8007424:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007426:	4b1c      	ldr	r3, [pc, #112]	; (8007498 <xPortStartScheduler+0x134>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800742e:	4a1a      	ldr	r2, [pc, #104]	; (8007498 <xPortStartScheduler+0x134>)
 8007430:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	b2da      	uxtb	r2, r3
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800743a:	4b18      	ldr	r3, [pc, #96]	; (800749c <xPortStartScheduler+0x138>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a17      	ldr	r2, [pc, #92]	; (800749c <xPortStartScheduler+0x138>)
 8007440:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007444:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8007446:	4b15      	ldr	r3, [pc, #84]	; (800749c <xPortStartScheduler+0x138>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a14      	ldr	r2, [pc, #80]	; (800749c <xPortStartScheduler+0x138>)
 800744c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007450:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007452:	f000 f8db 	bl	800760c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8007456:	4b12      	ldr	r3, [pc, #72]	; (80074a0 <xPortStartScheduler+0x13c>)
 8007458:	2200      	movs	r2, #0
 800745a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800745c:	f000 f8fa 	bl	8007654 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007460:	4b10      	ldr	r3, [pc, #64]	; (80074a4 <xPortStartScheduler+0x140>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a0f      	ldr	r2, [pc, #60]	; (80074a4 <xPortStartScheduler+0x140>)
 8007466:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800746a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800746c:	f7ff ff64 	bl	8007338 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007470:	f7fe fd88 	bl	8005f84 <vTaskSwitchContext>
    prvTaskExitError();
 8007474:	f7ff ff1a 	bl	80072ac <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8007478:	2300      	movs	r3, #0
}
 800747a:	4618      	mov	r0, r3
 800747c:	3718      	adds	r7, #24
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	e000ed00 	.word	0xe000ed00
 8007488:	410fc271 	.word	0x410fc271
 800748c:	410fc270 	.word	0x410fc270
 8007490:	e000e400 	.word	0xe000e400
 8007494:	2000036c 	.word	0x2000036c
 8007498:	20000370 	.word	0x20000370
 800749c:	e000ed20 	.word	0xe000ed20
 80074a0:	20000024 	.word	0x20000024
 80074a4:	e000ef34 	.word	0xe000ef34

080074a8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
        __asm volatile
 80074ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b2:	f383 8811 	msr	BASEPRI, r3
 80074b6:	f3bf 8f6f 	isb	sy
 80074ba:	f3bf 8f4f 	dsb	sy
 80074be:	607b      	str	r3, [r7, #4]
    }
 80074c0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80074c2:	4b0f      	ldr	r3, [pc, #60]	; (8007500 <vPortEnterCritical+0x58>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	3301      	adds	r3, #1
 80074c8:	4a0d      	ldr	r2, [pc, #52]	; (8007500 <vPortEnterCritical+0x58>)
 80074ca:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80074cc:	4b0c      	ldr	r3, [pc, #48]	; (8007500 <vPortEnterCritical+0x58>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d10f      	bne.n	80074f4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80074d4:	4b0b      	ldr	r3, [pc, #44]	; (8007504 <vPortEnterCritical+0x5c>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00a      	beq.n	80074f4 <vPortEnterCritical+0x4c>
        __asm volatile
 80074de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e2:	f383 8811 	msr	BASEPRI, r3
 80074e6:	f3bf 8f6f 	isb	sy
 80074ea:	f3bf 8f4f 	dsb	sy
 80074ee:	603b      	str	r3, [r7, #0]
    }
 80074f0:	bf00      	nop
 80074f2:	e7fe      	b.n	80074f2 <vPortEnterCritical+0x4a>
    }
}
 80074f4:	bf00      	nop
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr
 8007500:	20000024 	.word	0x20000024
 8007504:	e000ed04 	.word	0xe000ed04

08007508 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800750e:	4b12      	ldr	r3, [pc, #72]	; (8007558 <vPortExitCritical+0x50>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d10a      	bne.n	800752c <vPortExitCritical+0x24>
        __asm volatile
 8007516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751a:	f383 8811 	msr	BASEPRI, r3
 800751e:	f3bf 8f6f 	isb	sy
 8007522:	f3bf 8f4f 	dsb	sy
 8007526:	607b      	str	r3, [r7, #4]
    }
 8007528:	bf00      	nop
 800752a:	e7fe      	b.n	800752a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800752c:	4b0a      	ldr	r3, [pc, #40]	; (8007558 <vPortExitCritical+0x50>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	3b01      	subs	r3, #1
 8007532:	4a09      	ldr	r2, [pc, #36]	; (8007558 <vPortExitCritical+0x50>)
 8007534:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8007536:	4b08      	ldr	r3, [pc, #32]	; (8007558 <vPortExitCritical+0x50>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d105      	bne.n	800754a <vPortExitCritical+0x42>
 800753e:	2300      	movs	r3, #0
 8007540:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	f383 8811 	msr	BASEPRI, r3
    }
 8007548:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800754a:	bf00      	nop
 800754c:	370c      	adds	r7, #12
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr
 8007556:	bf00      	nop
 8007558:	20000024 	.word	0x20000024
 800755c:	00000000 	.word	0x00000000

08007560 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007560:	f3ef 8009 	mrs	r0, PSP
 8007564:	f3bf 8f6f 	isb	sy
 8007568:	4b15      	ldr	r3, [pc, #84]	; (80075c0 <pxCurrentTCBConst>)
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	f01e 0f10 	tst.w	lr, #16
 8007570:	bf08      	it	eq
 8007572:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007576:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800757a:	6010      	str	r0, [r2, #0]
 800757c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007580:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007584:	f380 8811 	msr	BASEPRI, r0
 8007588:	f3bf 8f4f 	dsb	sy
 800758c:	f3bf 8f6f 	isb	sy
 8007590:	f7fe fcf8 	bl	8005f84 <vTaskSwitchContext>
 8007594:	f04f 0000 	mov.w	r0, #0
 8007598:	f380 8811 	msr	BASEPRI, r0
 800759c:	bc09      	pop	{r0, r3}
 800759e:	6819      	ldr	r1, [r3, #0]
 80075a0:	6808      	ldr	r0, [r1, #0]
 80075a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075a6:	f01e 0f10 	tst.w	lr, #16
 80075aa:	bf08      	it	eq
 80075ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80075b0:	f380 8809 	msr	PSP, r0
 80075b4:	f3bf 8f6f 	isb	sy
 80075b8:	4770      	bx	lr
 80075ba:	bf00      	nop
 80075bc:	f3af 8000 	nop.w

080075c0 <pxCurrentTCBConst>:
 80075c0:	2000022c 	.word	0x2000022c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80075c4:	bf00      	nop
 80075c6:	bf00      	nop

080075c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
        __asm volatile
 80075ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d2:	f383 8811 	msr	BASEPRI, r3
 80075d6:	f3bf 8f6f 	isb	sy
 80075da:	f3bf 8f4f 	dsb	sy
 80075de:	607b      	str	r3, [r7, #4]
    }
 80075e0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80075e2:	f7fe fc17 	bl	8005e14 <xTaskIncrementTick>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d003      	beq.n	80075f4 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80075ec:	4b06      	ldr	r3, [pc, #24]	; (8007608 <SysTick_Handler+0x40>)
 80075ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075f2:	601a      	str	r2, [r3, #0]
 80075f4:	2300      	movs	r3, #0
 80075f6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	f383 8811 	msr	BASEPRI, r3
    }
 80075fe:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8007600:	bf00      	nop
 8007602:	3708      	adds	r7, #8
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	e000ed04 	.word	0xe000ed04

0800760c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800760c:	b480      	push	{r7}
 800760e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007610:	4b0b      	ldr	r3, [pc, #44]	; (8007640 <vPortSetupTimerInterrupt+0x34>)
 8007612:	2200      	movs	r2, #0
 8007614:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007616:	4b0b      	ldr	r3, [pc, #44]	; (8007644 <vPortSetupTimerInterrupt+0x38>)
 8007618:	2200      	movs	r2, #0
 800761a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800761c:	4b0a      	ldr	r3, [pc, #40]	; (8007648 <vPortSetupTimerInterrupt+0x3c>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a0a      	ldr	r2, [pc, #40]	; (800764c <vPortSetupTimerInterrupt+0x40>)
 8007622:	fba2 2303 	umull	r2, r3, r2, r3
 8007626:	099b      	lsrs	r3, r3, #6
 8007628:	4a09      	ldr	r2, [pc, #36]	; (8007650 <vPortSetupTimerInterrupt+0x44>)
 800762a:	3b01      	subs	r3, #1
 800762c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800762e:	4b04      	ldr	r3, [pc, #16]	; (8007640 <vPortSetupTimerInterrupt+0x34>)
 8007630:	2207      	movs	r2, #7
 8007632:	601a      	str	r2, [r3, #0]
}
 8007634:	bf00      	nop
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr
 800763e:	bf00      	nop
 8007640:	e000e010 	.word	0xe000e010
 8007644:	e000e018 	.word	0xe000e018
 8007648:	20000010 	.word	0x20000010
 800764c:	10624dd3 	.word	0x10624dd3
 8007650:	e000e014 	.word	0xe000e014

08007654 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007654:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007664 <vPortEnableVFP+0x10>
 8007658:	6801      	ldr	r1, [r0, #0]
 800765a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800765e:	6001      	str	r1, [r0, #0]
 8007660:	4770      	bx	lr
 8007662:	0000      	.short	0x0000
 8007664:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007668:	bf00      	nop
 800766a:	bf00      	nop

0800766c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800766c:	b480      	push	{r7}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8007672:	f3ef 8305 	mrs	r3, IPSR
 8007676:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2b0f      	cmp	r3, #15
 800767c:	d914      	bls.n	80076a8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800767e:	4a17      	ldr	r2, [pc, #92]	; (80076dc <vPortValidateInterruptPriority+0x70>)
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	4413      	add	r3, r2
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007688:	4b15      	ldr	r3, [pc, #84]	; (80076e0 <vPortValidateInterruptPriority+0x74>)
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	7afa      	ldrb	r2, [r7, #11]
 800768e:	429a      	cmp	r2, r3
 8007690:	d20a      	bcs.n	80076a8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8007692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007696:	f383 8811 	msr	BASEPRI, r3
 800769a:	f3bf 8f6f 	isb	sy
 800769e:	f3bf 8f4f 	dsb	sy
 80076a2:	607b      	str	r3, [r7, #4]
    }
 80076a4:	bf00      	nop
 80076a6:	e7fe      	b.n	80076a6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80076a8:	4b0e      	ldr	r3, [pc, #56]	; (80076e4 <vPortValidateInterruptPriority+0x78>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80076b0:	4b0d      	ldr	r3, [pc, #52]	; (80076e8 <vPortValidateInterruptPriority+0x7c>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d90a      	bls.n	80076ce <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80076b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076bc:	f383 8811 	msr	BASEPRI, r3
 80076c0:	f3bf 8f6f 	isb	sy
 80076c4:	f3bf 8f4f 	dsb	sy
 80076c8:	603b      	str	r3, [r7, #0]
    }
 80076ca:	bf00      	nop
 80076cc:	e7fe      	b.n	80076cc <vPortValidateInterruptPriority+0x60>
    }
 80076ce:	bf00      	nop
 80076d0:	3714      	adds	r7, #20
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop
 80076dc:	e000e3f0 	.word	0xe000e3f0
 80076e0:	2000036c 	.word	0x2000036c
 80076e4:	e000ed0c 	.word	0xe000ed0c
 80076e8:	20000370 	.word	0x20000370

080076ec <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b08a      	sub	sp, #40	; 0x28
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80076f4:	2300      	movs	r3, #0
 80076f6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80076f8:	f7fe fad2 	bl	8005ca0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80076fc:	4b65      	ldr	r3, [pc, #404]	; (8007894 <pvPortMalloc+0x1a8>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d101      	bne.n	8007708 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007704:	f000 f934 	bl	8007970 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007708:	4b63      	ldr	r3, [pc, #396]	; (8007898 <pvPortMalloc+0x1ac>)
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	4013      	ands	r3, r2
 8007710:	2b00      	cmp	r3, #0
 8007712:	f040 80a7 	bne.w	8007864 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d02d      	beq.n	8007778 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800771c:	2208      	movs	r2, #8
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	429a      	cmp	r2, r3
 8007726:	d227      	bcs.n	8007778 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8007728:	2208      	movs	r2, #8
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4413      	add	r3, r2
 800772e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f003 0307 	and.w	r3, r3, #7
 8007736:	2b00      	cmp	r3, #0
 8007738:	d021      	beq.n	800777e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f023 0307 	bic.w	r3, r3, #7
 8007740:	3308      	adds	r3, #8
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	429a      	cmp	r2, r3
 8007746:	d214      	bcs.n	8007772 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f023 0307 	bic.w	r3, r3, #7
 800774e:	3308      	adds	r3, #8
 8007750:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f003 0307 	and.w	r3, r3, #7
 8007758:	2b00      	cmp	r3, #0
 800775a:	d010      	beq.n	800777e <pvPortMalloc+0x92>
        __asm volatile
 800775c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007760:	f383 8811 	msr	BASEPRI, r3
 8007764:	f3bf 8f6f 	isb	sy
 8007768:	f3bf 8f4f 	dsb	sy
 800776c:	617b      	str	r3, [r7, #20]
    }
 800776e:	bf00      	nop
 8007770:	e7fe      	b.n	8007770 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8007772:	2300      	movs	r3, #0
 8007774:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007776:	e002      	b.n	800777e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8007778:	2300      	movs	r3, #0
 800777a:	607b      	str	r3, [r7, #4]
 800777c:	e000      	b.n	8007780 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800777e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d06e      	beq.n	8007864 <pvPortMalloc+0x178>
 8007786:	4b45      	ldr	r3, [pc, #276]	; (800789c <pvPortMalloc+0x1b0>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	429a      	cmp	r2, r3
 800778e:	d869      	bhi.n	8007864 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8007790:	4b43      	ldr	r3, [pc, #268]	; (80078a0 <pvPortMalloc+0x1b4>)
 8007792:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8007794:	4b42      	ldr	r3, [pc, #264]	; (80078a0 <pvPortMalloc+0x1b4>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800779a:	e004      	b.n	80077a6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800779c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80077a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d903      	bls.n	80077b8 <pvPortMalloc+0xcc>
 80077b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d1f1      	bne.n	800779c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80077b8:	4b36      	ldr	r3, [pc, #216]	; (8007894 <pvPortMalloc+0x1a8>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077be:	429a      	cmp	r2, r3
 80077c0:	d050      	beq.n	8007864 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80077c2:	6a3b      	ldr	r3, [r7, #32]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2208      	movs	r2, #8
 80077c8:	4413      	add	r3, r2
 80077ca:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80077cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	6a3b      	ldr	r3, [r7, #32]
 80077d2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80077d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d6:	685a      	ldr	r2, [r3, #4]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	1ad2      	subs	r2, r2, r3
 80077dc:	2308      	movs	r3, #8
 80077de:	005b      	lsls	r3, r3, #1
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d91f      	bls.n	8007824 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80077e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4413      	add	r3, r2
 80077ea:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077ec:	69bb      	ldr	r3, [r7, #24]
 80077ee:	f003 0307 	and.w	r3, r3, #7
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d00a      	beq.n	800780c <pvPortMalloc+0x120>
        __asm volatile
 80077f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fa:	f383 8811 	msr	BASEPRI, r3
 80077fe:	f3bf 8f6f 	isb	sy
 8007802:	f3bf 8f4f 	dsb	sy
 8007806:	613b      	str	r3, [r7, #16]
    }
 8007808:	bf00      	nop
 800780a:	e7fe      	b.n	800780a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800780c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780e:	685a      	ldr	r2, [r3, #4]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	1ad2      	subs	r2, r2, r3
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800781e:	69b8      	ldr	r0, [r7, #24]
 8007820:	f000 f908 	bl	8007a34 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007824:	4b1d      	ldr	r3, [pc, #116]	; (800789c <pvPortMalloc+0x1b0>)
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	1ad3      	subs	r3, r2, r3
 800782e:	4a1b      	ldr	r2, [pc, #108]	; (800789c <pvPortMalloc+0x1b0>)
 8007830:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007832:	4b1a      	ldr	r3, [pc, #104]	; (800789c <pvPortMalloc+0x1b0>)
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	4b1b      	ldr	r3, [pc, #108]	; (80078a4 <pvPortMalloc+0x1b8>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	429a      	cmp	r2, r3
 800783c:	d203      	bcs.n	8007846 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800783e:	4b17      	ldr	r3, [pc, #92]	; (800789c <pvPortMalloc+0x1b0>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a18      	ldr	r2, [pc, #96]	; (80078a4 <pvPortMalloc+0x1b8>)
 8007844:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007848:	685a      	ldr	r2, [r3, #4]
 800784a:	4b13      	ldr	r3, [pc, #76]	; (8007898 <pvPortMalloc+0x1ac>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	431a      	orrs	r2, r3
 8007850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007852:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8007854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007856:	2200      	movs	r2, #0
 8007858:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800785a:	4b13      	ldr	r3, [pc, #76]	; (80078a8 <pvPortMalloc+0x1bc>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	3301      	adds	r3, #1
 8007860:	4a11      	ldr	r2, [pc, #68]	; (80078a8 <pvPortMalloc+0x1bc>)
 8007862:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8007864:	f7fe fa2a 	bl	8005cbc <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	f003 0307 	and.w	r3, r3, #7
 800786e:	2b00      	cmp	r3, #0
 8007870:	d00a      	beq.n	8007888 <pvPortMalloc+0x19c>
        __asm volatile
 8007872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007876:	f383 8811 	msr	BASEPRI, r3
 800787a:	f3bf 8f6f 	isb	sy
 800787e:	f3bf 8f4f 	dsb	sy
 8007882:	60fb      	str	r3, [r7, #12]
    }
 8007884:	bf00      	nop
 8007886:	e7fe      	b.n	8007886 <pvPortMalloc+0x19a>
    return pvReturn;
 8007888:	69fb      	ldr	r3, [r7, #28]
}
 800788a:	4618      	mov	r0, r3
 800788c:	3728      	adds	r7, #40	; 0x28
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	2001937c 	.word	0x2001937c
 8007898:	20019390 	.word	0x20019390
 800789c:	20019380 	.word	0x20019380
 80078a0:	20019374 	.word	0x20019374
 80078a4:	20019384 	.word	0x20019384
 80078a8:	20019388 	.word	0x20019388

080078ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b086      	sub	sp, #24
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d04d      	beq.n	800795a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80078be:	2308      	movs	r3, #8
 80078c0:	425b      	negs	r3, r3
 80078c2:	697a      	ldr	r2, [r7, #20]
 80078c4:	4413      	add	r3, r2
 80078c6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	685a      	ldr	r2, [r3, #4]
 80078d0:	4b24      	ldr	r3, [pc, #144]	; (8007964 <vPortFree+0xb8>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4013      	ands	r3, r2
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d10a      	bne.n	80078f0 <vPortFree+0x44>
        __asm volatile
 80078da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078de:	f383 8811 	msr	BASEPRI, r3
 80078e2:	f3bf 8f6f 	isb	sy
 80078e6:	f3bf 8f4f 	dsb	sy
 80078ea:	60fb      	str	r3, [r7, #12]
    }
 80078ec:	bf00      	nop
 80078ee:	e7fe      	b.n	80078ee <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d00a      	beq.n	800790e <vPortFree+0x62>
        __asm volatile
 80078f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fc:	f383 8811 	msr	BASEPRI, r3
 8007900:	f3bf 8f6f 	isb	sy
 8007904:	f3bf 8f4f 	dsb	sy
 8007908:	60bb      	str	r3, [r7, #8]
    }
 800790a:	bf00      	nop
 800790c:	e7fe      	b.n	800790c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	685a      	ldr	r2, [r3, #4]
 8007912:	4b14      	ldr	r3, [pc, #80]	; (8007964 <vPortFree+0xb8>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4013      	ands	r3, r2
 8007918:	2b00      	cmp	r3, #0
 800791a:	d01e      	beq.n	800795a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d11a      	bne.n	800795a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	685a      	ldr	r2, [r3, #4]
 8007928:	4b0e      	ldr	r3, [pc, #56]	; (8007964 <vPortFree+0xb8>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	43db      	mvns	r3, r3
 800792e:	401a      	ands	r2, r3
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8007934:	f7fe f9b4 	bl	8005ca0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	685a      	ldr	r2, [r3, #4]
 800793c:	4b0a      	ldr	r3, [pc, #40]	; (8007968 <vPortFree+0xbc>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4413      	add	r3, r2
 8007942:	4a09      	ldr	r2, [pc, #36]	; (8007968 <vPortFree+0xbc>)
 8007944:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007946:	6938      	ldr	r0, [r7, #16]
 8007948:	f000 f874 	bl	8007a34 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800794c:	4b07      	ldr	r3, [pc, #28]	; (800796c <vPortFree+0xc0>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	3301      	adds	r3, #1
 8007952:	4a06      	ldr	r2, [pc, #24]	; (800796c <vPortFree+0xc0>)
 8007954:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8007956:	f7fe f9b1 	bl	8005cbc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800795a:	bf00      	nop
 800795c:	3718      	adds	r7, #24
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	20019390 	.word	0x20019390
 8007968:	20019380 	.word	0x20019380
 800796c:	2001938c 	.word	0x2001938c

08007970 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8007970:	b480      	push	{r7}
 8007972:	b085      	sub	sp, #20
 8007974:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007976:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 800797a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800797c:	4b27      	ldr	r3, [pc, #156]	; (8007a1c <prvHeapInit+0xac>)
 800797e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f003 0307 	and.w	r3, r3, #7
 8007986:	2b00      	cmp	r3, #0
 8007988:	d00c      	beq.n	80079a4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	3307      	adds	r3, #7
 800798e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f023 0307 	bic.w	r3, r3, #7
 8007996:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007998:	68ba      	ldr	r2, [r7, #8]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	1ad3      	subs	r3, r2, r3
 800799e:	4a1f      	ldr	r2, [pc, #124]	; (8007a1c <prvHeapInit+0xac>)
 80079a0:	4413      	add	r3, r2
 80079a2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80079a8:	4a1d      	ldr	r2, [pc, #116]	; (8007a20 <prvHeapInit+0xb0>)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80079ae:	4b1c      	ldr	r3, [pc, #112]	; (8007a20 <prvHeapInit+0xb0>)
 80079b0:	2200      	movs	r2, #0
 80079b2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	68ba      	ldr	r2, [r7, #8]
 80079b8:	4413      	add	r3, r2
 80079ba:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80079bc:	2208      	movs	r2, #8
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	1a9b      	subs	r3, r3, r2
 80079c2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f023 0307 	bic.w	r3, r3, #7
 80079ca:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	4a15      	ldr	r2, [pc, #84]	; (8007a24 <prvHeapInit+0xb4>)
 80079d0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80079d2:	4b14      	ldr	r3, [pc, #80]	; (8007a24 <prvHeapInit+0xb4>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	2200      	movs	r2, #0
 80079d8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80079da:	4b12      	ldr	r3, [pc, #72]	; (8007a24 <prvHeapInit+0xb4>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2200      	movs	r2, #0
 80079e0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	68fa      	ldr	r2, [r7, #12]
 80079ea:	1ad2      	subs	r2, r2, r3
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80079f0:	4b0c      	ldr	r3, [pc, #48]	; (8007a24 <prvHeapInit+0xb4>)
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	4a0a      	ldr	r2, [pc, #40]	; (8007a28 <prvHeapInit+0xb8>)
 80079fe:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	4a09      	ldr	r2, [pc, #36]	; (8007a2c <prvHeapInit+0xbc>)
 8007a06:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007a08:	4b09      	ldr	r3, [pc, #36]	; (8007a30 <prvHeapInit+0xc0>)
 8007a0a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007a0e:	601a      	str	r2, [r3, #0]
}
 8007a10:	bf00      	nop
 8007a12:	3714      	adds	r7, #20
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr
 8007a1c:	20000374 	.word	0x20000374
 8007a20:	20019374 	.word	0x20019374
 8007a24:	2001937c 	.word	0x2001937c
 8007a28:	20019384 	.word	0x20019384
 8007a2c:	20019380 	.word	0x20019380
 8007a30:	20019390 	.word	0x20019390

08007a34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a3c:	4b28      	ldr	r3, [pc, #160]	; (8007ae0 <prvInsertBlockIntoFreeList+0xac>)
 8007a3e:	60fb      	str	r3, [r7, #12]
 8007a40:	e002      	b.n	8007a48 <prvInsertBlockIntoFreeList+0x14>
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	60fb      	str	r3, [r7, #12]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d8f7      	bhi.n	8007a42 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	68ba      	ldr	r2, [r7, #8]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d108      	bne.n	8007a76 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	685a      	ldr	r2, [r3, #4]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	441a      	add	r2, r3
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	68ba      	ldr	r2, [r7, #8]
 8007a80:	441a      	add	r2, r3
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d118      	bne.n	8007abc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	4b15      	ldr	r3, [pc, #84]	; (8007ae4 <prvInsertBlockIntoFreeList+0xb0>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d00d      	beq.n	8007ab2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	685a      	ldr	r2, [r3, #4]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	441a      	add	r2, r3
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	601a      	str	r2, [r3, #0]
 8007ab0:	e008      	b.n	8007ac4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ab2:	4b0c      	ldr	r3, [pc, #48]	; (8007ae4 <prvInsertBlockIntoFreeList+0xb0>)
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	601a      	str	r2, [r3, #0]
 8007aba:	e003      	b.n	8007ac4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007ac4:	68fa      	ldr	r2, [r7, #12]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d002      	beq.n	8007ad2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007ad2:	bf00      	nop
 8007ad4:	3714      	adds	r7, #20
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr
 8007ade:	bf00      	nop
 8007ae0:	20019374 	.word	0x20019374
 8007ae4:	2001937c 	.word	0x2001937c

08007ae8 <__errno>:
 8007ae8:	4b01      	ldr	r3, [pc, #4]	; (8007af0 <__errno+0x8>)
 8007aea:	6818      	ldr	r0, [r3, #0]
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop
 8007af0:	20000028 	.word	0x20000028

08007af4 <__libc_init_array>:
 8007af4:	b570      	push	{r4, r5, r6, lr}
 8007af6:	4d0d      	ldr	r5, [pc, #52]	; (8007b2c <__libc_init_array+0x38>)
 8007af8:	4c0d      	ldr	r4, [pc, #52]	; (8007b30 <__libc_init_array+0x3c>)
 8007afa:	1b64      	subs	r4, r4, r5
 8007afc:	10a4      	asrs	r4, r4, #2
 8007afe:	2600      	movs	r6, #0
 8007b00:	42a6      	cmp	r6, r4
 8007b02:	d109      	bne.n	8007b18 <__libc_init_array+0x24>
 8007b04:	4d0b      	ldr	r5, [pc, #44]	; (8007b34 <__libc_init_array+0x40>)
 8007b06:	4c0c      	ldr	r4, [pc, #48]	; (8007b38 <__libc_init_array+0x44>)
 8007b08:	f001 f98a 	bl	8008e20 <_init>
 8007b0c:	1b64      	subs	r4, r4, r5
 8007b0e:	10a4      	asrs	r4, r4, #2
 8007b10:	2600      	movs	r6, #0
 8007b12:	42a6      	cmp	r6, r4
 8007b14:	d105      	bne.n	8007b22 <__libc_init_array+0x2e>
 8007b16:	bd70      	pop	{r4, r5, r6, pc}
 8007b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b1c:	4798      	blx	r3
 8007b1e:	3601      	adds	r6, #1
 8007b20:	e7ee      	b.n	8007b00 <__libc_init_array+0xc>
 8007b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b26:	4798      	blx	r3
 8007b28:	3601      	adds	r6, #1
 8007b2a:	e7f2      	b.n	8007b12 <__libc_init_array+0x1e>
 8007b2c:	080092d4 	.word	0x080092d4
 8007b30:	080092d4 	.word	0x080092d4
 8007b34:	080092d4 	.word	0x080092d4
 8007b38:	080092d8 	.word	0x080092d8

08007b3c <memcpy>:
 8007b3c:	440a      	add	r2, r1
 8007b3e:	4291      	cmp	r1, r2
 8007b40:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b44:	d100      	bne.n	8007b48 <memcpy+0xc>
 8007b46:	4770      	bx	lr
 8007b48:	b510      	push	{r4, lr}
 8007b4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b52:	4291      	cmp	r1, r2
 8007b54:	d1f9      	bne.n	8007b4a <memcpy+0xe>
 8007b56:	bd10      	pop	{r4, pc}

08007b58 <memset>:
 8007b58:	4402      	add	r2, r0
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d100      	bne.n	8007b62 <memset+0xa>
 8007b60:	4770      	bx	lr
 8007b62:	f803 1b01 	strb.w	r1, [r3], #1
 8007b66:	e7f9      	b.n	8007b5c <memset+0x4>

08007b68 <iprintf>:
 8007b68:	b40f      	push	{r0, r1, r2, r3}
 8007b6a:	4b0a      	ldr	r3, [pc, #40]	; (8007b94 <iprintf+0x2c>)
 8007b6c:	b513      	push	{r0, r1, r4, lr}
 8007b6e:	681c      	ldr	r4, [r3, #0]
 8007b70:	b124      	cbz	r4, 8007b7c <iprintf+0x14>
 8007b72:	69a3      	ldr	r3, [r4, #24]
 8007b74:	b913      	cbnz	r3, 8007b7c <iprintf+0x14>
 8007b76:	4620      	mov	r0, r4
 8007b78:	f000 f886 	bl	8007c88 <__sinit>
 8007b7c:	ab05      	add	r3, sp, #20
 8007b7e:	9a04      	ldr	r2, [sp, #16]
 8007b80:	68a1      	ldr	r1, [r4, #8]
 8007b82:	9301      	str	r3, [sp, #4]
 8007b84:	4620      	mov	r0, r4
 8007b86:	f000 fb39 	bl	80081fc <_vfiprintf_r>
 8007b8a:	b002      	add	sp, #8
 8007b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b90:	b004      	add	sp, #16
 8007b92:	4770      	bx	lr
 8007b94:	20000028 	.word	0x20000028

08007b98 <siprintf>:
 8007b98:	b40e      	push	{r1, r2, r3}
 8007b9a:	b500      	push	{lr}
 8007b9c:	b09c      	sub	sp, #112	; 0x70
 8007b9e:	ab1d      	add	r3, sp, #116	; 0x74
 8007ba0:	9002      	str	r0, [sp, #8]
 8007ba2:	9006      	str	r0, [sp, #24]
 8007ba4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007ba8:	4809      	ldr	r0, [pc, #36]	; (8007bd0 <siprintf+0x38>)
 8007baa:	9107      	str	r1, [sp, #28]
 8007bac:	9104      	str	r1, [sp, #16]
 8007bae:	4909      	ldr	r1, [pc, #36]	; (8007bd4 <siprintf+0x3c>)
 8007bb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bb4:	9105      	str	r1, [sp, #20]
 8007bb6:	6800      	ldr	r0, [r0, #0]
 8007bb8:	9301      	str	r3, [sp, #4]
 8007bba:	a902      	add	r1, sp, #8
 8007bbc:	f000 f9f4 	bl	8007fa8 <_svfiprintf_r>
 8007bc0:	9b02      	ldr	r3, [sp, #8]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	701a      	strb	r2, [r3, #0]
 8007bc6:	b01c      	add	sp, #112	; 0x70
 8007bc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007bcc:	b003      	add	sp, #12
 8007bce:	4770      	bx	lr
 8007bd0:	20000028 	.word	0x20000028
 8007bd4:	ffff0208 	.word	0xffff0208

08007bd8 <std>:
 8007bd8:	2300      	movs	r3, #0
 8007bda:	b510      	push	{r4, lr}
 8007bdc:	4604      	mov	r4, r0
 8007bde:	e9c0 3300 	strd	r3, r3, [r0]
 8007be2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007be6:	6083      	str	r3, [r0, #8]
 8007be8:	8181      	strh	r1, [r0, #12]
 8007bea:	6643      	str	r3, [r0, #100]	; 0x64
 8007bec:	81c2      	strh	r2, [r0, #14]
 8007bee:	6183      	str	r3, [r0, #24]
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	2208      	movs	r2, #8
 8007bf4:	305c      	adds	r0, #92	; 0x5c
 8007bf6:	f7ff ffaf 	bl	8007b58 <memset>
 8007bfa:	4b05      	ldr	r3, [pc, #20]	; (8007c10 <std+0x38>)
 8007bfc:	6263      	str	r3, [r4, #36]	; 0x24
 8007bfe:	4b05      	ldr	r3, [pc, #20]	; (8007c14 <std+0x3c>)
 8007c00:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c02:	4b05      	ldr	r3, [pc, #20]	; (8007c18 <std+0x40>)
 8007c04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c06:	4b05      	ldr	r3, [pc, #20]	; (8007c1c <std+0x44>)
 8007c08:	6224      	str	r4, [r4, #32]
 8007c0a:	6323      	str	r3, [r4, #48]	; 0x30
 8007c0c:	bd10      	pop	{r4, pc}
 8007c0e:	bf00      	nop
 8007c10:	080087a5 	.word	0x080087a5
 8007c14:	080087c7 	.word	0x080087c7
 8007c18:	080087ff 	.word	0x080087ff
 8007c1c:	08008823 	.word	0x08008823

08007c20 <_cleanup_r>:
 8007c20:	4901      	ldr	r1, [pc, #4]	; (8007c28 <_cleanup_r+0x8>)
 8007c22:	f000 b8af 	b.w	8007d84 <_fwalk_reent>
 8007c26:	bf00      	nop
 8007c28:	08008afd 	.word	0x08008afd

08007c2c <__sfmoreglue>:
 8007c2c:	b570      	push	{r4, r5, r6, lr}
 8007c2e:	2268      	movs	r2, #104	; 0x68
 8007c30:	1e4d      	subs	r5, r1, #1
 8007c32:	4355      	muls	r5, r2
 8007c34:	460e      	mov	r6, r1
 8007c36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007c3a:	f000 f8e5 	bl	8007e08 <_malloc_r>
 8007c3e:	4604      	mov	r4, r0
 8007c40:	b140      	cbz	r0, 8007c54 <__sfmoreglue+0x28>
 8007c42:	2100      	movs	r1, #0
 8007c44:	e9c0 1600 	strd	r1, r6, [r0]
 8007c48:	300c      	adds	r0, #12
 8007c4a:	60a0      	str	r0, [r4, #8]
 8007c4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007c50:	f7ff ff82 	bl	8007b58 <memset>
 8007c54:	4620      	mov	r0, r4
 8007c56:	bd70      	pop	{r4, r5, r6, pc}

08007c58 <__sfp_lock_acquire>:
 8007c58:	4801      	ldr	r0, [pc, #4]	; (8007c60 <__sfp_lock_acquire+0x8>)
 8007c5a:	f000 b8b3 	b.w	8007dc4 <__retarget_lock_acquire_recursive>
 8007c5e:	bf00      	nop
 8007c60:	20019395 	.word	0x20019395

08007c64 <__sfp_lock_release>:
 8007c64:	4801      	ldr	r0, [pc, #4]	; (8007c6c <__sfp_lock_release+0x8>)
 8007c66:	f000 b8ae 	b.w	8007dc6 <__retarget_lock_release_recursive>
 8007c6a:	bf00      	nop
 8007c6c:	20019395 	.word	0x20019395

08007c70 <__sinit_lock_acquire>:
 8007c70:	4801      	ldr	r0, [pc, #4]	; (8007c78 <__sinit_lock_acquire+0x8>)
 8007c72:	f000 b8a7 	b.w	8007dc4 <__retarget_lock_acquire_recursive>
 8007c76:	bf00      	nop
 8007c78:	20019396 	.word	0x20019396

08007c7c <__sinit_lock_release>:
 8007c7c:	4801      	ldr	r0, [pc, #4]	; (8007c84 <__sinit_lock_release+0x8>)
 8007c7e:	f000 b8a2 	b.w	8007dc6 <__retarget_lock_release_recursive>
 8007c82:	bf00      	nop
 8007c84:	20019396 	.word	0x20019396

08007c88 <__sinit>:
 8007c88:	b510      	push	{r4, lr}
 8007c8a:	4604      	mov	r4, r0
 8007c8c:	f7ff fff0 	bl	8007c70 <__sinit_lock_acquire>
 8007c90:	69a3      	ldr	r3, [r4, #24]
 8007c92:	b11b      	cbz	r3, 8007c9c <__sinit+0x14>
 8007c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c98:	f7ff bff0 	b.w	8007c7c <__sinit_lock_release>
 8007c9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007ca0:	6523      	str	r3, [r4, #80]	; 0x50
 8007ca2:	4b13      	ldr	r3, [pc, #76]	; (8007cf0 <__sinit+0x68>)
 8007ca4:	4a13      	ldr	r2, [pc, #76]	; (8007cf4 <__sinit+0x6c>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	62a2      	str	r2, [r4, #40]	; 0x28
 8007caa:	42a3      	cmp	r3, r4
 8007cac:	bf04      	itt	eq
 8007cae:	2301      	moveq	r3, #1
 8007cb0:	61a3      	streq	r3, [r4, #24]
 8007cb2:	4620      	mov	r0, r4
 8007cb4:	f000 f820 	bl	8007cf8 <__sfp>
 8007cb8:	6060      	str	r0, [r4, #4]
 8007cba:	4620      	mov	r0, r4
 8007cbc:	f000 f81c 	bl	8007cf8 <__sfp>
 8007cc0:	60a0      	str	r0, [r4, #8]
 8007cc2:	4620      	mov	r0, r4
 8007cc4:	f000 f818 	bl	8007cf8 <__sfp>
 8007cc8:	2200      	movs	r2, #0
 8007cca:	60e0      	str	r0, [r4, #12]
 8007ccc:	2104      	movs	r1, #4
 8007cce:	6860      	ldr	r0, [r4, #4]
 8007cd0:	f7ff ff82 	bl	8007bd8 <std>
 8007cd4:	68a0      	ldr	r0, [r4, #8]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	2109      	movs	r1, #9
 8007cda:	f7ff ff7d 	bl	8007bd8 <std>
 8007cde:	68e0      	ldr	r0, [r4, #12]
 8007ce0:	2202      	movs	r2, #2
 8007ce2:	2112      	movs	r1, #18
 8007ce4:	f7ff ff78 	bl	8007bd8 <std>
 8007ce8:	2301      	movs	r3, #1
 8007cea:	61a3      	str	r3, [r4, #24]
 8007cec:	e7d2      	b.n	8007c94 <__sinit+0xc>
 8007cee:	bf00      	nop
 8007cf0:	08009234 	.word	0x08009234
 8007cf4:	08007c21 	.word	0x08007c21

08007cf8 <__sfp>:
 8007cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cfa:	4607      	mov	r7, r0
 8007cfc:	f7ff ffac 	bl	8007c58 <__sfp_lock_acquire>
 8007d00:	4b1e      	ldr	r3, [pc, #120]	; (8007d7c <__sfp+0x84>)
 8007d02:	681e      	ldr	r6, [r3, #0]
 8007d04:	69b3      	ldr	r3, [r6, #24]
 8007d06:	b913      	cbnz	r3, 8007d0e <__sfp+0x16>
 8007d08:	4630      	mov	r0, r6
 8007d0a:	f7ff ffbd 	bl	8007c88 <__sinit>
 8007d0e:	3648      	adds	r6, #72	; 0x48
 8007d10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007d14:	3b01      	subs	r3, #1
 8007d16:	d503      	bpl.n	8007d20 <__sfp+0x28>
 8007d18:	6833      	ldr	r3, [r6, #0]
 8007d1a:	b30b      	cbz	r3, 8007d60 <__sfp+0x68>
 8007d1c:	6836      	ldr	r6, [r6, #0]
 8007d1e:	e7f7      	b.n	8007d10 <__sfp+0x18>
 8007d20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007d24:	b9d5      	cbnz	r5, 8007d5c <__sfp+0x64>
 8007d26:	4b16      	ldr	r3, [pc, #88]	; (8007d80 <__sfp+0x88>)
 8007d28:	60e3      	str	r3, [r4, #12]
 8007d2a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007d2e:	6665      	str	r5, [r4, #100]	; 0x64
 8007d30:	f000 f847 	bl	8007dc2 <__retarget_lock_init_recursive>
 8007d34:	f7ff ff96 	bl	8007c64 <__sfp_lock_release>
 8007d38:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007d3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007d40:	6025      	str	r5, [r4, #0]
 8007d42:	61a5      	str	r5, [r4, #24]
 8007d44:	2208      	movs	r2, #8
 8007d46:	4629      	mov	r1, r5
 8007d48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007d4c:	f7ff ff04 	bl	8007b58 <memset>
 8007d50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007d54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007d58:	4620      	mov	r0, r4
 8007d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d5c:	3468      	adds	r4, #104	; 0x68
 8007d5e:	e7d9      	b.n	8007d14 <__sfp+0x1c>
 8007d60:	2104      	movs	r1, #4
 8007d62:	4638      	mov	r0, r7
 8007d64:	f7ff ff62 	bl	8007c2c <__sfmoreglue>
 8007d68:	4604      	mov	r4, r0
 8007d6a:	6030      	str	r0, [r6, #0]
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	d1d5      	bne.n	8007d1c <__sfp+0x24>
 8007d70:	f7ff ff78 	bl	8007c64 <__sfp_lock_release>
 8007d74:	230c      	movs	r3, #12
 8007d76:	603b      	str	r3, [r7, #0]
 8007d78:	e7ee      	b.n	8007d58 <__sfp+0x60>
 8007d7a:	bf00      	nop
 8007d7c:	08009234 	.word	0x08009234
 8007d80:	ffff0001 	.word	0xffff0001

08007d84 <_fwalk_reent>:
 8007d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d88:	4606      	mov	r6, r0
 8007d8a:	4688      	mov	r8, r1
 8007d8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007d90:	2700      	movs	r7, #0
 8007d92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d96:	f1b9 0901 	subs.w	r9, r9, #1
 8007d9a:	d505      	bpl.n	8007da8 <_fwalk_reent+0x24>
 8007d9c:	6824      	ldr	r4, [r4, #0]
 8007d9e:	2c00      	cmp	r4, #0
 8007da0:	d1f7      	bne.n	8007d92 <_fwalk_reent+0xe>
 8007da2:	4638      	mov	r0, r7
 8007da4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007da8:	89ab      	ldrh	r3, [r5, #12]
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d907      	bls.n	8007dbe <_fwalk_reent+0x3a>
 8007dae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007db2:	3301      	adds	r3, #1
 8007db4:	d003      	beq.n	8007dbe <_fwalk_reent+0x3a>
 8007db6:	4629      	mov	r1, r5
 8007db8:	4630      	mov	r0, r6
 8007dba:	47c0      	blx	r8
 8007dbc:	4307      	orrs	r7, r0
 8007dbe:	3568      	adds	r5, #104	; 0x68
 8007dc0:	e7e9      	b.n	8007d96 <_fwalk_reent+0x12>

08007dc2 <__retarget_lock_init_recursive>:
 8007dc2:	4770      	bx	lr

08007dc4 <__retarget_lock_acquire_recursive>:
 8007dc4:	4770      	bx	lr

08007dc6 <__retarget_lock_release_recursive>:
 8007dc6:	4770      	bx	lr

08007dc8 <sbrk_aligned>:
 8007dc8:	b570      	push	{r4, r5, r6, lr}
 8007dca:	4e0e      	ldr	r6, [pc, #56]	; (8007e04 <sbrk_aligned+0x3c>)
 8007dcc:	460c      	mov	r4, r1
 8007dce:	6831      	ldr	r1, [r6, #0]
 8007dd0:	4605      	mov	r5, r0
 8007dd2:	b911      	cbnz	r1, 8007dda <sbrk_aligned+0x12>
 8007dd4:	f000 fcd6 	bl	8008784 <_sbrk_r>
 8007dd8:	6030      	str	r0, [r6, #0]
 8007dda:	4621      	mov	r1, r4
 8007ddc:	4628      	mov	r0, r5
 8007dde:	f000 fcd1 	bl	8008784 <_sbrk_r>
 8007de2:	1c43      	adds	r3, r0, #1
 8007de4:	d00a      	beq.n	8007dfc <sbrk_aligned+0x34>
 8007de6:	1cc4      	adds	r4, r0, #3
 8007de8:	f024 0403 	bic.w	r4, r4, #3
 8007dec:	42a0      	cmp	r0, r4
 8007dee:	d007      	beq.n	8007e00 <sbrk_aligned+0x38>
 8007df0:	1a21      	subs	r1, r4, r0
 8007df2:	4628      	mov	r0, r5
 8007df4:	f000 fcc6 	bl	8008784 <_sbrk_r>
 8007df8:	3001      	adds	r0, #1
 8007dfa:	d101      	bne.n	8007e00 <sbrk_aligned+0x38>
 8007dfc:	f04f 34ff 	mov.w	r4, #4294967295
 8007e00:	4620      	mov	r0, r4
 8007e02:	bd70      	pop	{r4, r5, r6, pc}
 8007e04:	2001939c 	.word	0x2001939c

08007e08 <_malloc_r>:
 8007e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e0c:	1ccd      	adds	r5, r1, #3
 8007e0e:	f025 0503 	bic.w	r5, r5, #3
 8007e12:	3508      	adds	r5, #8
 8007e14:	2d0c      	cmp	r5, #12
 8007e16:	bf38      	it	cc
 8007e18:	250c      	movcc	r5, #12
 8007e1a:	2d00      	cmp	r5, #0
 8007e1c:	4607      	mov	r7, r0
 8007e1e:	db01      	blt.n	8007e24 <_malloc_r+0x1c>
 8007e20:	42a9      	cmp	r1, r5
 8007e22:	d905      	bls.n	8007e30 <_malloc_r+0x28>
 8007e24:	230c      	movs	r3, #12
 8007e26:	603b      	str	r3, [r7, #0]
 8007e28:	2600      	movs	r6, #0
 8007e2a:	4630      	mov	r0, r6
 8007e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e30:	4e2e      	ldr	r6, [pc, #184]	; (8007eec <_malloc_r+0xe4>)
 8007e32:	f000 ff31 	bl	8008c98 <__malloc_lock>
 8007e36:	6833      	ldr	r3, [r6, #0]
 8007e38:	461c      	mov	r4, r3
 8007e3a:	bb34      	cbnz	r4, 8007e8a <_malloc_r+0x82>
 8007e3c:	4629      	mov	r1, r5
 8007e3e:	4638      	mov	r0, r7
 8007e40:	f7ff ffc2 	bl	8007dc8 <sbrk_aligned>
 8007e44:	1c43      	adds	r3, r0, #1
 8007e46:	4604      	mov	r4, r0
 8007e48:	d14d      	bne.n	8007ee6 <_malloc_r+0xde>
 8007e4a:	6834      	ldr	r4, [r6, #0]
 8007e4c:	4626      	mov	r6, r4
 8007e4e:	2e00      	cmp	r6, #0
 8007e50:	d140      	bne.n	8007ed4 <_malloc_r+0xcc>
 8007e52:	6823      	ldr	r3, [r4, #0]
 8007e54:	4631      	mov	r1, r6
 8007e56:	4638      	mov	r0, r7
 8007e58:	eb04 0803 	add.w	r8, r4, r3
 8007e5c:	f000 fc92 	bl	8008784 <_sbrk_r>
 8007e60:	4580      	cmp	r8, r0
 8007e62:	d13a      	bne.n	8007eda <_malloc_r+0xd2>
 8007e64:	6821      	ldr	r1, [r4, #0]
 8007e66:	3503      	adds	r5, #3
 8007e68:	1a6d      	subs	r5, r5, r1
 8007e6a:	f025 0503 	bic.w	r5, r5, #3
 8007e6e:	3508      	adds	r5, #8
 8007e70:	2d0c      	cmp	r5, #12
 8007e72:	bf38      	it	cc
 8007e74:	250c      	movcc	r5, #12
 8007e76:	4629      	mov	r1, r5
 8007e78:	4638      	mov	r0, r7
 8007e7a:	f7ff ffa5 	bl	8007dc8 <sbrk_aligned>
 8007e7e:	3001      	adds	r0, #1
 8007e80:	d02b      	beq.n	8007eda <_malloc_r+0xd2>
 8007e82:	6823      	ldr	r3, [r4, #0]
 8007e84:	442b      	add	r3, r5
 8007e86:	6023      	str	r3, [r4, #0]
 8007e88:	e00e      	b.n	8007ea8 <_malloc_r+0xa0>
 8007e8a:	6822      	ldr	r2, [r4, #0]
 8007e8c:	1b52      	subs	r2, r2, r5
 8007e8e:	d41e      	bmi.n	8007ece <_malloc_r+0xc6>
 8007e90:	2a0b      	cmp	r2, #11
 8007e92:	d916      	bls.n	8007ec2 <_malloc_r+0xba>
 8007e94:	1961      	adds	r1, r4, r5
 8007e96:	42a3      	cmp	r3, r4
 8007e98:	6025      	str	r5, [r4, #0]
 8007e9a:	bf18      	it	ne
 8007e9c:	6059      	strne	r1, [r3, #4]
 8007e9e:	6863      	ldr	r3, [r4, #4]
 8007ea0:	bf08      	it	eq
 8007ea2:	6031      	streq	r1, [r6, #0]
 8007ea4:	5162      	str	r2, [r4, r5]
 8007ea6:	604b      	str	r3, [r1, #4]
 8007ea8:	4638      	mov	r0, r7
 8007eaa:	f104 060b 	add.w	r6, r4, #11
 8007eae:	f000 fef9 	bl	8008ca4 <__malloc_unlock>
 8007eb2:	f026 0607 	bic.w	r6, r6, #7
 8007eb6:	1d23      	adds	r3, r4, #4
 8007eb8:	1af2      	subs	r2, r6, r3
 8007eba:	d0b6      	beq.n	8007e2a <_malloc_r+0x22>
 8007ebc:	1b9b      	subs	r3, r3, r6
 8007ebe:	50a3      	str	r3, [r4, r2]
 8007ec0:	e7b3      	b.n	8007e2a <_malloc_r+0x22>
 8007ec2:	6862      	ldr	r2, [r4, #4]
 8007ec4:	42a3      	cmp	r3, r4
 8007ec6:	bf0c      	ite	eq
 8007ec8:	6032      	streq	r2, [r6, #0]
 8007eca:	605a      	strne	r2, [r3, #4]
 8007ecc:	e7ec      	b.n	8007ea8 <_malloc_r+0xa0>
 8007ece:	4623      	mov	r3, r4
 8007ed0:	6864      	ldr	r4, [r4, #4]
 8007ed2:	e7b2      	b.n	8007e3a <_malloc_r+0x32>
 8007ed4:	4634      	mov	r4, r6
 8007ed6:	6876      	ldr	r6, [r6, #4]
 8007ed8:	e7b9      	b.n	8007e4e <_malloc_r+0x46>
 8007eda:	230c      	movs	r3, #12
 8007edc:	603b      	str	r3, [r7, #0]
 8007ede:	4638      	mov	r0, r7
 8007ee0:	f000 fee0 	bl	8008ca4 <__malloc_unlock>
 8007ee4:	e7a1      	b.n	8007e2a <_malloc_r+0x22>
 8007ee6:	6025      	str	r5, [r4, #0]
 8007ee8:	e7de      	b.n	8007ea8 <_malloc_r+0xa0>
 8007eea:	bf00      	nop
 8007eec:	20019398 	.word	0x20019398

08007ef0 <__ssputs_r>:
 8007ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ef4:	688e      	ldr	r6, [r1, #8]
 8007ef6:	429e      	cmp	r6, r3
 8007ef8:	4682      	mov	sl, r0
 8007efa:	460c      	mov	r4, r1
 8007efc:	4690      	mov	r8, r2
 8007efe:	461f      	mov	r7, r3
 8007f00:	d838      	bhi.n	8007f74 <__ssputs_r+0x84>
 8007f02:	898a      	ldrh	r2, [r1, #12]
 8007f04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007f08:	d032      	beq.n	8007f70 <__ssputs_r+0x80>
 8007f0a:	6825      	ldr	r5, [r4, #0]
 8007f0c:	6909      	ldr	r1, [r1, #16]
 8007f0e:	eba5 0901 	sub.w	r9, r5, r1
 8007f12:	6965      	ldr	r5, [r4, #20]
 8007f14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	444b      	add	r3, r9
 8007f20:	106d      	asrs	r5, r5, #1
 8007f22:	429d      	cmp	r5, r3
 8007f24:	bf38      	it	cc
 8007f26:	461d      	movcc	r5, r3
 8007f28:	0553      	lsls	r3, r2, #21
 8007f2a:	d531      	bpl.n	8007f90 <__ssputs_r+0xa0>
 8007f2c:	4629      	mov	r1, r5
 8007f2e:	f7ff ff6b 	bl	8007e08 <_malloc_r>
 8007f32:	4606      	mov	r6, r0
 8007f34:	b950      	cbnz	r0, 8007f4c <__ssputs_r+0x5c>
 8007f36:	230c      	movs	r3, #12
 8007f38:	f8ca 3000 	str.w	r3, [sl]
 8007f3c:	89a3      	ldrh	r3, [r4, #12]
 8007f3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f42:	81a3      	strh	r3, [r4, #12]
 8007f44:	f04f 30ff 	mov.w	r0, #4294967295
 8007f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f4c:	6921      	ldr	r1, [r4, #16]
 8007f4e:	464a      	mov	r2, r9
 8007f50:	f7ff fdf4 	bl	8007b3c <memcpy>
 8007f54:	89a3      	ldrh	r3, [r4, #12]
 8007f56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f5e:	81a3      	strh	r3, [r4, #12]
 8007f60:	6126      	str	r6, [r4, #16]
 8007f62:	6165      	str	r5, [r4, #20]
 8007f64:	444e      	add	r6, r9
 8007f66:	eba5 0509 	sub.w	r5, r5, r9
 8007f6a:	6026      	str	r6, [r4, #0]
 8007f6c:	60a5      	str	r5, [r4, #8]
 8007f6e:	463e      	mov	r6, r7
 8007f70:	42be      	cmp	r6, r7
 8007f72:	d900      	bls.n	8007f76 <__ssputs_r+0x86>
 8007f74:	463e      	mov	r6, r7
 8007f76:	6820      	ldr	r0, [r4, #0]
 8007f78:	4632      	mov	r2, r6
 8007f7a:	4641      	mov	r1, r8
 8007f7c:	f000 fe72 	bl	8008c64 <memmove>
 8007f80:	68a3      	ldr	r3, [r4, #8]
 8007f82:	1b9b      	subs	r3, r3, r6
 8007f84:	60a3      	str	r3, [r4, #8]
 8007f86:	6823      	ldr	r3, [r4, #0]
 8007f88:	4433      	add	r3, r6
 8007f8a:	6023      	str	r3, [r4, #0]
 8007f8c:	2000      	movs	r0, #0
 8007f8e:	e7db      	b.n	8007f48 <__ssputs_r+0x58>
 8007f90:	462a      	mov	r2, r5
 8007f92:	f000 fed9 	bl	8008d48 <_realloc_r>
 8007f96:	4606      	mov	r6, r0
 8007f98:	2800      	cmp	r0, #0
 8007f9a:	d1e1      	bne.n	8007f60 <__ssputs_r+0x70>
 8007f9c:	6921      	ldr	r1, [r4, #16]
 8007f9e:	4650      	mov	r0, sl
 8007fa0:	f000 fe86 	bl	8008cb0 <_free_r>
 8007fa4:	e7c7      	b.n	8007f36 <__ssputs_r+0x46>
	...

08007fa8 <_svfiprintf_r>:
 8007fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fac:	4698      	mov	r8, r3
 8007fae:	898b      	ldrh	r3, [r1, #12]
 8007fb0:	061b      	lsls	r3, r3, #24
 8007fb2:	b09d      	sub	sp, #116	; 0x74
 8007fb4:	4607      	mov	r7, r0
 8007fb6:	460d      	mov	r5, r1
 8007fb8:	4614      	mov	r4, r2
 8007fba:	d50e      	bpl.n	8007fda <_svfiprintf_r+0x32>
 8007fbc:	690b      	ldr	r3, [r1, #16]
 8007fbe:	b963      	cbnz	r3, 8007fda <_svfiprintf_r+0x32>
 8007fc0:	2140      	movs	r1, #64	; 0x40
 8007fc2:	f7ff ff21 	bl	8007e08 <_malloc_r>
 8007fc6:	6028      	str	r0, [r5, #0]
 8007fc8:	6128      	str	r0, [r5, #16]
 8007fca:	b920      	cbnz	r0, 8007fd6 <_svfiprintf_r+0x2e>
 8007fcc:	230c      	movs	r3, #12
 8007fce:	603b      	str	r3, [r7, #0]
 8007fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fd4:	e0d1      	b.n	800817a <_svfiprintf_r+0x1d2>
 8007fd6:	2340      	movs	r3, #64	; 0x40
 8007fd8:	616b      	str	r3, [r5, #20]
 8007fda:	2300      	movs	r3, #0
 8007fdc:	9309      	str	r3, [sp, #36]	; 0x24
 8007fde:	2320      	movs	r3, #32
 8007fe0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007fe4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fe8:	2330      	movs	r3, #48	; 0x30
 8007fea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008194 <_svfiprintf_r+0x1ec>
 8007fee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ff2:	f04f 0901 	mov.w	r9, #1
 8007ff6:	4623      	mov	r3, r4
 8007ff8:	469a      	mov	sl, r3
 8007ffa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ffe:	b10a      	cbz	r2, 8008004 <_svfiprintf_r+0x5c>
 8008000:	2a25      	cmp	r2, #37	; 0x25
 8008002:	d1f9      	bne.n	8007ff8 <_svfiprintf_r+0x50>
 8008004:	ebba 0b04 	subs.w	fp, sl, r4
 8008008:	d00b      	beq.n	8008022 <_svfiprintf_r+0x7a>
 800800a:	465b      	mov	r3, fp
 800800c:	4622      	mov	r2, r4
 800800e:	4629      	mov	r1, r5
 8008010:	4638      	mov	r0, r7
 8008012:	f7ff ff6d 	bl	8007ef0 <__ssputs_r>
 8008016:	3001      	adds	r0, #1
 8008018:	f000 80aa 	beq.w	8008170 <_svfiprintf_r+0x1c8>
 800801c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800801e:	445a      	add	r2, fp
 8008020:	9209      	str	r2, [sp, #36]	; 0x24
 8008022:	f89a 3000 	ldrb.w	r3, [sl]
 8008026:	2b00      	cmp	r3, #0
 8008028:	f000 80a2 	beq.w	8008170 <_svfiprintf_r+0x1c8>
 800802c:	2300      	movs	r3, #0
 800802e:	f04f 32ff 	mov.w	r2, #4294967295
 8008032:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008036:	f10a 0a01 	add.w	sl, sl, #1
 800803a:	9304      	str	r3, [sp, #16]
 800803c:	9307      	str	r3, [sp, #28]
 800803e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008042:	931a      	str	r3, [sp, #104]	; 0x68
 8008044:	4654      	mov	r4, sl
 8008046:	2205      	movs	r2, #5
 8008048:	f814 1b01 	ldrb.w	r1, [r4], #1
 800804c:	4851      	ldr	r0, [pc, #324]	; (8008194 <_svfiprintf_r+0x1ec>)
 800804e:	f7f8 f8d7 	bl	8000200 <memchr>
 8008052:	9a04      	ldr	r2, [sp, #16]
 8008054:	b9d8      	cbnz	r0, 800808e <_svfiprintf_r+0xe6>
 8008056:	06d0      	lsls	r0, r2, #27
 8008058:	bf44      	itt	mi
 800805a:	2320      	movmi	r3, #32
 800805c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008060:	0711      	lsls	r1, r2, #28
 8008062:	bf44      	itt	mi
 8008064:	232b      	movmi	r3, #43	; 0x2b
 8008066:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800806a:	f89a 3000 	ldrb.w	r3, [sl]
 800806e:	2b2a      	cmp	r3, #42	; 0x2a
 8008070:	d015      	beq.n	800809e <_svfiprintf_r+0xf6>
 8008072:	9a07      	ldr	r2, [sp, #28]
 8008074:	4654      	mov	r4, sl
 8008076:	2000      	movs	r0, #0
 8008078:	f04f 0c0a 	mov.w	ip, #10
 800807c:	4621      	mov	r1, r4
 800807e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008082:	3b30      	subs	r3, #48	; 0x30
 8008084:	2b09      	cmp	r3, #9
 8008086:	d94e      	bls.n	8008126 <_svfiprintf_r+0x17e>
 8008088:	b1b0      	cbz	r0, 80080b8 <_svfiprintf_r+0x110>
 800808a:	9207      	str	r2, [sp, #28]
 800808c:	e014      	b.n	80080b8 <_svfiprintf_r+0x110>
 800808e:	eba0 0308 	sub.w	r3, r0, r8
 8008092:	fa09 f303 	lsl.w	r3, r9, r3
 8008096:	4313      	orrs	r3, r2
 8008098:	9304      	str	r3, [sp, #16]
 800809a:	46a2      	mov	sl, r4
 800809c:	e7d2      	b.n	8008044 <_svfiprintf_r+0x9c>
 800809e:	9b03      	ldr	r3, [sp, #12]
 80080a0:	1d19      	adds	r1, r3, #4
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	9103      	str	r1, [sp, #12]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	bfbb      	ittet	lt
 80080aa:	425b      	neglt	r3, r3
 80080ac:	f042 0202 	orrlt.w	r2, r2, #2
 80080b0:	9307      	strge	r3, [sp, #28]
 80080b2:	9307      	strlt	r3, [sp, #28]
 80080b4:	bfb8      	it	lt
 80080b6:	9204      	strlt	r2, [sp, #16]
 80080b8:	7823      	ldrb	r3, [r4, #0]
 80080ba:	2b2e      	cmp	r3, #46	; 0x2e
 80080bc:	d10c      	bne.n	80080d8 <_svfiprintf_r+0x130>
 80080be:	7863      	ldrb	r3, [r4, #1]
 80080c0:	2b2a      	cmp	r3, #42	; 0x2a
 80080c2:	d135      	bne.n	8008130 <_svfiprintf_r+0x188>
 80080c4:	9b03      	ldr	r3, [sp, #12]
 80080c6:	1d1a      	adds	r2, r3, #4
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	9203      	str	r2, [sp, #12]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	bfb8      	it	lt
 80080d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80080d4:	3402      	adds	r4, #2
 80080d6:	9305      	str	r3, [sp, #20]
 80080d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80081a4 <_svfiprintf_r+0x1fc>
 80080dc:	7821      	ldrb	r1, [r4, #0]
 80080de:	2203      	movs	r2, #3
 80080e0:	4650      	mov	r0, sl
 80080e2:	f7f8 f88d 	bl	8000200 <memchr>
 80080e6:	b140      	cbz	r0, 80080fa <_svfiprintf_r+0x152>
 80080e8:	2340      	movs	r3, #64	; 0x40
 80080ea:	eba0 000a 	sub.w	r0, r0, sl
 80080ee:	fa03 f000 	lsl.w	r0, r3, r0
 80080f2:	9b04      	ldr	r3, [sp, #16]
 80080f4:	4303      	orrs	r3, r0
 80080f6:	3401      	adds	r4, #1
 80080f8:	9304      	str	r3, [sp, #16]
 80080fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080fe:	4826      	ldr	r0, [pc, #152]	; (8008198 <_svfiprintf_r+0x1f0>)
 8008100:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008104:	2206      	movs	r2, #6
 8008106:	f7f8 f87b 	bl	8000200 <memchr>
 800810a:	2800      	cmp	r0, #0
 800810c:	d038      	beq.n	8008180 <_svfiprintf_r+0x1d8>
 800810e:	4b23      	ldr	r3, [pc, #140]	; (800819c <_svfiprintf_r+0x1f4>)
 8008110:	bb1b      	cbnz	r3, 800815a <_svfiprintf_r+0x1b2>
 8008112:	9b03      	ldr	r3, [sp, #12]
 8008114:	3307      	adds	r3, #7
 8008116:	f023 0307 	bic.w	r3, r3, #7
 800811a:	3308      	adds	r3, #8
 800811c:	9303      	str	r3, [sp, #12]
 800811e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008120:	4433      	add	r3, r6
 8008122:	9309      	str	r3, [sp, #36]	; 0x24
 8008124:	e767      	b.n	8007ff6 <_svfiprintf_r+0x4e>
 8008126:	fb0c 3202 	mla	r2, ip, r2, r3
 800812a:	460c      	mov	r4, r1
 800812c:	2001      	movs	r0, #1
 800812e:	e7a5      	b.n	800807c <_svfiprintf_r+0xd4>
 8008130:	2300      	movs	r3, #0
 8008132:	3401      	adds	r4, #1
 8008134:	9305      	str	r3, [sp, #20]
 8008136:	4619      	mov	r1, r3
 8008138:	f04f 0c0a 	mov.w	ip, #10
 800813c:	4620      	mov	r0, r4
 800813e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008142:	3a30      	subs	r2, #48	; 0x30
 8008144:	2a09      	cmp	r2, #9
 8008146:	d903      	bls.n	8008150 <_svfiprintf_r+0x1a8>
 8008148:	2b00      	cmp	r3, #0
 800814a:	d0c5      	beq.n	80080d8 <_svfiprintf_r+0x130>
 800814c:	9105      	str	r1, [sp, #20]
 800814e:	e7c3      	b.n	80080d8 <_svfiprintf_r+0x130>
 8008150:	fb0c 2101 	mla	r1, ip, r1, r2
 8008154:	4604      	mov	r4, r0
 8008156:	2301      	movs	r3, #1
 8008158:	e7f0      	b.n	800813c <_svfiprintf_r+0x194>
 800815a:	ab03      	add	r3, sp, #12
 800815c:	9300      	str	r3, [sp, #0]
 800815e:	462a      	mov	r2, r5
 8008160:	4b0f      	ldr	r3, [pc, #60]	; (80081a0 <_svfiprintf_r+0x1f8>)
 8008162:	a904      	add	r1, sp, #16
 8008164:	4638      	mov	r0, r7
 8008166:	f3af 8000 	nop.w
 800816a:	1c42      	adds	r2, r0, #1
 800816c:	4606      	mov	r6, r0
 800816e:	d1d6      	bne.n	800811e <_svfiprintf_r+0x176>
 8008170:	89ab      	ldrh	r3, [r5, #12]
 8008172:	065b      	lsls	r3, r3, #25
 8008174:	f53f af2c 	bmi.w	8007fd0 <_svfiprintf_r+0x28>
 8008178:	9809      	ldr	r0, [sp, #36]	; 0x24
 800817a:	b01d      	add	sp, #116	; 0x74
 800817c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008180:	ab03      	add	r3, sp, #12
 8008182:	9300      	str	r3, [sp, #0]
 8008184:	462a      	mov	r2, r5
 8008186:	4b06      	ldr	r3, [pc, #24]	; (80081a0 <_svfiprintf_r+0x1f8>)
 8008188:	a904      	add	r1, sp, #16
 800818a:	4638      	mov	r0, r7
 800818c:	f000 f9d4 	bl	8008538 <_printf_i>
 8008190:	e7eb      	b.n	800816a <_svfiprintf_r+0x1c2>
 8008192:	bf00      	nop
 8008194:	08009298 	.word	0x08009298
 8008198:	080092a2 	.word	0x080092a2
 800819c:	00000000 	.word	0x00000000
 80081a0:	08007ef1 	.word	0x08007ef1
 80081a4:	0800929e 	.word	0x0800929e

080081a8 <__sfputc_r>:
 80081a8:	6893      	ldr	r3, [r2, #8]
 80081aa:	3b01      	subs	r3, #1
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	b410      	push	{r4}
 80081b0:	6093      	str	r3, [r2, #8]
 80081b2:	da08      	bge.n	80081c6 <__sfputc_r+0x1e>
 80081b4:	6994      	ldr	r4, [r2, #24]
 80081b6:	42a3      	cmp	r3, r4
 80081b8:	db01      	blt.n	80081be <__sfputc_r+0x16>
 80081ba:	290a      	cmp	r1, #10
 80081bc:	d103      	bne.n	80081c6 <__sfputc_r+0x1e>
 80081be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081c2:	f000 bb33 	b.w	800882c <__swbuf_r>
 80081c6:	6813      	ldr	r3, [r2, #0]
 80081c8:	1c58      	adds	r0, r3, #1
 80081ca:	6010      	str	r0, [r2, #0]
 80081cc:	7019      	strb	r1, [r3, #0]
 80081ce:	4608      	mov	r0, r1
 80081d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081d4:	4770      	bx	lr

080081d6 <__sfputs_r>:
 80081d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081d8:	4606      	mov	r6, r0
 80081da:	460f      	mov	r7, r1
 80081dc:	4614      	mov	r4, r2
 80081de:	18d5      	adds	r5, r2, r3
 80081e0:	42ac      	cmp	r4, r5
 80081e2:	d101      	bne.n	80081e8 <__sfputs_r+0x12>
 80081e4:	2000      	movs	r0, #0
 80081e6:	e007      	b.n	80081f8 <__sfputs_r+0x22>
 80081e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081ec:	463a      	mov	r2, r7
 80081ee:	4630      	mov	r0, r6
 80081f0:	f7ff ffda 	bl	80081a8 <__sfputc_r>
 80081f4:	1c43      	adds	r3, r0, #1
 80081f6:	d1f3      	bne.n	80081e0 <__sfputs_r+0xa>
 80081f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080081fc <_vfiprintf_r>:
 80081fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008200:	460d      	mov	r5, r1
 8008202:	b09d      	sub	sp, #116	; 0x74
 8008204:	4614      	mov	r4, r2
 8008206:	4698      	mov	r8, r3
 8008208:	4606      	mov	r6, r0
 800820a:	b118      	cbz	r0, 8008214 <_vfiprintf_r+0x18>
 800820c:	6983      	ldr	r3, [r0, #24]
 800820e:	b90b      	cbnz	r3, 8008214 <_vfiprintf_r+0x18>
 8008210:	f7ff fd3a 	bl	8007c88 <__sinit>
 8008214:	4b89      	ldr	r3, [pc, #548]	; (800843c <_vfiprintf_r+0x240>)
 8008216:	429d      	cmp	r5, r3
 8008218:	d11b      	bne.n	8008252 <_vfiprintf_r+0x56>
 800821a:	6875      	ldr	r5, [r6, #4]
 800821c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800821e:	07d9      	lsls	r1, r3, #31
 8008220:	d405      	bmi.n	800822e <_vfiprintf_r+0x32>
 8008222:	89ab      	ldrh	r3, [r5, #12]
 8008224:	059a      	lsls	r2, r3, #22
 8008226:	d402      	bmi.n	800822e <_vfiprintf_r+0x32>
 8008228:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800822a:	f7ff fdcb 	bl	8007dc4 <__retarget_lock_acquire_recursive>
 800822e:	89ab      	ldrh	r3, [r5, #12]
 8008230:	071b      	lsls	r3, r3, #28
 8008232:	d501      	bpl.n	8008238 <_vfiprintf_r+0x3c>
 8008234:	692b      	ldr	r3, [r5, #16]
 8008236:	b9eb      	cbnz	r3, 8008274 <_vfiprintf_r+0x78>
 8008238:	4629      	mov	r1, r5
 800823a:	4630      	mov	r0, r6
 800823c:	f000 fb5a 	bl	80088f4 <__swsetup_r>
 8008240:	b1c0      	cbz	r0, 8008274 <_vfiprintf_r+0x78>
 8008242:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008244:	07dc      	lsls	r4, r3, #31
 8008246:	d50e      	bpl.n	8008266 <_vfiprintf_r+0x6a>
 8008248:	f04f 30ff 	mov.w	r0, #4294967295
 800824c:	b01d      	add	sp, #116	; 0x74
 800824e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008252:	4b7b      	ldr	r3, [pc, #492]	; (8008440 <_vfiprintf_r+0x244>)
 8008254:	429d      	cmp	r5, r3
 8008256:	d101      	bne.n	800825c <_vfiprintf_r+0x60>
 8008258:	68b5      	ldr	r5, [r6, #8]
 800825a:	e7df      	b.n	800821c <_vfiprintf_r+0x20>
 800825c:	4b79      	ldr	r3, [pc, #484]	; (8008444 <_vfiprintf_r+0x248>)
 800825e:	429d      	cmp	r5, r3
 8008260:	bf08      	it	eq
 8008262:	68f5      	ldreq	r5, [r6, #12]
 8008264:	e7da      	b.n	800821c <_vfiprintf_r+0x20>
 8008266:	89ab      	ldrh	r3, [r5, #12]
 8008268:	0598      	lsls	r0, r3, #22
 800826a:	d4ed      	bmi.n	8008248 <_vfiprintf_r+0x4c>
 800826c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800826e:	f7ff fdaa 	bl	8007dc6 <__retarget_lock_release_recursive>
 8008272:	e7e9      	b.n	8008248 <_vfiprintf_r+0x4c>
 8008274:	2300      	movs	r3, #0
 8008276:	9309      	str	r3, [sp, #36]	; 0x24
 8008278:	2320      	movs	r3, #32
 800827a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800827e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008282:	2330      	movs	r3, #48	; 0x30
 8008284:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008448 <_vfiprintf_r+0x24c>
 8008288:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800828c:	f04f 0901 	mov.w	r9, #1
 8008290:	4623      	mov	r3, r4
 8008292:	469a      	mov	sl, r3
 8008294:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008298:	b10a      	cbz	r2, 800829e <_vfiprintf_r+0xa2>
 800829a:	2a25      	cmp	r2, #37	; 0x25
 800829c:	d1f9      	bne.n	8008292 <_vfiprintf_r+0x96>
 800829e:	ebba 0b04 	subs.w	fp, sl, r4
 80082a2:	d00b      	beq.n	80082bc <_vfiprintf_r+0xc0>
 80082a4:	465b      	mov	r3, fp
 80082a6:	4622      	mov	r2, r4
 80082a8:	4629      	mov	r1, r5
 80082aa:	4630      	mov	r0, r6
 80082ac:	f7ff ff93 	bl	80081d6 <__sfputs_r>
 80082b0:	3001      	adds	r0, #1
 80082b2:	f000 80aa 	beq.w	800840a <_vfiprintf_r+0x20e>
 80082b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082b8:	445a      	add	r2, fp
 80082ba:	9209      	str	r2, [sp, #36]	; 0x24
 80082bc:	f89a 3000 	ldrb.w	r3, [sl]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	f000 80a2 	beq.w	800840a <_vfiprintf_r+0x20e>
 80082c6:	2300      	movs	r3, #0
 80082c8:	f04f 32ff 	mov.w	r2, #4294967295
 80082cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082d0:	f10a 0a01 	add.w	sl, sl, #1
 80082d4:	9304      	str	r3, [sp, #16]
 80082d6:	9307      	str	r3, [sp, #28]
 80082d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082dc:	931a      	str	r3, [sp, #104]	; 0x68
 80082de:	4654      	mov	r4, sl
 80082e0:	2205      	movs	r2, #5
 80082e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082e6:	4858      	ldr	r0, [pc, #352]	; (8008448 <_vfiprintf_r+0x24c>)
 80082e8:	f7f7 ff8a 	bl	8000200 <memchr>
 80082ec:	9a04      	ldr	r2, [sp, #16]
 80082ee:	b9d8      	cbnz	r0, 8008328 <_vfiprintf_r+0x12c>
 80082f0:	06d1      	lsls	r1, r2, #27
 80082f2:	bf44      	itt	mi
 80082f4:	2320      	movmi	r3, #32
 80082f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082fa:	0713      	lsls	r3, r2, #28
 80082fc:	bf44      	itt	mi
 80082fe:	232b      	movmi	r3, #43	; 0x2b
 8008300:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008304:	f89a 3000 	ldrb.w	r3, [sl]
 8008308:	2b2a      	cmp	r3, #42	; 0x2a
 800830a:	d015      	beq.n	8008338 <_vfiprintf_r+0x13c>
 800830c:	9a07      	ldr	r2, [sp, #28]
 800830e:	4654      	mov	r4, sl
 8008310:	2000      	movs	r0, #0
 8008312:	f04f 0c0a 	mov.w	ip, #10
 8008316:	4621      	mov	r1, r4
 8008318:	f811 3b01 	ldrb.w	r3, [r1], #1
 800831c:	3b30      	subs	r3, #48	; 0x30
 800831e:	2b09      	cmp	r3, #9
 8008320:	d94e      	bls.n	80083c0 <_vfiprintf_r+0x1c4>
 8008322:	b1b0      	cbz	r0, 8008352 <_vfiprintf_r+0x156>
 8008324:	9207      	str	r2, [sp, #28]
 8008326:	e014      	b.n	8008352 <_vfiprintf_r+0x156>
 8008328:	eba0 0308 	sub.w	r3, r0, r8
 800832c:	fa09 f303 	lsl.w	r3, r9, r3
 8008330:	4313      	orrs	r3, r2
 8008332:	9304      	str	r3, [sp, #16]
 8008334:	46a2      	mov	sl, r4
 8008336:	e7d2      	b.n	80082de <_vfiprintf_r+0xe2>
 8008338:	9b03      	ldr	r3, [sp, #12]
 800833a:	1d19      	adds	r1, r3, #4
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	9103      	str	r1, [sp, #12]
 8008340:	2b00      	cmp	r3, #0
 8008342:	bfbb      	ittet	lt
 8008344:	425b      	neglt	r3, r3
 8008346:	f042 0202 	orrlt.w	r2, r2, #2
 800834a:	9307      	strge	r3, [sp, #28]
 800834c:	9307      	strlt	r3, [sp, #28]
 800834e:	bfb8      	it	lt
 8008350:	9204      	strlt	r2, [sp, #16]
 8008352:	7823      	ldrb	r3, [r4, #0]
 8008354:	2b2e      	cmp	r3, #46	; 0x2e
 8008356:	d10c      	bne.n	8008372 <_vfiprintf_r+0x176>
 8008358:	7863      	ldrb	r3, [r4, #1]
 800835a:	2b2a      	cmp	r3, #42	; 0x2a
 800835c:	d135      	bne.n	80083ca <_vfiprintf_r+0x1ce>
 800835e:	9b03      	ldr	r3, [sp, #12]
 8008360:	1d1a      	adds	r2, r3, #4
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	9203      	str	r2, [sp, #12]
 8008366:	2b00      	cmp	r3, #0
 8008368:	bfb8      	it	lt
 800836a:	f04f 33ff 	movlt.w	r3, #4294967295
 800836e:	3402      	adds	r4, #2
 8008370:	9305      	str	r3, [sp, #20]
 8008372:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008458 <_vfiprintf_r+0x25c>
 8008376:	7821      	ldrb	r1, [r4, #0]
 8008378:	2203      	movs	r2, #3
 800837a:	4650      	mov	r0, sl
 800837c:	f7f7 ff40 	bl	8000200 <memchr>
 8008380:	b140      	cbz	r0, 8008394 <_vfiprintf_r+0x198>
 8008382:	2340      	movs	r3, #64	; 0x40
 8008384:	eba0 000a 	sub.w	r0, r0, sl
 8008388:	fa03 f000 	lsl.w	r0, r3, r0
 800838c:	9b04      	ldr	r3, [sp, #16]
 800838e:	4303      	orrs	r3, r0
 8008390:	3401      	adds	r4, #1
 8008392:	9304      	str	r3, [sp, #16]
 8008394:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008398:	482c      	ldr	r0, [pc, #176]	; (800844c <_vfiprintf_r+0x250>)
 800839a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800839e:	2206      	movs	r2, #6
 80083a0:	f7f7 ff2e 	bl	8000200 <memchr>
 80083a4:	2800      	cmp	r0, #0
 80083a6:	d03f      	beq.n	8008428 <_vfiprintf_r+0x22c>
 80083a8:	4b29      	ldr	r3, [pc, #164]	; (8008450 <_vfiprintf_r+0x254>)
 80083aa:	bb1b      	cbnz	r3, 80083f4 <_vfiprintf_r+0x1f8>
 80083ac:	9b03      	ldr	r3, [sp, #12]
 80083ae:	3307      	adds	r3, #7
 80083b0:	f023 0307 	bic.w	r3, r3, #7
 80083b4:	3308      	adds	r3, #8
 80083b6:	9303      	str	r3, [sp, #12]
 80083b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083ba:	443b      	add	r3, r7
 80083bc:	9309      	str	r3, [sp, #36]	; 0x24
 80083be:	e767      	b.n	8008290 <_vfiprintf_r+0x94>
 80083c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80083c4:	460c      	mov	r4, r1
 80083c6:	2001      	movs	r0, #1
 80083c8:	e7a5      	b.n	8008316 <_vfiprintf_r+0x11a>
 80083ca:	2300      	movs	r3, #0
 80083cc:	3401      	adds	r4, #1
 80083ce:	9305      	str	r3, [sp, #20]
 80083d0:	4619      	mov	r1, r3
 80083d2:	f04f 0c0a 	mov.w	ip, #10
 80083d6:	4620      	mov	r0, r4
 80083d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083dc:	3a30      	subs	r2, #48	; 0x30
 80083de:	2a09      	cmp	r2, #9
 80083e0:	d903      	bls.n	80083ea <_vfiprintf_r+0x1ee>
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d0c5      	beq.n	8008372 <_vfiprintf_r+0x176>
 80083e6:	9105      	str	r1, [sp, #20]
 80083e8:	e7c3      	b.n	8008372 <_vfiprintf_r+0x176>
 80083ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80083ee:	4604      	mov	r4, r0
 80083f0:	2301      	movs	r3, #1
 80083f2:	e7f0      	b.n	80083d6 <_vfiprintf_r+0x1da>
 80083f4:	ab03      	add	r3, sp, #12
 80083f6:	9300      	str	r3, [sp, #0]
 80083f8:	462a      	mov	r2, r5
 80083fa:	4b16      	ldr	r3, [pc, #88]	; (8008454 <_vfiprintf_r+0x258>)
 80083fc:	a904      	add	r1, sp, #16
 80083fe:	4630      	mov	r0, r6
 8008400:	f3af 8000 	nop.w
 8008404:	4607      	mov	r7, r0
 8008406:	1c78      	adds	r0, r7, #1
 8008408:	d1d6      	bne.n	80083b8 <_vfiprintf_r+0x1bc>
 800840a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800840c:	07d9      	lsls	r1, r3, #31
 800840e:	d405      	bmi.n	800841c <_vfiprintf_r+0x220>
 8008410:	89ab      	ldrh	r3, [r5, #12]
 8008412:	059a      	lsls	r2, r3, #22
 8008414:	d402      	bmi.n	800841c <_vfiprintf_r+0x220>
 8008416:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008418:	f7ff fcd5 	bl	8007dc6 <__retarget_lock_release_recursive>
 800841c:	89ab      	ldrh	r3, [r5, #12]
 800841e:	065b      	lsls	r3, r3, #25
 8008420:	f53f af12 	bmi.w	8008248 <_vfiprintf_r+0x4c>
 8008424:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008426:	e711      	b.n	800824c <_vfiprintf_r+0x50>
 8008428:	ab03      	add	r3, sp, #12
 800842a:	9300      	str	r3, [sp, #0]
 800842c:	462a      	mov	r2, r5
 800842e:	4b09      	ldr	r3, [pc, #36]	; (8008454 <_vfiprintf_r+0x258>)
 8008430:	a904      	add	r1, sp, #16
 8008432:	4630      	mov	r0, r6
 8008434:	f000 f880 	bl	8008538 <_printf_i>
 8008438:	e7e4      	b.n	8008404 <_vfiprintf_r+0x208>
 800843a:	bf00      	nop
 800843c:	08009258 	.word	0x08009258
 8008440:	08009278 	.word	0x08009278
 8008444:	08009238 	.word	0x08009238
 8008448:	08009298 	.word	0x08009298
 800844c:	080092a2 	.word	0x080092a2
 8008450:	00000000 	.word	0x00000000
 8008454:	080081d7 	.word	0x080081d7
 8008458:	0800929e 	.word	0x0800929e

0800845c <_printf_common>:
 800845c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008460:	4616      	mov	r6, r2
 8008462:	4699      	mov	r9, r3
 8008464:	688a      	ldr	r2, [r1, #8]
 8008466:	690b      	ldr	r3, [r1, #16]
 8008468:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800846c:	4293      	cmp	r3, r2
 800846e:	bfb8      	it	lt
 8008470:	4613      	movlt	r3, r2
 8008472:	6033      	str	r3, [r6, #0]
 8008474:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008478:	4607      	mov	r7, r0
 800847a:	460c      	mov	r4, r1
 800847c:	b10a      	cbz	r2, 8008482 <_printf_common+0x26>
 800847e:	3301      	adds	r3, #1
 8008480:	6033      	str	r3, [r6, #0]
 8008482:	6823      	ldr	r3, [r4, #0]
 8008484:	0699      	lsls	r1, r3, #26
 8008486:	bf42      	ittt	mi
 8008488:	6833      	ldrmi	r3, [r6, #0]
 800848a:	3302      	addmi	r3, #2
 800848c:	6033      	strmi	r3, [r6, #0]
 800848e:	6825      	ldr	r5, [r4, #0]
 8008490:	f015 0506 	ands.w	r5, r5, #6
 8008494:	d106      	bne.n	80084a4 <_printf_common+0x48>
 8008496:	f104 0a19 	add.w	sl, r4, #25
 800849a:	68e3      	ldr	r3, [r4, #12]
 800849c:	6832      	ldr	r2, [r6, #0]
 800849e:	1a9b      	subs	r3, r3, r2
 80084a0:	42ab      	cmp	r3, r5
 80084a2:	dc26      	bgt.n	80084f2 <_printf_common+0x96>
 80084a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80084a8:	1e13      	subs	r3, r2, #0
 80084aa:	6822      	ldr	r2, [r4, #0]
 80084ac:	bf18      	it	ne
 80084ae:	2301      	movne	r3, #1
 80084b0:	0692      	lsls	r2, r2, #26
 80084b2:	d42b      	bmi.n	800850c <_printf_common+0xb0>
 80084b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80084b8:	4649      	mov	r1, r9
 80084ba:	4638      	mov	r0, r7
 80084bc:	47c0      	blx	r8
 80084be:	3001      	adds	r0, #1
 80084c0:	d01e      	beq.n	8008500 <_printf_common+0xa4>
 80084c2:	6823      	ldr	r3, [r4, #0]
 80084c4:	68e5      	ldr	r5, [r4, #12]
 80084c6:	6832      	ldr	r2, [r6, #0]
 80084c8:	f003 0306 	and.w	r3, r3, #6
 80084cc:	2b04      	cmp	r3, #4
 80084ce:	bf08      	it	eq
 80084d0:	1aad      	subeq	r5, r5, r2
 80084d2:	68a3      	ldr	r3, [r4, #8]
 80084d4:	6922      	ldr	r2, [r4, #16]
 80084d6:	bf0c      	ite	eq
 80084d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084dc:	2500      	movne	r5, #0
 80084de:	4293      	cmp	r3, r2
 80084e0:	bfc4      	itt	gt
 80084e2:	1a9b      	subgt	r3, r3, r2
 80084e4:	18ed      	addgt	r5, r5, r3
 80084e6:	2600      	movs	r6, #0
 80084e8:	341a      	adds	r4, #26
 80084ea:	42b5      	cmp	r5, r6
 80084ec:	d11a      	bne.n	8008524 <_printf_common+0xc8>
 80084ee:	2000      	movs	r0, #0
 80084f0:	e008      	b.n	8008504 <_printf_common+0xa8>
 80084f2:	2301      	movs	r3, #1
 80084f4:	4652      	mov	r2, sl
 80084f6:	4649      	mov	r1, r9
 80084f8:	4638      	mov	r0, r7
 80084fa:	47c0      	blx	r8
 80084fc:	3001      	adds	r0, #1
 80084fe:	d103      	bne.n	8008508 <_printf_common+0xac>
 8008500:	f04f 30ff 	mov.w	r0, #4294967295
 8008504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008508:	3501      	adds	r5, #1
 800850a:	e7c6      	b.n	800849a <_printf_common+0x3e>
 800850c:	18e1      	adds	r1, r4, r3
 800850e:	1c5a      	adds	r2, r3, #1
 8008510:	2030      	movs	r0, #48	; 0x30
 8008512:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008516:	4422      	add	r2, r4
 8008518:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800851c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008520:	3302      	adds	r3, #2
 8008522:	e7c7      	b.n	80084b4 <_printf_common+0x58>
 8008524:	2301      	movs	r3, #1
 8008526:	4622      	mov	r2, r4
 8008528:	4649      	mov	r1, r9
 800852a:	4638      	mov	r0, r7
 800852c:	47c0      	blx	r8
 800852e:	3001      	adds	r0, #1
 8008530:	d0e6      	beq.n	8008500 <_printf_common+0xa4>
 8008532:	3601      	adds	r6, #1
 8008534:	e7d9      	b.n	80084ea <_printf_common+0x8e>
	...

08008538 <_printf_i>:
 8008538:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800853c:	7e0f      	ldrb	r7, [r1, #24]
 800853e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008540:	2f78      	cmp	r7, #120	; 0x78
 8008542:	4691      	mov	r9, r2
 8008544:	4680      	mov	r8, r0
 8008546:	460c      	mov	r4, r1
 8008548:	469a      	mov	sl, r3
 800854a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800854e:	d807      	bhi.n	8008560 <_printf_i+0x28>
 8008550:	2f62      	cmp	r7, #98	; 0x62
 8008552:	d80a      	bhi.n	800856a <_printf_i+0x32>
 8008554:	2f00      	cmp	r7, #0
 8008556:	f000 80d8 	beq.w	800870a <_printf_i+0x1d2>
 800855a:	2f58      	cmp	r7, #88	; 0x58
 800855c:	f000 80a3 	beq.w	80086a6 <_printf_i+0x16e>
 8008560:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008564:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008568:	e03a      	b.n	80085e0 <_printf_i+0xa8>
 800856a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800856e:	2b15      	cmp	r3, #21
 8008570:	d8f6      	bhi.n	8008560 <_printf_i+0x28>
 8008572:	a101      	add	r1, pc, #4	; (adr r1, 8008578 <_printf_i+0x40>)
 8008574:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008578:	080085d1 	.word	0x080085d1
 800857c:	080085e5 	.word	0x080085e5
 8008580:	08008561 	.word	0x08008561
 8008584:	08008561 	.word	0x08008561
 8008588:	08008561 	.word	0x08008561
 800858c:	08008561 	.word	0x08008561
 8008590:	080085e5 	.word	0x080085e5
 8008594:	08008561 	.word	0x08008561
 8008598:	08008561 	.word	0x08008561
 800859c:	08008561 	.word	0x08008561
 80085a0:	08008561 	.word	0x08008561
 80085a4:	080086f1 	.word	0x080086f1
 80085a8:	08008615 	.word	0x08008615
 80085ac:	080086d3 	.word	0x080086d3
 80085b0:	08008561 	.word	0x08008561
 80085b4:	08008561 	.word	0x08008561
 80085b8:	08008713 	.word	0x08008713
 80085bc:	08008561 	.word	0x08008561
 80085c0:	08008615 	.word	0x08008615
 80085c4:	08008561 	.word	0x08008561
 80085c8:	08008561 	.word	0x08008561
 80085cc:	080086db 	.word	0x080086db
 80085d0:	682b      	ldr	r3, [r5, #0]
 80085d2:	1d1a      	adds	r2, r3, #4
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	602a      	str	r2, [r5, #0]
 80085d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80085e0:	2301      	movs	r3, #1
 80085e2:	e0a3      	b.n	800872c <_printf_i+0x1f4>
 80085e4:	6820      	ldr	r0, [r4, #0]
 80085e6:	6829      	ldr	r1, [r5, #0]
 80085e8:	0606      	lsls	r6, r0, #24
 80085ea:	f101 0304 	add.w	r3, r1, #4
 80085ee:	d50a      	bpl.n	8008606 <_printf_i+0xce>
 80085f0:	680e      	ldr	r6, [r1, #0]
 80085f2:	602b      	str	r3, [r5, #0]
 80085f4:	2e00      	cmp	r6, #0
 80085f6:	da03      	bge.n	8008600 <_printf_i+0xc8>
 80085f8:	232d      	movs	r3, #45	; 0x2d
 80085fa:	4276      	negs	r6, r6
 80085fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008600:	485e      	ldr	r0, [pc, #376]	; (800877c <_printf_i+0x244>)
 8008602:	230a      	movs	r3, #10
 8008604:	e019      	b.n	800863a <_printf_i+0x102>
 8008606:	680e      	ldr	r6, [r1, #0]
 8008608:	602b      	str	r3, [r5, #0]
 800860a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800860e:	bf18      	it	ne
 8008610:	b236      	sxthne	r6, r6
 8008612:	e7ef      	b.n	80085f4 <_printf_i+0xbc>
 8008614:	682b      	ldr	r3, [r5, #0]
 8008616:	6820      	ldr	r0, [r4, #0]
 8008618:	1d19      	adds	r1, r3, #4
 800861a:	6029      	str	r1, [r5, #0]
 800861c:	0601      	lsls	r1, r0, #24
 800861e:	d501      	bpl.n	8008624 <_printf_i+0xec>
 8008620:	681e      	ldr	r6, [r3, #0]
 8008622:	e002      	b.n	800862a <_printf_i+0xf2>
 8008624:	0646      	lsls	r6, r0, #25
 8008626:	d5fb      	bpl.n	8008620 <_printf_i+0xe8>
 8008628:	881e      	ldrh	r6, [r3, #0]
 800862a:	4854      	ldr	r0, [pc, #336]	; (800877c <_printf_i+0x244>)
 800862c:	2f6f      	cmp	r7, #111	; 0x6f
 800862e:	bf0c      	ite	eq
 8008630:	2308      	moveq	r3, #8
 8008632:	230a      	movne	r3, #10
 8008634:	2100      	movs	r1, #0
 8008636:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800863a:	6865      	ldr	r5, [r4, #4]
 800863c:	60a5      	str	r5, [r4, #8]
 800863e:	2d00      	cmp	r5, #0
 8008640:	bfa2      	ittt	ge
 8008642:	6821      	ldrge	r1, [r4, #0]
 8008644:	f021 0104 	bicge.w	r1, r1, #4
 8008648:	6021      	strge	r1, [r4, #0]
 800864a:	b90e      	cbnz	r6, 8008650 <_printf_i+0x118>
 800864c:	2d00      	cmp	r5, #0
 800864e:	d04d      	beq.n	80086ec <_printf_i+0x1b4>
 8008650:	4615      	mov	r5, r2
 8008652:	fbb6 f1f3 	udiv	r1, r6, r3
 8008656:	fb03 6711 	mls	r7, r3, r1, r6
 800865a:	5dc7      	ldrb	r7, [r0, r7]
 800865c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008660:	4637      	mov	r7, r6
 8008662:	42bb      	cmp	r3, r7
 8008664:	460e      	mov	r6, r1
 8008666:	d9f4      	bls.n	8008652 <_printf_i+0x11a>
 8008668:	2b08      	cmp	r3, #8
 800866a:	d10b      	bne.n	8008684 <_printf_i+0x14c>
 800866c:	6823      	ldr	r3, [r4, #0]
 800866e:	07de      	lsls	r6, r3, #31
 8008670:	d508      	bpl.n	8008684 <_printf_i+0x14c>
 8008672:	6923      	ldr	r3, [r4, #16]
 8008674:	6861      	ldr	r1, [r4, #4]
 8008676:	4299      	cmp	r1, r3
 8008678:	bfde      	ittt	le
 800867a:	2330      	movle	r3, #48	; 0x30
 800867c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008680:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008684:	1b52      	subs	r2, r2, r5
 8008686:	6122      	str	r2, [r4, #16]
 8008688:	f8cd a000 	str.w	sl, [sp]
 800868c:	464b      	mov	r3, r9
 800868e:	aa03      	add	r2, sp, #12
 8008690:	4621      	mov	r1, r4
 8008692:	4640      	mov	r0, r8
 8008694:	f7ff fee2 	bl	800845c <_printf_common>
 8008698:	3001      	adds	r0, #1
 800869a:	d14c      	bne.n	8008736 <_printf_i+0x1fe>
 800869c:	f04f 30ff 	mov.w	r0, #4294967295
 80086a0:	b004      	add	sp, #16
 80086a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086a6:	4835      	ldr	r0, [pc, #212]	; (800877c <_printf_i+0x244>)
 80086a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80086ac:	6829      	ldr	r1, [r5, #0]
 80086ae:	6823      	ldr	r3, [r4, #0]
 80086b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80086b4:	6029      	str	r1, [r5, #0]
 80086b6:	061d      	lsls	r5, r3, #24
 80086b8:	d514      	bpl.n	80086e4 <_printf_i+0x1ac>
 80086ba:	07df      	lsls	r7, r3, #31
 80086bc:	bf44      	itt	mi
 80086be:	f043 0320 	orrmi.w	r3, r3, #32
 80086c2:	6023      	strmi	r3, [r4, #0]
 80086c4:	b91e      	cbnz	r6, 80086ce <_printf_i+0x196>
 80086c6:	6823      	ldr	r3, [r4, #0]
 80086c8:	f023 0320 	bic.w	r3, r3, #32
 80086cc:	6023      	str	r3, [r4, #0]
 80086ce:	2310      	movs	r3, #16
 80086d0:	e7b0      	b.n	8008634 <_printf_i+0xfc>
 80086d2:	6823      	ldr	r3, [r4, #0]
 80086d4:	f043 0320 	orr.w	r3, r3, #32
 80086d8:	6023      	str	r3, [r4, #0]
 80086da:	2378      	movs	r3, #120	; 0x78
 80086dc:	4828      	ldr	r0, [pc, #160]	; (8008780 <_printf_i+0x248>)
 80086de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80086e2:	e7e3      	b.n	80086ac <_printf_i+0x174>
 80086e4:	0659      	lsls	r1, r3, #25
 80086e6:	bf48      	it	mi
 80086e8:	b2b6      	uxthmi	r6, r6
 80086ea:	e7e6      	b.n	80086ba <_printf_i+0x182>
 80086ec:	4615      	mov	r5, r2
 80086ee:	e7bb      	b.n	8008668 <_printf_i+0x130>
 80086f0:	682b      	ldr	r3, [r5, #0]
 80086f2:	6826      	ldr	r6, [r4, #0]
 80086f4:	6961      	ldr	r1, [r4, #20]
 80086f6:	1d18      	adds	r0, r3, #4
 80086f8:	6028      	str	r0, [r5, #0]
 80086fa:	0635      	lsls	r5, r6, #24
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	d501      	bpl.n	8008704 <_printf_i+0x1cc>
 8008700:	6019      	str	r1, [r3, #0]
 8008702:	e002      	b.n	800870a <_printf_i+0x1d2>
 8008704:	0670      	lsls	r0, r6, #25
 8008706:	d5fb      	bpl.n	8008700 <_printf_i+0x1c8>
 8008708:	8019      	strh	r1, [r3, #0]
 800870a:	2300      	movs	r3, #0
 800870c:	6123      	str	r3, [r4, #16]
 800870e:	4615      	mov	r5, r2
 8008710:	e7ba      	b.n	8008688 <_printf_i+0x150>
 8008712:	682b      	ldr	r3, [r5, #0]
 8008714:	1d1a      	adds	r2, r3, #4
 8008716:	602a      	str	r2, [r5, #0]
 8008718:	681d      	ldr	r5, [r3, #0]
 800871a:	6862      	ldr	r2, [r4, #4]
 800871c:	2100      	movs	r1, #0
 800871e:	4628      	mov	r0, r5
 8008720:	f7f7 fd6e 	bl	8000200 <memchr>
 8008724:	b108      	cbz	r0, 800872a <_printf_i+0x1f2>
 8008726:	1b40      	subs	r0, r0, r5
 8008728:	6060      	str	r0, [r4, #4]
 800872a:	6863      	ldr	r3, [r4, #4]
 800872c:	6123      	str	r3, [r4, #16]
 800872e:	2300      	movs	r3, #0
 8008730:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008734:	e7a8      	b.n	8008688 <_printf_i+0x150>
 8008736:	6923      	ldr	r3, [r4, #16]
 8008738:	462a      	mov	r2, r5
 800873a:	4649      	mov	r1, r9
 800873c:	4640      	mov	r0, r8
 800873e:	47d0      	blx	sl
 8008740:	3001      	adds	r0, #1
 8008742:	d0ab      	beq.n	800869c <_printf_i+0x164>
 8008744:	6823      	ldr	r3, [r4, #0]
 8008746:	079b      	lsls	r3, r3, #30
 8008748:	d413      	bmi.n	8008772 <_printf_i+0x23a>
 800874a:	68e0      	ldr	r0, [r4, #12]
 800874c:	9b03      	ldr	r3, [sp, #12]
 800874e:	4298      	cmp	r0, r3
 8008750:	bfb8      	it	lt
 8008752:	4618      	movlt	r0, r3
 8008754:	e7a4      	b.n	80086a0 <_printf_i+0x168>
 8008756:	2301      	movs	r3, #1
 8008758:	4632      	mov	r2, r6
 800875a:	4649      	mov	r1, r9
 800875c:	4640      	mov	r0, r8
 800875e:	47d0      	blx	sl
 8008760:	3001      	adds	r0, #1
 8008762:	d09b      	beq.n	800869c <_printf_i+0x164>
 8008764:	3501      	adds	r5, #1
 8008766:	68e3      	ldr	r3, [r4, #12]
 8008768:	9903      	ldr	r1, [sp, #12]
 800876a:	1a5b      	subs	r3, r3, r1
 800876c:	42ab      	cmp	r3, r5
 800876e:	dcf2      	bgt.n	8008756 <_printf_i+0x21e>
 8008770:	e7eb      	b.n	800874a <_printf_i+0x212>
 8008772:	2500      	movs	r5, #0
 8008774:	f104 0619 	add.w	r6, r4, #25
 8008778:	e7f5      	b.n	8008766 <_printf_i+0x22e>
 800877a:	bf00      	nop
 800877c:	080092a9 	.word	0x080092a9
 8008780:	080092ba 	.word	0x080092ba

08008784 <_sbrk_r>:
 8008784:	b538      	push	{r3, r4, r5, lr}
 8008786:	4d06      	ldr	r5, [pc, #24]	; (80087a0 <_sbrk_r+0x1c>)
 8008788:	2300      	movs	r3, #0
 800878a:	4604      	mov	r4, r0
 800878c:	4608      	mov	r0, r1
 800878e:	602b      	str	r3, [r5, #0]
 8008790:	f7f8 fec6 	bl	8001520 <_sbrk>
 8008794:	1c43      	adds	r3, r0, #1
 8008796:	d102      	bne.n	800879e <_sbrk_r+0x1a>
 8008798:	682b      	ldr	r3, [r5, #0]
 800879a:	b103      	cbz	r3, 800879e <_sbrk_r+0x1a>
 800879c:	6023      	str	r3, [r4, #0]
 800879e:	bd38      	pop	{r3, r4, r5, pc}
 80087a0:	200193a0 	.word	0x200193a0

080087a4 <__sread>:
 80087a4:	b510      	push	{r4, lr}
 80087a6:	460c      	mov	r4, r1
 80087a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087ac:	f000 fafc 	bl	8008da8 <_read_r>
 80087b0:	2800      	cmp	r0, #0
 80087b2:	bfab      	itete	ge
 80087b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80087b6:	89a3      	ldrhlt	r3, [r4, #12]
 80087b8:	181b      	addge	r3, r3, r0
 80087ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80087be:	bfac      	ite	ge
 80087c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80087c2:	81a3      	strhlt	r3, [r4, #12]
 80087c4:	bd10      	pop	{r4, pc}

080087c6 <__swrite>:
 80087c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087ca:	461f      	mov	r7, r3
 80087cc:	898b      	ldrh	r3, [r1, #12]
 80087ce:	05db      	lsls	r3, r3, #23
 80087d0:	4605      	mov	r5, r0
 80087d2:	460c      	mov	r4, r1
 80087d4:	4616      	mov	r6, r2
 80087d6:	d505      	bpl.n	80087e4 <__swrite+0x1e>
 80087d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087dc:	2302      	movs	r3, #2
 80087de:	2200      	movs	r2, #0
 80087e0:	f000 f9c8 	bl	8008b74 <_lseek_r>
 80087e4:	89a3      	ldrh	r3, [r4, #12]
 80087e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087ee:	81a3      	strh	r3, [r4, #12]
 80087f0:	4632      	mov	r2, r6
 80087f2:	463b      	mov	r3, r7
 80087f4:	4628      	mov	r0, r5
 80087f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087fa:	f000 b869 	b.w	80088d0 <_write_r>

080087fe <__sseek>:
 80087fe:	b510      	push	{r4, lr}
 8008800:	460c      	mov	r4, r1
 8008802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008806:	f000 f9b5 	bl	8008b74 <_lseek_r>
 800880a:	1c43      	adds	r3, r0, #1
 800880c:	89a3      	ldrh	r3, [r4, #12]
 800880e:	bf15      	itete	ne
 8008810:	6560      	strne	r0, [r4, #84]	; 0x54
 8008812:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008816:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800881a:	81a3      	strheq	r3, [r4, #12]
 800881c:	bf18      	it	ne
 800881e:	81a3      	strhne	r3, [r4, #12]
 8008820:	bd10      	pop	{r4, pc}

08008822 <__sclose>:
 8008822:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008826:	f000 b8d3 	b.w	80089d0 <_close_r>
	...

0800882c <__swbuf_r>:
 800882c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800882e:	460e      	mov	r6, r1
 8008830:	4614      	mov	r4, r2
 8008832:	4605      	mov	r5, r0
 8008834:	b118      	cbz	r0, 800883e <__swbuf_r+0x12>
 8008836:	6983      	ldr	r3, [r0, #24]
 8008838:	b90b      	cbnz	r3, 800883e <__swbuf_r+0x12>
 800883a:	f7ff fa25 	bl	8007c88 <__sinit>
 800883e:	4b21      	ldr	r3, [pc, #132]	; (80088c4 <__swbuf_r+0x98>)
 8008840:	429c      	cmp	r4, r3
 8008842:	d12b      	bne.n	800889c <__swbuf_r+0x70>
 8008844:	686c      	ldr	r4, [r5, #4]
 8008846:	69a3      	ldr	r3, [r4, #24]
 8008848:	60a3      	str	r3, [r4, #8]
 800884a:	89a3      	ldrh	r3, [r4, #12]
 800884c:	071a      	lsls	r2, r3, #28
 800884e:	d52f      	bpl.n	80088b0 <__swbuf_r+0x84>
 8008850:	6923      	ldr	r3, [r4, #16]
 8008852:	b36b      	cbz	r3, 80088b0 <__swbuf_r+0x84>
 8008854:	6923      	ldr	r3, [r4, #16]
 8008856:	6820      	ldr	r0, [r4, #0]
 8008858:	1ac0      	subs	r0, r0, r3
 800885a:	6963      	ldr	r3, [r4, #20]
 800885c:	b2f6      	uxtb	r6, r6
 800885e:	4283      	cmp	r3, r0
 8008860:	4637      	mov	r7, r6
 8008862:	dc04      	bgt.n	800886e <__swbuf_r+0x42>
 8008864:	4621      	mov	r1, r4
 8008866:	4628      	mov	r0, r5
 8008868:	f000 f948 	bl	8008afc <_fflush_r>
 800886c:	bb30      	cbnz	r0, 80088bc <__swbuf_r+0x90>
 800886e:	68a3      	ldr	r3, [r4, #8]
 8008870:	3b01      	subs	r3, #1
 8008872:	60a3      	str	r3, [r4, #8]
 8008874:	6823      	ldr	r3, [r4, #0]
 8008876:	1c5a      	adds	r2, r3, #1
 8008878:	6022      	str	r2, [r4, #0]
 800887a:	701e      	strb	r6, [r3, #0]
 800887c:	6963      	ldr	r3, [r4, #20]
 800887e:	3001      	adds	r0, #1
 8008880:	4283      	cmp	r3, r0
 8008882:	d004      	beq.n	800888e <__swbuf_r+0x62>
 8008884:	89a3      	ldrh	r3, [r4, #12]
 8008886:	07db      	lsls	r3, r3, #31
 8008888:	d506      	bpl.n	8008898 <__swbuf_r+0x6c>
 800888a:	2e0a      	cmp	r6, #10
 800888c:	d104      	bne.n	8008898 <__swbuf_r+0x6c>
 800888e:	4621      	mov	r1, r4
 8008890:	4628      	mov	r0, r5
 8008892:	f000 f933 	bl	8008afc <_fflush_r>
 8008896:	b988      	cbnz	r0, 80088bc <__swbuf_r+0x90>
 8008898:	4638      	mov	r0, r7
 800889a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800889c:	4b0a      	ldr	r3, [pc, #40]	; (80088c8 <__swbuf_r+0x9c>)
 800889e:	429c      	cmp	r4, r3
 80088a0:	d101      	bne.n	80088a6 <__swbuf_r+0x7a>
 80088a2:	68ac      	ldr	r4, [r5, #8]
 80088a4:	e7cf      	b.n	8008846 <__swbuf_r+0x1a>
 80088a6:	4b09      	ldr	r3, [pc, #36]	; (80088cc <__swbuf_r+0xa0>)
 80088a8:	429c      	cmp	r4, r3
 80088aa:	bf08      	it	eq
 80088ac:	68ec      	ldreq	r4, [r5, #12]
 80088ae:	e7ca      	b.n	8008846 <__swbuf_r+0x1a>
 80088b0:	4621      	mov	r1, r4
 80088b2:	4628      	mov	r0, r5
 80088b4:	f000 f81e 	bl	80088f4 <__swsetup_r>
 80088b8:	2800      	cmp	r0, #0
 80088ba:	d0cb      	beq.n	8008854 <__swbuf_r+0x28>
 80088bc:	f04f 37ff 	mov.w	r7, #4294967295
 80088c0:	e7ea      	b.n	8008898 <__swbuf_r+0x6c>
 80088c2:	bf00      	nop
 80088c4:	08009258 	.word	0x08009258
 80088c8:	08009278 	.word	0x08009278
 80088cc:	08009238 	.word	0x08009238

080088d0 <_write_r>:
 80088d0:	b538      	push	{r3, r4, r5, lr}
 80088d2:	4d07      	ldr	r5, [pc, #28]	; (80088f0 <_write_r+0x20>)
 80088d4:	4604      	mov	r4, r0
 80088d6:	4608      	mov	r0, r1
 80088d8:	4611      	mov	r1, r2
 80088da:	2200      	movs	r2, #0
 80088dc:	602a      	str	r2, [r5, #0]
 80088de:	461a      	mov	r2, r3
 80088e0:	f7f8 fdcd 	bl	800147e <_write>
 80088e4:	1c43      	adds	r3, r0, #1
 80088e6:	d102      	bne.n	80088ee <_write_r+0x1e>
 80088e8:	682b      	ldr	r3, [r5, #0]
 80088ea:	b103      	cbz	r3, 80088ee <_write_r+0x1e>
 80088ec:	6023      	str	r3, [r4, #0]
 80088ee:	bd38      	pop	{r3, r4, r5, pc}
 80088f0:	200193a0 	.word	0x200193a0

080088f4 <__swsetup_r>:
 80088f4:	4b32      	ldr	r3, [pc, #200]	; (80089c0 <__swsetup_r+0xcc>)
 80088f6:	b570      	push	{r4, r5, r6, lr}
 80088f8:	681d      	ldr	r5, [r3, #0]
 80088fa:	4606      	mov	r6, r0
 80088fc:	460c      	mov	r4, r1
 80088fe:	b125      	cbz	r5, 800890a <__swsetup_r+0x16>
 8008900:	69ab      	ldr	r3, [r5, #24]
 8008902:	b913      	cbnz	r3, 800890a <__swsetup_r+0x16>
 8008904:	4628      	mov	r0, r5
 8008906:	f7ff f9bf 	bl	8007c88 <__sinit>
 800890a:	4b2e      	ldr	r3, [pc, #184]	; (80089c4 <__swsetup_r+0xd0>)
 800890c:	429c      	cmp	r4, r3
 800890e:	d10f      	bne.n	8008930 <__swsetup_r+0x3c>
 8008910:	686c      	ldr	r4, [r5, #4]
 8008912:	89a3      	ldrh	r3, [r4, #12]
 8008914:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008918:	0719      	lsls	r1, r3, #28
 800891a:	d42c      	bmi.n	8008976 <__swsetup_r+0x82>
 800891c:	06dd      	lsls	r5, r3, #27
 800891e:	d411      	bmi.n	8008944 <__swsetup_r+0x50>
 8008920:	2309      	movs	r3, #9
 8008922:	6033      	str	r3, [r6, #0]
 8008924:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008928:	81a3      	strh	r3, [r4, #12]
 800892a:	f04f 30ff 	mov.w	r0, #4294967295
 800892e:	e03e      	b.n	80089ae <__swsetup_r+0xba>
 8008930:	4b25      	ldr	r3, [pc, #148]	; (80089c8 <__swsetup_r+0xd4>)
 8008932:	429c      	cmp	r4, r3
 8008934:	d101      	bne.n	800893a <__swsetup_r+0x46>
 8008936:	68ac      	ldr	r4, [r5, #8]
 8008938:	e7eb      	b.n	8008912 <__swsetup_r+0x1e>
 800893a:	4b24      	ldr	r3, [pc, #144]	; (80089cc <__swsetup_r+0xd8>)
 800893c:	429c      	cmp	r4, r3
 800893e:	bf08      	it	eq
 8008940:	68ec      	ldreq	r4, [r5, #12]
 8008942:	e7e6      	b.n	8008912 <__swsetup_r+0x1e>
 8008944:	0758      	lsls	r0, r3, #29
 8008946:	d512      	bpl.n	800896e <__swsetup_r+0x7a>
 8008948:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800894a:	b141      	cbz	r1, 800895e <__swsetup_r+0x6a>
 800894c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008950:	4299      	cmp	r1, r3
 8008952:	d002      	beq.n	800895a <__swsetup_r+0x66>
 8008954:	4630      	mov	r0, r6
 8008956:	f000 f9ab 	bl	8008cb0 <_free_r>
 800895a:	2300      	movs	r3, #0
 800895c:	6363      	str	r3, [r4, #52]	; 0x34
 800895e:	89a3      	ldrh	r3, [r4, #12]
 8008960:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008964:	81a3      	strh	r3, [r4, #12]
 8008966:	2300      	movs	r3, #0
 8008968:	6063      	str	r3, [r4, #4]
 800896a:	6923      	ldr	r3, [r4, #16]
 800896c:	6023      	str	r3, [r4, #0]
 800896e:	89a3      	ldrh	r3, [r4, #12]
 8008970:	f043 0308 	orr.w	r3, r3, #8
 8008974:	81a3      	strh	r3, [r4, #12]
 8008976:	6923      	ldr	r3, [r4, #16]
 8008978:	b94b      	cbnz	r3, 800898e <__swsetup_r+0x9a>
 800897a:	89a3      	ldrh	r3, [r4, #12]
 800897c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008984:	d003      	beq.n	800898e <__swsetup_r+0x9a>
 8008986:	4621      	mov	r1, r4
 8008988:	4630      	mov	r0, r6
 800898a:	f000 f92b 	bl	8008be4 <__smakebuf_r>
 800898e:	89a0      	ldrh	r0, [r4, #12]
 8008990:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008994:	f010 0301 	ands.w	r3, r0, #1
 8008998:	d00a      	beq.n	80089b0 <__swsetup_r+0xbc>
 800899a:	2300      	movs	r3, #0
 800899c:	60a3      	str	r3, [r4, #8]
 800899e:	6963      	ldr	r3, [r4, #20]
 80089a0:	425b      	negs	r3, r3
 80089a2:	61a3      	str	r3, [r4, #24]
 80089a4:	6923      	ldr	r3, [r4, #16]
 80089a6:	b943      	cbnz	r3, 80089ba <__swsetup_r+0xc6>
 80089a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80089ac:	d1ba      	bne.n	8008924 <__swsetup_r+0x30>
 80089ae:	bd70      	pop	{r4, r5, r6, pc}
 80089b0:	0781      	lsls	r1, r0, #30
 80089b2:	bf58      	it	pl
 80089b4:	6963      	ldrpl	r3, [r4, #20]
 80089b6:	60a3      	str	r3, [r4, #8]
 80089b8:	e7f4      	b.n	80089a4 <__swsetup_r+0xb0>
 80089ba:	2000      	movs	r0, #0
 80089bc:	e7f7      	b.n	80089ae <__swsetup_r+0xba>
 80089be:	bf00      	nop
 80089c0:	20000028 	.word	0x20000028
 80089c4:	08009258 	.word	0x08009258
 80089c8:	08009278 	.word	0x08009278
 80089cc:	08009238 	.word	0x08009238

080089d0 <_close_r>:
 80089d0:	b538      	push	{r3, r4, r5, lr}
 80089d2:	4d06      	ldr	r5, [pc, #24]	; (80089ec <_close_r+0x1c>)
 80089d4:	2300      	movs	r3, #0
 80089d6:	4604      	mov	r4, r0
 80089d8:	4608      	mov	r0, r1
 80089da:	602b      	str	r3, [r5, #0]
 80089dc:	f7f8 fd6b 	bl	80014b6 <_close>
 80089e0:	1c43      	adds	r3, r0, #1
 80089e2:	d102      	bne.n	80089ea <_close_r+0x1a>
 80089e4:	682b      	ldr	r3, [r5, #0]
 80089e6:	b103      	cbz	r3, 80089ea <_close_r+0x1a>
 80089e8:	6023      	str	r3, [r4, #0]
 80089ea:	bd38      	pop	{r3, r4, r5, pc}
 80089ec:	200193a0 	.word	0x200193a0

080089f0 <__sflush_r>:
 80089f0:	898a      	ldrh	r2, [r1, #12]
 80089f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089f6:	4605      	mov	r5, r0
 80089f8:	0710      	lsls	r0, r2, #28
 80089fa:	460c      	mov	r4, r1
 80089fc:	d458      	bmi.n	8008ab0 <__sflush_r+0xc0>
 80089fe:	684b      	ldr	r3, [r1, #4]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	dc05      	bgt.n	8008a10 <__sflush_r+0x20>
 8008a04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	dc02      	bgt.n	8008a10 <__sflush_r+0x20>
 8008a0a:	2000      	movs	r0, #0
 8008a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a12:	2e00      	cmp	r6, #0
 8008a14:	d0f9      	beq.n	8008a0a <__sflush_r+0x1a>
 8008a16:	2300      	movs	r3, #0
 8008a18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008a1c:	682f      	ldr	r7, [r5, #0]
 8008a1e:	602b      	str	r3, [r5, #0]
 8008a20:	d032      	beq.n	8008a88 <__sflush_r+0x98>
 8008a22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008a24:	89a3      	ldrh	r3, [r4, #12]
 8008a26:	075a      	lsls	r2, r3, #29
 8008a28:	d505      	bpl.n	8008a36 <__sflush_r+0x46>
 8008a2a:	6863      	ldr	r3, [r4, #4]
 8008a2c:	1ac0      	subs	r0, r0, r3
 8008a2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a30:	b10b      	cbz	r3, 8008a36 <__sflush_r+0x46>
 8008a32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a34:	1ac0      	subs	r0, r0, r3
 8008a36:	2300      	movs	r3, #0
 8008a38:	4602      	mov	r2, r0
 8008a3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a3c:	6a21      	ldr	r1, [r4, #32]
 8008a3e:	4628      	mov	r0, r5
 8008a40:	47b0      	blx	r6
 8008a42:	1c43      	adds	r3, r0, #1
 8008a44:	89a3      	ldrh	r3, [r4, #12]
 8008a46:	d106      	bne.n	8008a56 <__sflush_r+0x66>
 8008a48:	6829      	ldr	r1, [r5, #0]
 8008a4a:	291d      	cmp	r1, #29
 8008a4c:	d82c      	bhi.n	8008aa8 <__sflush_r+0xb8>
 8008a4e:	4a2a      	ldr	r2, [pc, #168]	; (8008af8 <__sflush_r+0x108>)
 8008a50:	40ca      	lsrs	r2, r1
 8008a52:	07d6      	lsls	r6, r2, #31
 8008a54:	d528      	bpl.n	8008aa8 <__sflush_r+0xb8>
 8008a56:	2200      	movs	r2, #0
 8008a58:	6062      	str	r2, [r4, #4]
 8008a5a:	04d9      	lsls	r1, r3, #19
 8008a5c:	6922      	ldr	r2, [r4, #16]
 8008a5e:	6022      	str	r2, [r4, #0]
 8008a60:	d504      	bpl.n	8008a6c <__sflush_r+0x7c>
 8008a62:	1c42      	adds	r2, r0, #1
 8008a64:	d101      	bne.n	8008a6a <__sflush_r+0x7a>
 8008a66:	682b      	ldr	r3, [r5, #0]
 8008a68:	b903      	cbnz	r3, 8008a6c <__sflush_r+0x7c>
 8008a6a:	6560      	str	r0, [r4, #84]	; 0x54
 8008a6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a6e:	602f      	str	r7, [r5, #0]
 8008a70:	2900      	cmp	r1, #0
 8008a72:	d0ca      	beq.n	8008a0a <__sflush_r+0x1a>
 8008a74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a78:	4299      	cmp	r1, r3
 8008a7a:	d002      	beq.n	8008a82 <__sflush_r+0x92>
 8008a7c:	4628      	mov	r0, r5
 8008a7e:	f000 f917 	bl	8008cb0 <_free_r>
 8008a82:	2000      	movs	r0, #0
 8008a84:	6360      	str	r0, [r4, #52]	; 0x34
 8008a86:	e7c1      	b.n	8008a0c <__sflush_r+0x1c>
 8008a88:	6a21      	ldr	r1, [r4, #32]
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	4628      	mov	r0, r5
 8008a8e:	47b0      	blx	r6
 8008a90:	1c41      	adds	r1, r0, #1
 8008a92:	d1c7      	bne.n	8008a24 <__sflush_r+0x34>
 8008a94:	682b      	ldr	r3, [r5, #0]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d0c4      	beq.n	8008a24 <__sflush_r+0x34>
 8008a9a:	2b1d      	cmp	r3, #29
 8008a9c:	d001      	beq.n	8008aa2 <__sflush_r+0xb2>
 8008a9e:	2b16      	cmp	r3, #22
 8008aa0:	d101      	bne.n	8008aa6 <__sflush_r+0xb6>
 8008aa2:	602f      	str	r7, [r5, #0]
 8008aa4:	e7b1      	b.n	8008a0a <__sflush_r+0x1a>
 8008aa6:	89a3      	ldrh	r3, [r4, #12]
 8008aa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008aac:	81a3      	strh	r3, [r4, #12]
 8008aae:	e7ad      	b.n	8008a0c <__sflush_r+0x1c>
 8008ab0:	690f      	ldr	r7, [r1, #16]
 8008ab2:	2f00      	cmp	r7, #0
 8008ab4:	d0a9      	beq.n	8008a0a <__sflush_r+0x1a>
 8008ab6:	0793      	lsls	r3, r2, #30
 8008ab8:	680e      	ldr	r6, [r1, #0]
 8008aba:	bf08      	it	eq
 8008abc:	694b      	ldreq	r3, [r1, #20]
 8008abe:	600f      	str	r7, [r1, #0]
 8008ac0:	bf18      	it	ne
 8008ac2:	2300      	movne	r3, #0
 8008ac4:	eba6 0807 	sub.w	r8, r6, r7
 8008ac8:	608b      	str	r3, [r1, #8]
 8008aca:	f1b8 0f00 	cmp.w	r8, #0
 8008ace:	dd9c      	ble.n	8008a0a <__sflush_r+0x1a>
 8008ad0:	6a21      	ldr	r1, [r4, #32]
 8008ad2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008ad4:	4643      	mov	r3, r8
 8008ad6:	463a      	mov	r2, r7
 8008ad8:	4628      	mov	r0, r5
 8008ada:	47b0      	blx	r6
 8008adc:	2800      	cmp	r0, #0
 8008ade:	dc06      	bgt.n	8008aee <__sflush_r+0xfe>
 8008ae0:	89a3      	ldrh	r3, [r4, #12]
 8008ae2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ae6:	81a3      	strh	r3, [r4, #12]
 8008ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8008aec:	e78e      	b.n	8008a0c <__sflush_r+0x1c>
 8008aee:	4407      	add	r7, r0
 8008af0:	eba8 0800 	sub.w	r8, r8, r0
 8008af4:	e7e9      	b.n	8008aca <__sflush_r+0xda>
 8008af6:	bf00      	nop
 8008af8:	20400001 	.word	0x20400001

08008afc <_fflush_r>:
 8008afc:	b538      	push	{r3, r4, r5, lr}
 8008afe:	690b      	ldr	r3, [r1, #16]
 8008b00:	4605      	mov	r5, r0
 8008b02:	460c      	mov	r4, r1
 8008b04:	b913      	cbnz	r3, 8008b0c <_fflush_r+0x10>
 8008b06:	2500      	movs	r5, #0
 8008b08:	4628      	mov	r0, r5
 8008b0a:	bd38      	pop	{r3, r4, r5, pc}
 8008b0c:	b118      	cbz	r0, 8008b16 <_fflush_r+0x1a>
 8008b0e:	6983      	ldr	r3, [r0, #24]
 8008b10:	b90b      	cbnz	r3, 8008b16 <_fflush_r+0x1a>
 8008b12:	f7ff f8b9 	bl	8007c88 <__sinit>
 8008b16:	4b14      	ldr	r3, [pc, #80]	; (8008b68 <_fflush_r+0x6c>)
 8008b18:	429c      	cmp	r4, r3
 8008b1a:	d11b      	bne.n	8008b54 <_fflush_r+0x58>
 8008b1c:	686c      	ldr	r4, [r5, #4]
 8008b1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d0ef      	beq.n	8008b06 <_fflush_r+0xa>
 8008b26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008b28:	07d0      	lsls	r0, r2, #31
 8008b2a:	d404      	bmi.n	8008b36 <_fflush_r+0x3a>
 8008b2c:	0599      	lsls	r1, r3, #22
 8008b2e:	d402      	bmi.n	8008b36 <_fflush_r+0x3a>
 8008b30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b32:	f7ff f947 	bl	8007dc4 <__retarget_lock_acquire_recursive>
 8008b36:	4628      	mov	r0, r5
 8008b38:	4621      	mov	r1, r4
 8008b3a:	f7ff ff59 	bl	80089f0 <__sflush_r>
 8008b3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b40:	07da      	lsls	r2, r3, #31
 8008b42:	4605      	mov	r5, r0
 8008b44:	d4e0      	bmi.n	8008b08 <_fflush_r+0xc>
 8008b46:	89a3      	ldrh	r3, [r4, #12]
 8008b48:	059b      	lsls	r3, r3, #22
 8008b4a:	d4dd      	bmi.n	8008b08 <_fflush_r+0xc>
 8008b4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b4e:	f7ff f93a 	bl	8007dc6 <__retarget_lock_release_recursive>
 8008b52:	e7d9      	b.n	8008b08 <_fflush_r+0xc>
 8008b54:	4b05      	ldr	r3, [pc, #20]	; (8008b6c <_fflush_r+0x70>)
 8008b56:	429c      	cmp	r4, r3
 8008b58:	d101      	bne.n	8008b5e <_fflush_r+0x62>
 8008b5a:	68ac      	ldr	r4, [r5, #8]
 8008b5c:	e7df      	b.n	8008b1e <_fflush_r+0x22>
 8008b5e:	4b04      	ldr	r3, [pc, #16]	; (8008b70 <_fflush_r+0x74>)
 8008b60:	429c      	cmp	r4, r3
 8008b62:	bf08      	it	eq
 8008b64:	68ec      	ldreq	r4, [r5, #12]
 8008b66:	e7da      	b.n	8008b1e <_fflush_r+0x22>
 8008b68:	08009258 	.word	0x08009258
 8008b6c:	08009278 	.word	0x08009278
 8008b70:	08009238 	.word	0x08009238

08008b74 <_lseek_r>:
 8008b74:	b538      	push	{r3, r4, r5, lr}
 8008b76:	4d07      	ldr	r5, [pc, #28]	; (8008b94 <_lseek_r+0x20>)
 8008b78:	4604      	mov	r4, r0
 8008b7a:	4608      	mov	r0, r1
 8008b7c:	4611      	mov	r1, r2
 8008b7e:	2200      	movs	r2, #0
 8008b80:	602a      	str	r2, [r5, #0]
 8008b82:	461a      	mov	r2, r3
 8008b84:	f7f8 fcbe 	bl	8001504 <_lseek>
 8008b88:	1c43      	adds	r3, r0, #1
 8008b8a:	d102      	bne.n	8008b92 <_lseek_r+0x1e>
 8008b8c:	682b      	ldr	r3, [r5, #0]
 8008b8e:	b103      	cbz	r3, 8008b92 <_lseek_r+0x1e>
 8008b90:	6023      	str	r3, [r4, #0]
 8008b92:	bd38      	pop	{r3, r4, r5, pc}
 8008b94:	200193a0 	.word	0x200193a0

08008b98 <__swhatbuf_r>:
 8008b98:	b570      	push	{r4, r5, r6, lr}
 8008b9a:	460e      	mov	r6, r1
 8008b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ba0:	2900      	cmp	r1, #0
 8008ba2:	b096      	sub	sp, #88	; 0x58
 8008ba4:	4614      	mov	r4, r2
 8008ba6:	461d      	mov	r5, r3
 8008ba8:	da08      	bge.n	8008bbc <__swhatbuf_r+0x24>
 8008baa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	602a      	str	r2, [r5, #0]
 8008bb2:	061a      	lsls	r2, r3, #24
 8008bb4:	d410      	bmi.n	8008bd8 <__swhatbuf_r+0x40>
 8008bb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bba:	e00e      	b.n	8008bda <__swhatbuf_r+0x42>
 8008bbc:	466a      	mov	r2, sp
 8008bbe:	f000 f905 	bl	8008dcc <_fstat_r>
 8008bc2:	2800      	cmp	r0, #0
 8008bc4:	dbf1      	blt.n	8008baa <__swhatbuf_r+0x12>
 8008bc6:	9a01      	ldr	r2, [sp, #4]
 8008bc8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008bcc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008bd0:	425a      	negs	r2, r3
 8008bd2:	415a      	adcs	r2, r3
 8008bd4:	602a      	str	r2, [r5, #0]
 8008bd6:	e7ee      	b.n	8008bb6 <__swhatbuf_r+0x1e>
 8008bd8:	2340      	movs	r3, #64	; 0x40
 8008bda:	2000      	movs	r0, #0
 8008bdc:	6023      	str	r3, [r4, #0]
 8008bde:	b016      	add	sp, #88	; 0x58
 8008be0:	bd70      	pop	{r4, r5, r6, pc}
	...

08008be4 <__smakebuf_r>:
 8008be4:	898b      	ldrh	r3, [r1, #12]
 8008be6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008be8:	079d      	lsls	r5, r3, #30
 8008bea:	4606      	mov	r6, r0
 8008bec:	460c      	mov	r4, r1
 8008bee:	d507      	bpl.n	8008c00 <__smakebuf_r+0x1c>
 8008bf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008bf4:	6023      	str	r3, [r4, #0]
 8008bf6:	6123      	str	r3, [r4, #16]
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	6163      	str	r3, [r4, #20]
 8008bfc:	b002      	add	sp, #8
 8008bfe:	bd70      	pop	{r4, r5, r6, pc}
 8008c00:	ab01      	add	r3, sp, #4
 8008c02:	466a      	mov	r2, sp
 8008c04:	f7ff ffc8 	bl	8008b98 <__swhatbuf_r>
 8008c08:	9900      	ldr	r1, [sp, #0]
 8008c0a:	4605      	mov	r5, r0
 8008c0c:	4630      	mov	r0, r6
 8008c0e:	f7ff f8fb 	bl	8007e08 <_malloc_r>
 8008c12:	b948      	cbnz	r0, 8008c28 <__smakebuf_r+0x44>
 8008c14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c18:	059a      	lsls	r2, r3, #22
 8008c1a:	d4ef      	bmi.n	8008bfc <__smakebuf_r+0x18>
 8008c1c:	f023 0303 	bic.w	r3, r3, #3
 8008c20:	f043 0302 	orr.w	r3, r3, #2
 8008c24:	81a3      	strh	r3, [r4, #12]
 8008c26:	e7e3      	b.n	8008bf0 <__smakebuf_r+0xc>
 8008c28:	4b0d      	ldr	r3, [pc, #52]	; (8008c60 <__smakebuf_r+0x7c>)
 8008c2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008c2c:	89a3      	ldrh	r3, [r4, #12]
 8008c2e:	6020      	str	r0, [r4, #0]
 8008c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c34:	81a3      	strh	r3, [r4, #12]
 8008c36:	9b00      	ldr	r3, [sp, #0]
 8008c38:	6163      	str	r3, [r4, #20]
 8008c3a:	9b01      	ldr	r3, [sp, #4]
 8008c3c:	6120      	str	r0, [r4, #16]
 8008c3e:	b15b      	cbz	r3, 8008c58 <__smakebuf_r+0x74>
 8008c40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c44:	4630      	mov	r0, r6
 8008c46:	f000 f8d3 	bl	8008df0 <_isatty_r>
 8008c4a:	b128      	cbz	r0, 8008c58 <__smakebuf_r+0x74>
 8008c4c:	89a3      	ldrh	r3, [r4, #12]
 8008c4e:	f023 0303 	bic.w	r3, r3, #3
 8008c52:	f043 0301 	orr.w	r3, r3, #1
 8008c56:	81a3      	strh	r3, [r4, #12]
 8008c58:	89a0      	ldrh	r0, [r4, #12]
 8008c5a:	4305      	orrs	r5, r0
 8008c5c:	81a5      	strh	r5, [r4, #12]
 8008c5e:	e7cd      	b.n	8008bfc <__smakebuf_r+0x18>
 8008c60:	08007c21 	.word	0x08007c21

08008c64 <memmove>:
 8008c64:	4288      	cmp	r0, r1
 8008c66:	b510      	push	{r4, lr}
 8008c68:	eb01 0402 	add.w	r4, r1, r2
 8008c6c:	d902      	bls.n	8008c74 <memmove+0x10>
 8008c6e:	4284      	cmp	r4, r0
 8008c70:	4623      	mov	r3, r4
 8008c72:	d807      	bhi.n	8008c84 <memmove+0x20>
 8008c74:	1e43      	subs	r3, r0, #1
 8008c76:	42a1      	cmp	r1, r4
 8008c78:	d008      	beq.n	8008c8c <memmove+0x28>
 8008c7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c82:	e7f8      	b.n	8008c76 <memmove+0x12>
 8008c84:	4402      	add	r2, r0
 8008c86:	4601      	mov	r1, r0
 8008c88:	428a      	cmp	r2, r1
 8008c8a:	d100      	bne.n	8008c8e <memmove+0x2a>
 8008c8c:	bd10      	pop	{r4, pc}
 8008c8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c96:	e7f7      	b.n	8008c88 <memmove+0x24>

08008c98 <__malloc_lock>:
 8008c98:	4801      	ldr	r0, [pc, #4]	; (8008ca0 <__malloc_lock+0x8>)
 8008c9a:	f7ff b893 	b.w	8007dc4 <__retarget_lock_acquire_recursive>
 8008c9e:	bf00      	nop
 8008ca0:	20019394 	.word	0x20019394

08008ca4 <__malloc_unlock>:
 8008ca4:	4801      	ldr	r0, [pc, #4]	; (8008cac <__malloc_unlock+0x8>)
 8008ca6:	f7ff b88e 	b.w	8007dc6 <__retarget_lock_release_recursive>
 8008caa:	bf00      	nop
 8008cac:	20019394 	.word	0x20019394

08008cb0 <_free_r>:
 8008cb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008cb2:	2900      	cmp	r1, #0
 8008cb4:	d044      	beq.n	8008d40 <_free_r+0x90>
 8008cb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cba:	9001      	str	r0, [sp, #4]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	f1a1 0404 	sub.w	r4, r1, #4
 8008cc2:	bfb8      	it	lt
 8008cc4:	18e4      	addlt	r4, r4, r3
 8008cc6:	f7ff ffe7 	bl	8008c98 <__malloc_lock>
 8008cca:	4a1e      	ldr	r2, [pc, #120]	; (8008d44 <_free_r+0x94>)
 8008ccc:	9801      	ldr	r0, [sp, #4]
 8008cce:	6813      	ldr	r3, [r2, #0]
 8008cd0:	b933      	cbnz	r3, 8008ce0 <_free_r+0x30>
 8008cd2:	6063      	str	r3, [r4, #4]
 8008cd4:	6014      	str	r4, [r2, #0]
 8008cd6:	b003      	add	sp, #12
 8008cd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008cdc:	f7ff bfe2 	b.w	8008ca4 <__malloc_unlock>
 8008ce0:	42a3      	cmp	r3, r4
 8008ce2:	d908      	bls.n	8008cf6 <_free_r+0x46>
 8008ce4:	6825      	ldr	r5, [r4, #0]
 8008ce6:	1961      	adds	r1, r4, r5
 8008ce8:	428b      	cmp	r3, r1
 8008cea:	bf01      	itttt	eq
 8008cec:	6819      	ldreq	r1, [r3, #0]
 8008cee:	685b      	ldreq	r3, [r3, #4]
 8008cf0:	1949      	addeq	r1, r1, r5
 8008cf2:	6021      	streq	r1, [r4, #0]
 8008cf4:	e7ed      	b.n	8008cd2 <_free_r+0x22>
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	b10b      	cbz	r3, 8008d00 <_free_r+0x50>
 8008cfc:	42a3      	cmp	r3, r4
 8008cfe:	d9fa      	bls.n	8008cf6 <_free_r+0x46>
 8008d00:	6811      	ldr	r1, [r2, #0]
 8008d02:	1855      	adds	r5, r2, r1
 8008d04:	42a5      	cmp	r5, r4
 8008d06:	d10b      	bne.n	8008d20 <_free_r+0x70>
 8008d08:	6824      	ldr	r4, [r4, #0]
 8008d0a:	4421      	add	r1, r4
 8008d0c:	1854      	adds	r4, r2, r1
 8008d0e:	42a3      	cmp	r3, r4
 8008d10:	6011      	str	r1, [r2, #0]
 8008d12:	d1e0      	bne.n	8008cd6 <_free_r+0x26>
 8008d14:	681c      	ldr	r4, [r3, #0]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	6053      	str	r3, [r2, #4]
 8008d1a:	4421      	add	r1, r4
 8008d1c:	6011      	str	r1, [r2, #0]
 8008d1e:	e7da      	b.n	8008cd6 <_free_r+0x26>
 8008d20:	d902      	bls.n	8008d28 <_free_r+0x78>
 8008d22:	230c      	movs	r3, #12
 8008d24:	6003      	str	r3, [r0, #0]
 8008d26:	e7d6      	b.n	8008cd6 <_free_r+0x26>
 8008d28:	6825      	ldr	r5, [r4, #0]
 8008d2a:	1961      	adds	r1, r4, r5
 8008d2c:	428b      	cmp	r3, r1
 8008d2e:	bf04      	itt	eq
 8008d30:	6819      	ldreq	r1, [r3, #0]
 8008d32:	685b      	ldreq	r3, [r3, #4]
 8008d34:	6063      	str	r3, [r4, #4]
 8008d36:	bf04      	itt	eq
 8008d38:	1949      	addeq	r1, r1, r5
 8008d3a:	6021      	streq	r1, [r4, #0]
 8008d3c:	6054      	str	r4, [r2, #4]
 8008d3e:	e7ca      	b.n	8008cd6 <_free_r+0x26>
 8008d40:	b003      	add	sp, #12
 8008d42:	bd30      	pop	{r4, r5, pc}
 8008d44:	20019398 	.word	0x20019398

08008d48 <_realloc_r>:
 8008d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d4c:	4680      	mov	r8, r0
 8008d4e:	4614      	mov	r4, r2
 8008d50:	460e      	mov	r6, r1
 8008d52:	b921      	cbnz	r1, 8008d5e <_realloc_r+0x16>
 8008d54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d58:	4611      	mov	r1, r2
 8008d5a:	f7ff b855 	b.w	8007e08 <_malloc_r>
 8008d5e:	b92a      	cbnz	r2, 8008d6c <_realloc_r+0x24>
 8008d60:	f7ff ffa6 	bl	8008cb0 <_free_r>
 8008d64:	4625      	mov	r5, r4
 8008d66:	4628      	mov	r0, r5
 8008d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d6c:	f000 f850 	bl	8008e10 <_malloc_usable_size_r>
 8008d70:	4284      	cmp	r4, r0
 8008d72:	4607      	mov	r7, r0
 8008d74:	d802      	bhi.n	8008d7c <_realloc_r+0x34>
 8008d76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008d7a:	d812      	bhi.n	8008da2 <_realloc_r+0x5a>
 8008d7c:	4621      	mov	r1, r4
 8008d7e:	4640      	mov	r0, r8
 8008d80:	f7ff f842 	bl	8007e08 <_malloc_r>
 8008d84:	4605      	mov	r5, r0
 8008d86:	2800      	cmp	r0, #0
 8008d88:	d0ed      	beq.n	8008d66 <_realloc_r+0x1e>
 8008d8a:	42bc      	cmp	r4, r7
 8008d8c:	4622      	mov	r2, r4
 8008d8e:	4631      	mov	r1, r6
 8008d90:	bf28      	it	cs
 8008d92:	463a      	movcs	r2, r7
 8008d94:	f7fe fed2 	bl	8007b3c <memcpy>
 8008d98:	4631      	mov	r1, r6
 8008d9a:	4640      	mov	r0, r8
 8008d9c:	f7ff ff88 	bl	8008cb0 <_free_r>
 8008da0:	e7e1      	b.n	8008d66 <_realloc_r+0x1e>
 8008da2:	4635      	mov	r5, r6
 8008da4:	e7df      	b.n	8008d66 <_realloc_r+0x1e>
	...

08008da8 <_read_r>:
 8008da8:	b538      	push	{r3, r4, r5, lr}
 8008daa:	4d07      	ldr	r5, [pc, #28]	; (8008dc8 <_read_r+0x20>)
 8008dac:	4604      	mov	r4, r0
 8008dae:	4608      	mov	r0, r1
 8008db0:	4611      	mov	r1, r2
 8008db2:	2200      	movs	r2, #0
 8008db4:	602a      	str	r2, [r5, #0]
 8008db6:	461a      	mov	r2, r3
 8008db8:	f7f8 fb44 	bl	8001444 <_read>
 8008dbc:	1c43      	adds	r3, r0, #1
 8008dbe:	d102      	bne.n	8008dc6 <_read_r+0x1e>
 8008dc0:	682b      	ldr	r3, [r5, #0]
 8008dc2:	b103      	cbz	r3, 8008dc6 <_read_r+0x1e>
 8008dc4:	6023      	str	r3, [r4, #0]
 8008dc6:	bd38      	pop	{r3, r4, r5, pc}
 8008dc8:	200193a0 	.word	0x200193a0

08008dcc <_fstat_r>:
 8008dcc:	b538      	push	{r3, r4, r5, lr}
 8008dce:	4d07      	ldr	r5, [pc, #28]	; (8008dec <_fstat_r+0x20>)
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	4604      	mov	r4, r0
 8008dd4:	4608      	mov	r0, r1
 8008dd6:	4611      	mov	r1, r2
 8008dd8:	602b      	str	r3, [r5, #0]
 8008dda:	f7f8 fb78 	bl	80014ce <_fstat>
 8008dde:	1c43      	adds	r3, r0, #1
 8008de0:	d102      	bne.n	8008de8 <_fstat_r+0x1c>
 8008de2:	682b      	ldr	r3, [r5, #0]
 8008de4:	b103      	cbz	r3, 8008de8 <_fstat_r+0x1c>
 8008de6:	6023      	str	r3, [r4, #0]
 8008de8:	bd38      	pop	{r3, r4, r5, pc}
 8008dea:	bf00      	nop
 8008dec:	200193a0 	.word	0x200193a0

08008df0 <_isatty_r>:
 8008df0:	b538      	push	{r3, r4, r5, lr}
 8008df2:	4d06      	ldr	r5, [pc, #24]	; (8008e0c <_isatty_r+0x1c>)
 8008df4:	2300      	movs	r3, #0
 8008df6:	4604      	mov	r4, r0
 8008df8:	4608      	mov	r0, r1
 8008dfa:	602b      	str	r3, [r5, #0]
 8008dfc:	f7f8 fb77 	bl	80014ee <_isatty>
 8008e00:	1c43      	adds	r3, r0, #1
 8008e02:	d102      	bne.n	8008e0a <_isatty_r+0x1a>
 8008e04:	682b      	ldr	r3, [r5, #0]
 8008e06:	b103      	cbz	r3, 8008e0a <_isatty_r+0x1a>
 8008e08:	6023      	str	r3, [r4, #0]
 8008e0a:	bd38      	pop	{r3, r4, r5, pc}
 8008e0c:	200193a0 	.word	0x200193a0

08008e10 <_malloc_usable_size_r>:
 8008e10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e14:	1f18      	subs	r0, r3, #4
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	bfbc      	itt	lt
 8008e1a:	580b      	ldrlt	r3, [r1, r0]
 8008e1c:	18c0      	addlt	r0, r0, r3
 8008e1e:	4770      	bx	lr

08008e20 <_init>:
 8008e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e22:	bf00      	nop
 8008e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e26:	bc08      	pop	{r3}
 8008e28:	469e      	mov	lr, r3
 8008e2a:	4770      	bx	lr

08008e2c <_fini>:
 8008e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e2e:	bf00      	nop
 8008e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e32:	bc08      	pop	{r3}
 8008e34:	469e      	mov	lr, r3
 8008e36:	4770      	bx	lr
