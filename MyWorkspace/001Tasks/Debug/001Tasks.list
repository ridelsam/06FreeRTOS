
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000765c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  080077ec  080077ec  000177ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007988  08007988  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08007988  08007988  00017988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007990  08007990  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007990  08007990  00017990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007994  08007994  00017994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08007998  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          0001a88c  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001a90c  2001a90c  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014d38  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003027  00000000  00000000  00034de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001338  00000000  00000000  00037e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011b0  00000000  00000000  00039148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023117  00000000  00000000  0003a2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015ea2  00000000  00000000  0005d40f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d719f  00000000  00000000  000732b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014a450  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005424  00000000  00000000  0014a4a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080077d4 	.word	0x080077d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	080077d4 	.word	0x080077d4

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20019324 	.word	0x20019324
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061a:	f000 fb37 	bl	8000c8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061e:	f000 f83b 	bl	8000698 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000622:	f000 f8a3 	bl	800076c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */


  //Enable the CYCCNT counter
  DWT_CTRL |= ( 1<<0 );
 8000626:	4b14      	ldr	r3, [pc, #80]	; (8000678 <main+0x64>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a13      	ldr	r2, [pc, #76]	; (8000678 <main+0x64>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 8000632:	4812      	ldr	r0, [pc, #72]	; (800067c <main+0x68>)
 8000634:	f004 f9a4 	bl	8004980 <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 8000638:	f003 ffcc 	bl	80045d4 <SEGGER_SYSVIEW_Conf>

//  SEGGER_SYSVIEW_Start();

  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello World from Task-1", 2, &task1_handle);
 800063c:	f107 0308 	add.w	r3, r7, #8
 8000640:	9301      	str	r3, [sp, #4]
 8000642:	2302      	movs	r3, #2
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <main+0x6c>)
 8000648:	22c8      	movs	r2, #200	; 0xc8
 800064a:	490e      	ldr	r1, [pc, #56]	; (8000684 <main+0x70>)
 800064c:	480e      	ldr	r0, [pc, #56]	; (8000688 <main+0x74>)
 800064e:	f002 f903 	bl	8002858 <xTaskCreate>
 8000652:	60f8      	str	r0, [r7, #12]

  configASSERT(status = pdPASS);
 8000654:	2301      	movs	r3, #1
 8000656:	60fb      	str	r3, [r7, #12]

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello World from Task-2", 2, &task2_handle);
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	9301      	str	r3, [sp, #4]
 800065c:	2302      	movs	r3, #2
 800065e:	9300      	str	r3, [sp, #0]
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <main+0x78>)
 8000662:	22c8      	movs	r2, #200	; 0xc8
 8000664:	490a      	ldr	r1, [pc, #40]	; (8000690 <main+0x7c>)
 8000666:	480b      	ldr	r0, [pc, #44]	; (8000694 <main+0x80>)
 8000668:	f002 f8f6 	bl	8002858 <xTaskCreate>
 800066c:	60f8      	str	r0, [r7, #12]

  configASSERT(status = pdPASS);
 800066e:	2301      	movs	r3, #1
 8000670:	60fb      	str	r3, [r7, #12]

  //start the FreeRTOS scheduler
  vTaskStartScheduler();
 8000672:	f002 fa7d 	bl	8002b70 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000676:	e7fe      	b.n	8000676 <main+0x62>
 8000678:	e0001000 	.word	0xe0001000
 800067c:	0007a120 	.word	0x0007a120
 8000680:	080077ec 	.word	0x080077ec
 8000684:	08007804 	.word	0x08007804
 8000688:	08000a29 	.word	0x08000a29
 800068c:	0800780c 	.word	0x0800780c
 8000690:	08007824 	.word	0x08007824
 8000694:	08000a65 	.word	0x08000a65

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	; 0x50
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	2230      	movs	r2, #48	; 0x30
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f006 fc0a 	bl	8006ec0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	4b28      	ldr	r3, [pc, #160]	; (8000764 <SystemClock_Config+0xcc>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	4a27      	ldr	r2, [pc, #156]	; (8000764 <SystemClock_Config+0xcc>)
 80006c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ca:	6413      	str	r3, [r2, #64]	; 0x40
 80006cc:	4b25      	ldr	r3, [pc, #148]	; (8000764 <SystemClock_Config+0xcc>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	4b22      	ldr	r3, [pc, #136]	; (8000768 <SystemClock_Config+0xd0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a21      	ldr	r2, [pc, #132]	; (8000768 <SystemClock_Config+0xd0>)
 80006e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <SystemClock_Config+0xd0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f4:	2302      	movs	r3, #2
 80006f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f8:	2301      	movs	r3, #1
 80006fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fc:	2310      	movs	r3, #16
 80006fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000700:	2302      	movs	r3, #2
 8000702:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000704:	2300      	movs	r3, #0
 8000706:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000708:	2308      	movs	r3, #8
 800070a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800070c:	23a8      	movs	r3, #168	; 0xa8
 800070e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000710:	2302      	movs	r3, #2
 8000712:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000714:	2307      	movs	r3, #7
 8000716:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000718:	f107 0320 	add.w	r3, r7, #32
 800071c:	4618      	mov	r0, r3
 800071e:	f000 fd8f 	bl	8001240 <HAL_RCC_OscConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000728:	f000 f9cc 	bl	8000ac4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072c:	230f      	movs	r3, #15
 800072e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000730:	2302      	movs	r3, #2
 8000732:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000738:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800073c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800073e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000742:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	2105      	movs	r1, #5
 800074a:	4618      	mov	r0, r3
 800074c:	f000 fff0 	bl	8001730 <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000756:	f000 f9b5 	bl	8000ac4 <Error_Handler>
  }
}
 800075a:	bf00      	nop
 800075c:	3750      	adds	r7, #80	; 0x50
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40007000 	.word	0x40007000

0800076c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08c      	sub	sp, #48	; 0x30
 8000770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	f107 031c 	add.w	r3, r7, #28
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	61bb      	str	r3, [r7, #24]
 8000786:	4ba2      	ldr	r3, [pc, #648]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4aa1      	ldr	r2, [pc, #644]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 800078c:	f043 0310 	orr.w	r3, r3, #16
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b9f      	ldr	r3, [pc, #636]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0310 	and.w	r3, r3, #16
 800079a:	61bb      	str	r3, [r7, #24]
 800079c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]
 80007a2:	4b9b      	ldr	r3, [pc, #620]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a9a      	ldr	r2, [pc, #616]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 80007a8:	f043 0304 	orr.w	r3, r3, #4
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b98      	ldr	r3, [pc, #608]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0304 	and.w	r3, r3, #4
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
 80007be:	4b94      	ldr	r3, [pc, #592]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a93      	ldr	r2, [pc, #588]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 80007c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b91      	ldr	r3, [pc, #580]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	4b8d      	ldr	r3, [pc, #564]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a8c      	ldr	r2, [pc, #560]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b8a      	ldr	r3, [pc, #552]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	4b86      	ldr	r3, [pc, #536]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a85      	ldr	r2, [pc, #532]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 80007fc:	f043 0302 	orr.w	r3, r3, #2
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b83      	ldr	r3, [pc, #524]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b7f      	ldr	r3, [pc, #508]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a7e      	ldr	r2, [pc, #504]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 8000818:	f043 0308 	orr.w	r3, r3, #8
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b7c      	ldr	r3, [pc, #496]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0308 	and.w	r3, r3, #8
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2108      	movs	r1, #8
 800082e:	4879      	ldr	r0, [pc, #484]	; (8000a14 <MX_GPIO_Init+0x2a8>)
 8000830:	f000 fcec 	bl	800120c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000834:	2201      	movs	r2, #1
 8000836:	2101      	movs	r1, #1
 8000838:	4877      	ldr	r0, [pc, #476]	; (8000a18 <MX_GPIO_Init+0x2ac>)
 800083a:	f000 fce7 	bl	800120c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800083e:	2200      	movs	r2, #0
 8000840:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000844:	4875      	ldr	r0, [pc, #468]	; (8000a1c <MX_GPIO_Init+0x2b0>)
 8000846:	f000 fce1 	bl	800120c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800084a:	2308      	movs	r3, #8
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084e:	2301      	movs	r3, #1
 8000850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	486c      	ldr	r0, [pc, #432]	; (8000a14 <MX_GPIO_Init+0x2a8>)
 8000862:	f000 fb37 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000866:	2301      	movs	r3, #1
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	4866      	ldr	r0, [pc, #408]	; (8000a18 <MX_GPIO_Init+0x2ac>)
 800087e:	f000 fb29 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000882:	2308      	movs	r3, #8
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000892:	2305      	movs	r3, #5
 8000894:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	485e      	ldr	r0, [pc, #376]	; (8000a18 <MX_GPIO_Init+0x2ac>)
 800089e:	f000 fb19 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008a2:	2301      	movs	r3, #1
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	485a      	ldr	r0, [pc, #360]	; (8000a20 <MX_GPIO_Init+0x2b4>)
 80008b8:	f000 fb0c 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008bc:	2310      	movs	r3, #16
 80008be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c0:	2302      	movs	r3, #2
 80008c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008cc:	2306      	movs	r3, #6
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	4852      	ldr	r0, [pc, #328]	; (8000a20 <MX_GPIO_Init+0x2b4>)
 80008d8:	f000 fafc 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008dc:	23e0      	movs	r3, #224	; 0xe0
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e0:	2302      	movs	r3, #2
 80008e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008ec:	2305      	movs	r3, #5
 80008ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	484a      	ldr	r0, [pc, #296]	; (8000a20 <MX_GPIO_Init+0x2b4>)
 80008f8:	f000 faec 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008fc:	2304      	movs	r3, #4
 80008fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000900:	2300      	movs	r3, #0
 8000902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	4845      	ldr	r0, [pc, #276]	; (8000a24 <MX_GPIO_Init+0x2b8>)
 8000910:	f000 fae0 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000914:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000926:	2305      	movs	r3, #5
 8000928:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	483c      	ldr	r0, [pc, #240]	; (8000a24 <MX_GPIO_Init+0x2b8>)
 8000932:	f000 facf 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000936:	f24f 0310 	movw	r3, #61456	; 0xf010
 800093a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093c:	2301      	movs	r3, #1
 800093e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	4833      	ldr	r0, [pc, #204]	; (8000a1c <MX_GPIO_Init+0x2b0>)
 8000950:	f000 fac0 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000954:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000966:	2306      	movs	r3, #6
 8000968:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4829      	ldr	r0, [pc, #164]	; (8000a18 <MX_GPIO_Init+0x2ac>)
 8000972:	f000 faaf 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000976:	f44f 7300 	mov.w	r3, #512	; 0x200
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	4825      	ldr	r0, [pc, #148]	; (8000a20 <MX_GPIO_Init+0x2b4>)
 800098c:	f000 faa2 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000990:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009a2:	230a      	movs	r3, #10
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	481c      	ldr	r0, [pc, #112]	; (8000a20 <MX_GPIO_Init+0x2b4>)
 80009ae:	f000 fa91 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009b2:	2320      	movs	r3, #32
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b6:	2300      	movs	r3, #0
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	4815      	ldr	r0, [pc, #84]	; (8000a1c <MX_GPIO_Init+0x2b0>)
 80009c6:	f000 fa85 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009ca:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009d0:	2312      	movs	r3, #18
 80009d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009dc:	2304      	movs	r3, #4
 80009de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	4619      	mov	r1, r3
 80009e6:	480f      	ldr	r0, [pc, #60]	; (8000a24 <MX_GPIO_Init+0x2b8>)
 80009e8:	f000 fa74 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009ec:	2302      	movs	r3, #2
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009f0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	4804      	ldr	r0, [pc, #16]	; (8000a14 <MX_GPIO_Init+0x2a8>)
 8000a02:	f000 fa67 	bl	8000ed4 <HAL_GPIO_Init>

}
 8000a06:	bf00      	nop
 8000a08:	3730      	adds	r7, #48	; 0x30
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40021000 	.word	0x40021000
 8000a18:	40020800 	.word	0x40020800
 8000a1c:	40020c00 	.word	0x40020c00
 8000a20:	40020000 	.word	0x40020000
 8000a24:	40020400 	.word	0x40020400

08000a28 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parameters)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b09c      	sub	sp, #112	; 0x70
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		//printf("%s\n", (char*)parameters);

		snprintf(msg,100,"%s\n", (char*)parameters);
 8000a30:	f107 000c 	add.w	r0, r7, #12
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4a09      	ldr	r2, [pc, #36]	; (8000a5c <task1_handler+0x34>)
 8000a38:	2164      	movs	r1, #100	; 0x64
 8000a3a:	f006 fa49 	bl	8006ed0 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000a3e:	f107 030c 	add.w	r3, r7, #12
 8000a42:	4618      	mov	r0, r3
 8000a44:	f006 f95c 	bl	8006d00 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <task1_handler+0x38>)
 8000a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	f3bf 8f4f 	dsb	sy
 8000a54:	f3bf 8f6f 	isb	sy
	{
 8000a58:	e7ea      	b.n	8000a30 <task1_handler+0x8>
 8000a5a:	bf00      	nop
 8000a5c:	0800782c 	.word	0x0800782c
 8000a60:	e000ed04 	.word	0xe000ed04

08000a64 <task2_handler>:
	}

}

static void task2_handler(void* parameters)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b09c      	sub	sp, #112	; 0x70
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		char msg[100];
		//printf("%s\n", (char*)parameters);
		snprintf(msg,100,"%s\n", (char*)parameters);
 8000a6c:	f107 000c 	add.w	r0, r7, #12
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	4a09      	ldr	r2, [pc, #36]	; (8000a98 <task2_handler+0x34>)
 8000a74:	2164      	movs	r1, #100	; 0x64
 8000a76:	f006 fa2b 	bl	8006ed0 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000a7a:	f107 030c 	add.w	r3, r7, #12
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f006 f93e 	bl	8006d00 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <task2_handler+0x38>)
 8000a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	f3bf 8f4f 	dsb	sy
 8000a90:	f3bf 8f6f 	isb	sy
	{
 8000a94:	e7ea      	b.n	8000a6c <task2_handler+0x8>
 8000a96:	bf00      	nop
 8000a98:	0800782c 	.word	0x0800782c
 8000a9c:	e000ed04 	.word	0xe000ed04

08000aa0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a04      	ldr	r2, [pc, #16]	; (8000ac0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d101      	bne.n	8000ab6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ab2:	f000 f90d 	bl	8000cd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40001000 	.word	0x40001000

08000ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac8:	b672      	cpsid	i
}
 8000aca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000acc:	e7fe      	b.n	8000acc <Error_Handler+0x8>
	...

08000ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <HAL_MspInit+0x4c>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ade:	4a0f      	ldr	r2, [pc, #60]	; (8000b1c <HAL_MspInit+0x4c>)
 8000ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ae6:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <HAL_MspInit+0x4c>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	603b      	str	r3, [r7, #0]
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <HAL_MspInit+0x4c>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afa:	4a08      	ldr	r2, [pc, #32]	; (8000b1c <HAL_MspInit+0x4c>)
 8000afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b00:	6413      	str	r3, [r2, #64]	; 0x40
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_MspInit+0x4c>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000b0e:	f003 f9ab 	bl	8003e68 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40023800 	.word	0x40023800

08000b20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08c      	sub	sp, #48	; 0x30
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000b30:	2200      	movs	r2, #0
 8000b32:	6879      	ldr	r1, [r7, #4]
 8000b34:	2036      	movs	r0, #54	; 0x36
 8000b36:	f000 f9a3 	bl	8000e80 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b3a:	2036      	movs	r0, #54	; 0x36
 8000b3c:	f000 f9bc 	bl	8000eb8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	4b1f      	ldr	r3, [pc, #124]	; (8000bc4 <HAL_InitTick+0xa4>)
 8000b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b48:	4a1e      	ldr	r2, [pc, #120]	; (8000bc4 <HAL_InitTick+0xa4>)
 8000b4a:	f043 0310 	orr.w	r3, r3, #16
 8000b4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b50:	4b1c      	ldr	r3, [pc, #112]	; (8000bc4 <HAL_InitTick+0xa4>)
 8000b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b54:	f003 0310 	and.w	r3, r3, #16
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b5c:	f107 0210 	add.w	r2, r7, #16
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	4611      	mov	r1, r2
 8000b66:	4618      	mov	r0, r3
 8000b68:	f000 ffee 	bl	8001b48 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b6c:	f000 ffd8 	bl	8001b20 <HAL_RCC_GetPCLK1Freq>
 8000b70:	4603      	mov	r3, r0
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b78:	4a13      	ldr	r2, [pc, #76]	; (8000bc8 <HAL_InitTick+0xa8>)
 8000b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b7e:	0c9b      	lsrs	r3, r3, #18
 8000b80:	3b01      	subs	r3, #1
 8000b82:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b84:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <HAL_InitTick+0xac>)
 8000b86:	4a12      	ldr	r2, [pc, #72]	; (8000bd0 <HAL_InitTick+0xb0>)
 8000b88:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b8a:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <HAL_InitTick+0xac>)
 8000b8c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b90:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b92:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <HAL_InitTick+0xac>)
 8000b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b96:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b98:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <HAL_InitTick+0xac>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <HAL_InitTick+0xac>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000ba4:	4809      	ldr	r0, [pc, #36]	; (8000bcc <HAL_InitTick+0xac>)
 8000ba6:	f001 f801 	bl	8001bac <HAL_TIM_Base_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d104      	bne.n	8000bba <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000bb0:	4806      	ldr	r0, [pc, #24]	; (8000bcc <HAL_InitTick+0xac>)
 8000bb2:	f001 f855 	bl	8001c60 <HAL_TIM_Base_Start_IT>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	e000      	b.n	8000bbc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3730      	adds	r7, #48	; 0x30
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	431bde83 	.word	0x431bde83
 8000bcc:	2000009c 	.word	0x2000009c
 8000bd0:	40001000 	.word	0x40001000

08000bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <NMI_Handler+0x4>

08000bda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <HardFault_Handler+0x4>

08000be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <MemManage_Handler+0x4>

08000be6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bea:	e7fe      	b.n	8000bea <BusFault_Handler+0x4>

08000bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <UsageFault_Handler+0x4>

08000bf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c04:	4802      	ldr	r0, [pc, #8]	; (8000c10 <TIM6_DAC_IRQHandler+0x10>)
 8000c06:	f001 f89b 	bl	8001d40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	2000009c 	.word	0x2000009c

08000c14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <SystemInit+0x20>)
 8000c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c1e:	4a05      	ldr	r2, [pc, #20]	; (8000c34 <SystemInit+0x20>)
 8000c20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c3c:	480d      	ldr	r0, [pc, #52]	; (8000c74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c3e:	490e      	ldr	r1, [pc, #56]	; (8000c78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c40:	4a0e      	ldr	r2, [pc, #56]	; (8000c7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c44:	e002      	b.n	8000c4c <LoopCopyDataInit>

08000c46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c4a:	3304      	adds	r3, #4

08000c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c50:	d3f9      	bcc.n	8000c46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c52:	4a0b      	ldr	r2, [pc, #44]	; (8000c80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c54:	4c0b      	ldr	r4, [pc, #44]	; (8000c84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c58:	e001      	b.n	8000c5e <LoopFillZerobss>

08000c5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c5c:	3204      	adds	r2, #4

08000c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c60:	d3fb      	bcc.n	8000c5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c62:	f7ff ffd7 	bl	8000c14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c66:	f006 f8e9 	bl	8006e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c6a:	f7ff fcd3 	bl	8000614 <main>
  bx  lr    
 8000c6e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c78:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000c7c:	08007998 	.word	0x08007998
  ldr r2, =_sbss
 8000c80:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000c84:	2001a90c 	.word	0x2001a90c

08000c88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c88:	e7fe      	b.n	8000c88 <ADC_IRQHandler>
	...

08000c8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c90:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <HAL_Init+0x40>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0d      	ldr	r2, [pc, #52]	; (8000ccc <HAL_Init+0x40>)
 8000c96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <HAL_Init+0x40>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a0a      	ldr	r2, [pc, #40]	; (8000ccc <HAL_Init+0x40>)
 8000ca2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ca6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca8:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <HAL_Init+0x40>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a07      	ldr	r2, [pc, #28]	; (8000ccc <HAL_Init+0x40>)
 8000cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb4:	2003      	movs	r0, #3
 8000cb6:	f000 f8d8 	bl	8000e6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f7ff ff30 	bl	8000b20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc0:	f7ff ff06 	bl	8000ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40023c00 	.word	0x40023c00

08000cd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <HAL_IncTick+0x20>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_IncTick+0x24>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4413      	add	r3, r2
 8000ce0:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <HAL_IncTick+0x24>)
 8000ce2:	6013      	str	r3, [r2, #0]
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	20000008 	.word	0x20000008
 8000cf4:	200000e4 	.word	0x200000e4

08000cf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cfc:	4b03      	ldr	r3, [pc, #12]	; (8000d0c <HAL_GetTick+0x14>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	200000e4 	.word	0x200000e4

08000d10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <__NVIC_SetPriorityGrouping+0x44>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d26:	68ba      	ldr	r2, [r7, #8]
 8000d28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d42:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <__NVIC_SetPriorityGrouping+0x44>)
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	60d3      	str	r3, [r2, #12]
}
 8000d48:	bf00      	nop
 8000d4a:	3714      	adds	r7, #20
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d5c:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <__NVIC_GetPriorityGrouping+0x18>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	0a1b      	lsrs	r3, r3, #8
 8000d62:	f003 0307 	and.w	r3, r3, #7
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	db0b      	blt.n	8000d9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	f003 021f 	and.w	r2, r3, #31
 8000d8c:	4907      	ldr	r1, [pc, #28]	; (8000dac <__NVIC_EnableIRQ+0x38>)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	095b      	lsrs	r3, r3, #5
 8000d94:	2001      	movs	r0, #1
 8000d96:	fa00 f202 	lsl.w	r2, r0, r2
 8000d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	e000e100 	.word	0xe000e100

08000db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	6039      	str	r1, [r7, #0]
 8000dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	db0a      	blt.n	8000dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	490c      	ldr	r1, [pc, #48]	; (8000dfc <__NVIC_SetPriority+0x4c>)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	0112      	lsls	r2, r2, #4
 8000dd0:	b2d2      	uxtb	r2, r2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd8:	e00a      	b.n	8000df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4908      	ldr	r1, [pc, #32]	; (8000e00 <__NVIC_SetPriority+0x50>)
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	f003 030f 	and.w	r3, r3, #15
 8000de6:	3b04      	subs	r3, #4
 8000de8:	0112      	lsls	r2, r2, #4
 8000dea:	b2d2      	uxtb	r2, r2
 8000dec:	440b      	add	r3, r1
 8000dee:	761a      	strb	r2, [r3, #24]
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000e100 	.word	0xe000e100
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b089      	sub	sp, #36	; 0x24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	f1c3 0307 	rsb	r3, r3, #7
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	bf28      	it	cs
 8000e22:	2304      	movcs	r3, #4
 8000e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3304      	adds	r3, #4
 8000e2a:	2b06      	cmp	r3, #6
 8000e2c:	d902      	bls.n	8000e34 <NVIC_EncodePriority+0x30>
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3b03      	subs	r3, #3
 8000e32:	e000      	b.n	8000e36 <NVIC_EncodePriority+0x32>
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e38:	f04f 32ff 	mov.w	r2, #4294967295
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43da      	mvns	r2, r3
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	401a      	ands	r2, r3
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	fa01 f303 	lsl.w	r3, r1, r3
 8000e56:	43d9      	mvns	r1, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	4313      	orrs	r3, r2
         );
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3724      	adds	r7, #36	; 0x24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff ff4c 	bl	8000d10 <__NVIC_SetPriorityGrouping>
}
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
 8000e8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e92:	f7ff ff61 	bl	8000d58 <__NVIC_GetPriorityGrouping>
 8000e96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	68b9      	ldr	r1, [r7, #8]
 8000e9c:	6978      	ldr	r0, [r7, #20]
 8000e9e:	f7ff ffb1 	bl	8000e04 <NVIC_EncodePriority>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea8:	4611      	mov	r1, r2
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff ff80 	bl	8000db0 <__NVIC_SetPriority>
}
 8000eb0:	bf00      	nop
 8000eb2:	3718      	adds	r7, #24
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff ff54 	bl	8000d74 <__NVIC_EnableIRQ>
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b089      	sub	sp, #36	; 0x24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
 8000eee:	e16b      	b.n	80011c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	697a      	ldr	r2, [r7, #20]
 8000f00:	4013      	ands	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	f040 815a 	bne.w	80011c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f003 0303 	and.w	r3, r3, #3
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d005      	beq.n	8000f26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d130      	bne.n	8000f88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	2203      	movs	r2, #3
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	68da      	ldr	r2, [r3, #12]
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	091b      	lsrs	r3, r3, #4
 8000f72:	f003 0201 	and.w	r2, r3, #1
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	2b03      	cmp	r3, #3
 8000f92:	d017      	beq.n	8000fc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	689a      	ldr	r2, [r3, #8]
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d123      	bne.n	8001018 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	08da      	lsrs	r2, r3, #3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3208      	adds	r2, #8
 8000fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	f003 0307 	and.w	r3, r3, #7
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	220f      	movs	r2, #15
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	691a      	ldr	r2, [r3, #16]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	08da      	lsrs	r2, r3, #3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	3208      	adds	r2, #8
 8001012:	69b9      	ldr	r1, [r7, #24]
 8001014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	2203      	movs	r2, #3
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 0203 	and.w	r2, r3, #3
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001054:	2b00      	cmp	r3, #0
 8001056:	f000 80b4 	beq.w	80011c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	4b60      	ldr	r3, [pc, #384]	; (80011e0 <HAL_GPIO_Init+0x30c>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	4a5f      	ldr	r2, [pc, #380]	; (80011e0 <HAL_GPIO_Init+0x30c>)
 8001064:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001068:	6453      	str	r3, [r2, #68]	; 0x44
 800106a:	4b5d      	ldr	r3, [pc, #372]	; (80011e0 <HAL_GPIO_Init+0x30c>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001076:	4a5b      	ldr	r2, [pc, #364]	; (80011e4 <HAL_GPIO_Init+0x310>)
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	089b      	lsrs	r3, r3, #2
 800107c:	3302      	adds	r3, #2
 800107e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001082:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	f003 0303 	and.w	r3, r3, #3
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	220f      	movs	r2, #15
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a52      	ldr	r2, [pc, #328]	; (80011e8 <HAL_GPIO_Init+0x314>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d02b      	beq.n	80010fa <HAL_GPIO_Init+0x226>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a51      	ldr	r2, [pc, #324]	; (80011ec <HAL_GPIO_Init+0x318>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d025      	beq.n	80010f6 <HAL_GPIO_Init+0x222>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a50      	ldr	r2, [pc, #320]	; (80011f0 <HAL_GPIO_Init+0x31c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d01f      	beq.n	80010f2 <HAL_GPIO_Init+0x21e>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a4f      	ldr	r2, [pc, #316]	; (80011f4 <HAL_GPIO_Init+0x320>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d019      	beq.n	80010ee <HAL_GPIO_Init+0x21a>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a4e      	ldr	r2, [pc, #312]	; (80011f8 <HAL_GPIO_Init+0x324>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d013      	beq.n	80010ea <HAL_GPIO_Init+0x216>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a4d      	ldr	r2, [pc, #308]	; (80011fc <HAL_GPIO_Init+0x328>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d00d      	beq.n	80010e6 <HAL_GPIO_Init+0x212>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a4c      	ldr	r2, [pc, #304]	; (8001200 <HAL_GPIO_Init+0x32c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d007      	beq.n	80010e2 <HAL_GPIO_Init+0x20e>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a4b      	ldr	r2, [pc, #300]	; (8001204 <HAL_GPIO_Init+0x330>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d101      	bne.n	80010de <HAL_GPIO_Init+0x20a>
 80010da:	2307      	movs	r3, #7
 80010dc:	e00e      	b.n	80010fc <HAL_GPIO_Init+0x228>
 80010de:	2308      	movs	r3, #8
 80010e0:	e00c      	b.n	80010fc <HAL_GPIO_Init+0x228>
 80010e2:	2306      	movs	r3, #6
 80010e4:	e00a      	b.n	80010fc <HAL_GPIO_Init+0x228>
 80010e6:	2305      	movs	r3, #5
 80010e8:	e008      	b.n	80010fc <HAL_GPIO_Init+0x228>
 80010ea:	2304      	movs	r3, #4
 80010ec:	e006      	b.n	80010fc <HAL_GPIO_Init+0x228>
 80010ee:	2303      	movs	r3, #3
 80010f0:	e004      	b.n	80010fc <HAL_GPIO_Init+0x228>
 80010f2:	2302      	movs	r3, #2
 80010f4:	e002      	b.n	80010fc <HAL_GPIO_Init+0x228>
 80010f6:	2301      	movs	r3, #1
 80010f8:	e000      	b.n	80010fc <HAL_GPIO_Init+0x228>
 80010fa:	2300      	movs	r3, #0
 80010fc:	69fa      	ldr	r2, [r7, #28]
 80010fe:	f002 0203 	and.w	r2, r2, #3
 8001102:	0092      	lsls	r2, r2, #2
 8001104:	4093      	lsls	r3, r2
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800110c:	4935      	ldr	r1, [pc, #212]	; (80011e4 <HAL_GPIO_Init+0x310>)
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	089b      	lsrs	r3, r3, #2
 8001112:	3302      	adds	r3, #2
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800111a:	4b3b      	ldr	r3, [pc, #236]	; (8001208 <HAL_GPIO_Init+0x334>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	43db      	mvns	r3, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4013      	ands	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800113e:	4a32      	ldr	r2, [pc, #200]	; (8001208 <HAL_GPIO_Init+0x334>)
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001144:	4b30      	ldr	r3, [pc, #192]	; (8001208 <HAL_GPIO_Init+0x334>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d003      	beq.n	8001168 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001168:	4a27      	ldr	r2, [pc, #156]	; (8001208 <HAL_GPIO_Init+0x334>)
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800116e:	4b26      	ldr	r3, [pc, #152]	; (8001208 <HAL_GPIO_Init+0x334>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	43db      	mvns	r3, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4013      	ands	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001192:	4a1d      	ldr	r2, [pc, #116]	; (8001208 <HAL_GPIO_Init+0x334>)
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001198:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <HAL_GPIO_Init+0x334>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d003      	beq.n	80011bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011bc:	4a12      	ldr	r2, [pc, #72]	; (8001208 <HAL_GPIO_Init+0x334>)
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3301      	adds	r3, #1
 80011c6:	61fb      	str	r3, [r7, #28]
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	2b0f      	cmp	r3, #15
 80011cc:	f67f ae90 	bls.w	8000ef0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011d0:	bf00      	nop
 80011d2:	bf00      	nop
 80011d4:	3724      	adds	r7, #36	; 0x24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40013800 	.word	0x40013800
 80011e8:	40020000 	.word	0x40020000
 80011ec:	40020400 	.word	0x40020400
 80011f0:	40020800 	.word	0x40020800
 80011f4:	40020c00 	.word	0x40020c00
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40021400 	.word	0x40021400
 8001200:	40021800 	.word	0x40021800
 8001204:	40021c00 	.word	0x40021c00
 8001208:	40013c00 	.word	0x40013c00

0800120c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	807b      	strh	r3, [r7, #2]
 8001218:	4613      	mov	r3, r2
 800121a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800121c:	787b      	ldrb	r3, [r7, #1]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001222:	887a      	ldrh	r2, [r7, #2]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001228:	e003      	b.n	8001232 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800122a:	887b      	ldrh	r3, [r7, #2]
 800122c:	041a      	lsls	r2, r3, #16
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	619a      	str	r2, [r3, #24]
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
	...

08001240 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d101      	bne.n	8001252 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e267      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	2b00      	cmp	r3, #0
 800125c:	d075      	beq.n	800134a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800125e:	4b88      	ldr	r3, [pc, #544]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f003 030c 	and.w	r3, r3, #12
 8001266:	2b04      	cmp	r3, #4
 8001268:	d00c      	beq.n	8001284 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800126a:	4b85      	ldr	r3, [pc, #532]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001272:	2b08      	cmp	r3, #8
 8001274:	d112      	bne.n	800129c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001276:	4b82      	ldr	r3, [pc, #520]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800127e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001282:	d10b      	bne.n	800129c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001284:	4b7e      	ldr	r3, [pc, #504]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d05b      	beq.n	8001348 <HAL_RCC_OscConfig+0x108>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d157      	bne.n	8001348 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e242      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a4:	d106      	bne.n	80012b4 <HAL_RCC_OscConfig+0x74>
 80012a6:	4b76      	ldr	r3, [pc, #472]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a75      	ldr	r2, [pc, #468]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 80012ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	e01d      	b.n	80012f0 <HAL_RCC_OscConfig+0xb0>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012bc:	d10c      	bne.n	80012d8 <HAL_RCC_OscConfig+0x98>
 80012be:	4b70      	ldr	r3, [pc, #448]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a6f      	ldr	r2, [pc, #444]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 80012c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012c8:	6013      	str	r3, [r2, #0]
 80012ca:	4b6d      	ldr	r3, [pc, #436]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a6c      	ldr	r2, [pc, #432]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 80012d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d4:	6013      	str	r3, [r2, #0]
 80012d6:	e00b      	b.n	80012f0 <HAL_RCC_OscConfig+0xb0>
 80012d8:	4b69      	ldr	r3, [pc, #420]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a68      	ldr	r2, [pc, #416]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 80012de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012e2:	6013      	str	r3, [r2, #0]
 80012e4:	4b66      	ldr	r3, [pc, #408]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a65      	ldr	r2, [pc, #404]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 80012ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d013      	beq.n	8001320 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f8:	f7ff fcfe 	bl	8000cf8 <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001300:	f7ff fcfa 	bl	8000cf8 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b64      	cmp	r3, #100	; 0x64
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e207      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001312:	4b5b      	ldr	r3, [pc, #364]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0f0      	beq.n	8001300 <HAL_RCC_OscConfig+0xc0>
 800131e:	e014      	b.n	800134a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001320:	f7ff fcea 	bl	8000cf8 <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001328:	f7ff fce6 	bl	8000cf8 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b64      	cmp	r3, #100	; 0x64
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e1f3      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800133a:	4b51      	ldr	r3, [pc, #324]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1f0      	bne.n	8001328 <HAL_RCC_OscConfig+0xe8>
 8001346:	e000      	b.n	800134a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001348:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d063      	beq.n	800141e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001356:	4b4a      	ldr	r3, [pc, #296]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 030c 	and.w	r3, r3, #12
 800135e:	2b00      	cmp	r3, #0
 8001360:	d00b      	beq.n	800137a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001362:	4b47      	ldr	r3, [pc, #284]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800136a:	2b08      	cmp	r3, #8
 800136c:	d11c      	bne.n	80013a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800136e:	4b44      	ldr	r3, [pc, #272]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d116      	bne.n	80013a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800137a:	4b41      	ldr	r3, [pc, #260]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d005      	beq.n	8001392 <HAL_RCC_OscConfig+0x152>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d001      	beq.n	8001392 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e1c7      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001392:	4b3b      	ldr	r3, [pc, #236]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	4937      	ldr	r1, [pc, #220]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 80013a2:	4313      	orrs	r3, r2
 80013a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013a6:	e03a      	b.n	800141e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d020      	beq.n	80013f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013b0:	4b34      	ldr	r3, [pc, #208]	; (8001484 <HAL_RCC_OscConfig+0x244>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b6:	f7ff fc9f 	bl	8000cf8 <HAL_GetTick>
 80013ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013bc:	e008      	b.n	80013d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013be:	f7ff fc9b 	bl	8000cf8 <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e1a8      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d0:	4b2b      	ldr	r3, [pc, #172]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d0f0      	beq.n	80013be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013dc:	4b28      	ldr	r3, [pc, #160]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	691b      	ldr	r3, [r3, #16]
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	4925      	ldr	r1, [pc, #148]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 80013ec:	4313      	orrs	r3, r2
 80013ee:	600b      	str	r3, [r1, #0]
 80013f0:	e015      	b.n	800141e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013f2:	4b24      	ldr	r3, [pc, #144]	; (8001484 <HAL_RCC_OscConfig+0x244>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f8:	f7ff fc7e 	bl	8000cf8 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001400:	f7ff fc7a 	bl	8000cf8 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e187      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001412:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1f0      	bne.n	8001400 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0308 	and.w	r3, r3, #8
 8001426:	2b00      	cmp	r3, #0
 8001428:	d036      	beq.n	8001498 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d016      	beq.n	8001460 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <HAL_RCC_OscConfig+0x248>)
 8001434:	2201      	movs	r2, #1
 8001436:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001438:	f7ff fc5e 	bl	8000cf8 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001440:	f7ff fc5a 	bl	8000cf8 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e167      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001452:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 8001454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0f0      	beq.n	8001440 <HAL_RCC_OscConfig+0x200>
 800145e:	e01b      	b.n	8001498 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001460:	4b09      	ldr	r3, [pc, #36]	; (8001488 <HAL_RCC_OscConfig+0x248>)
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001466:	f7ff fc47 	bl	8000cf8 <HAL_GetTick>
 800146a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800146c:	e00e      	b.n	800148c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800146e:	f7ff fc43 	bl	8000cf8 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d907      	bls.n	800148c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e150      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
 8001480:	40023800 	.word	0x40023800
 8001484:	42470000 	.word	0x42470000
 8001488:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800148c:	4b88      	ldr	r3, [pc, #544]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 800148e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1ea      	bne.n	800146e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	f000 8097 	beq.w	80015d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014a6:	2300      	movs	r3, #0
 80014a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014aa:	4b81      	ldr	r3, [pc, #516]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d10f      	bne.n	80014d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	4b7d      	ldr	r3, [pc, #500]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	4a7c      	ldr	r2, [pc, #496]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 80014c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c4:	6413      	str	r3, [r2, #64]	; 0x40
 80014c6:	4b7a      	ldr	r3, [pc, #488]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014d2:	2301      	movs	r3, #1
 80014d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d6:	4b77      	ldr	r3, [pc, #476]	; (80016b4 <HAL_RCC_OscConfig+0x474>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d118      	bne.n	8001514 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014e2:	4b74      	ldr	r3, [pc, #464]	; (80016b4 <HAL_RCC_OscConfig+0x474>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a73      	ldr	r2, [pc, #460]	; (80016b4 <HAL_RCC_OscConfig+0x474>)
 80014e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ee:	f7ff fc03 	bl	8000cf8 <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f4:	e008      	b.n	8001508 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014f6:	f7ff fbff 	bl	8000cf8 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e10c      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001508:	4b6a      	ldr	r3, [pc, #424]	; (80016b4 <HAL_RCC_OscConfig+0x474>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001510:	2b00      	cmp	r3, #0
 8001512:	d0f0      	beq.n	80014f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d106      	bne.n	800152a <HAL_RCC_OscConfig+0x2ea>
 800151c:	4b64      	ldr	r3, [pc, #400]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 800151e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001520:	4a63      	ldr	r2, [pc, #396]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 8001522:	f043 0301 	orr.w	r3, r3, #1
 8001526:	6713      	str	r3, [r2, #112]	; 0x70
 8001528:	e01c      	b.n	8001564 <HAL_RCC_OscConfig+0x324>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	2b05      	cmp	r3, #5
 8001530:	d10c      	bne.n	800154c <HAL_RCC_OscConfig+0x30c>
 8001532:	4b5f      	ldr	r3, [pc, #380]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 8001534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001536:	4a5e      	ldr	r2, [pc, #376]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 8001538:	f043 0304 	orr.w	r3, r3, #4
 800153c:	6713      	str	r3, [r2, #112]	; 0x70
 800153e:	4b5c      	ldr	r3, [pc, #368]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 8001540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001542:	4a5b      	ldr	r2, [pc, #364]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6713      	str	r3, [r2, #112]	; 0x70
 800154a:	e00b      	b.n	8001564 <HAL_RCC_OscConfig+0x324>
 800154c:	4b58      	ldr	r3, [pc, #352]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 800154e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001550:	4a57      	ldr	r2, [pc, #348]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 8001552:	f023 0301 	bic.w	r3, r3, #1
 8001556:	6713      	str	r3, [r2, #112]	; 0x70
 8001558:	4b55      	ldr	r3, [pc, #340]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 800155a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800155c:	4a54      	ldr	r2, [pc, #336]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 800155e:	f023 0304 	bic.w	r3, r3, #4
 8001562:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d015      	beq.n	8001598 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800156c:	f7ff fbc4 	bl	8000cf8 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001572:	e00a      	b.n	800158a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001574:	f7ff fbc0 	bl	8000cf8 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001582:	4293      	cmp	r3, r2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e0cb      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800158a:	4b49      	ldr	r3, [pc, #292]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 800158c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d0ee      	beq.n	8001574 <HAL_RCC_OscConfig+0x334>
 8001596:	e014      	b.n	80015c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001598:	f7ff fbae 	bl	8000cf8 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800159e:	e00a      	b.n	80015b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015a0:	f7ff fbaa 	bl	8000cf8 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e0b5      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b6:	4b3e      	ldr	r3, [pc, #248]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 80015b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1ee      	bne.n	80015a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015c2:	7dfb      	ldrb	r3, [r7, #23]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d105      	bne.n	80015d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015c8:	4b39      	ldr	r3, [pc, #228]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	4a38      	ldr	r2, [pc, #224]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 80015ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f000 80a1 	beq.w	8001720 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015de:	4b34      	ldr	r3, [pc, #208]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 030c 	and.w	r3, r3, #12
 80015e6:	2b08      	cmp	r3, #8
 80015e8:	d05c      	beq.n	80016a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d141      	bne.n	8001676 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015f2:	4b31      	ldr	r3, [pc, #196]	; (80016b8 <HAL_RCC_OscConfig+0x478>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f8:	f7ff fb7e 	bl	8000cf8 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001600:	f7ff fb7a 	bl	8000cf8 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e087      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001612:	4b27      	ldr	r3, [pc, #156]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f0      	bne.n	8001600 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	69da      	ldr	r2, [r3, #28]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a1b      	ldr	r3, [r3, #32]
 8001626:	431a      	orrs	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162c:	019b      	lsls	r3, r3, #6
 800162e:	431a      	orrs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001634:	085b      	lsrs	r3, r3, #1
 8001636:	3b01      	subs	r3, #1
 8001638:	041b      	lsls	r3, r3, #16
 800163a:	431a      	orrs	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001640:	061b      	lsls	r3, r3, #24
 8001642:	491b      	ldr	r1, [pc, #108]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 8001644:	4313      	orrs	r3, r2
 8001646:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001648:	4b1b      	ldr	r3, [pc, #108]	; (80016b8 <HAL_RCC_OscConfig+0x478>)
 800164a:	2201      	movs	r2, #1
 800164c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164e:	f7ff fb53 	bl	8000cf8 <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001654:	e008      	b.n	8001668 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001656:	f7ff fb4f 	bl	8000cf8 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e05c      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001668:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d0f0      	beq.n	8001656 <HAL_RCC_OscConfig+0x416>
 8001674:	e054      	b.n	8001720 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001676:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <HAL_RCC_OscConfig+0x478>)
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167c:	f7ff fb3c 	bl	8000cf8 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001684:	f7ff fb38 	bl	8000cf8 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e045      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001696:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f0      	bne.n	8001684 <HAL_RCC_OscConfig+0x444>
 80016a2:	e03d      	b.n	8001720 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d107      	bne.n	80016bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e038      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40007000 	.word	0x40007000
 80016b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016bc:	4b1b      	ldr	r3, [pc, #108]	; (800172c <HAL_RCC_OscConfig+0x4ec>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d028      	beq.n	800171c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d121      	bne.n	800171c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d11a      	bne.n	800171c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016ec:	4013      	ands	r3, r2
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d111      	bne.n	800171c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001702:	085b      	lsrs	r3, r3, #1
 8001704:	3b01      	subs	r3, #1
 8001706:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001708:	429a      	cmp	r2, r3
 800170a:	d107      	bne.n	800171c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001716:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001718:	429a      	cmp	r2, r3
 800171a:	d001      	beq.n	8001720 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e000      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40023800 	.word	0x40023800

08001730 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d101      	bne.n	8001744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e0cc      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001744:	4b68      	ldr	r3, [pc, #416]	; (80018e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0307 	and.w	r3, r3, #7
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	429a      	cmp	r2, r3
 8001750:	d90c      	bls.n	800176c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001752:	4b65      	ldr	r3, [pc, #404]	; (80018e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800175a:	4b63      	ldr	r3, [pc, #396]	; (80018e8 <HAL_RCC_ClockConfig+0x1b8>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	429a      	cmp	r2, r3
 8001766:	d001      	beq.n	800176c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e0b8      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d020      	beq.n	80017ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b00      	cmp	r3, #0
 8001782:	d005      	beq.n	8001790 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001784:	4b59      	ldr	r3, [pc, #356]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	4a58      	ldr	r2, [pc, #352]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 800178a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800178e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0308 	and.w	r3, r3, #8
 8001798:	2b00      	cmp	r3, #0
 800179a:	d005      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800179c:	4b53      	ldr	r3, [pc, #332]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	4a52      	ldr	r2, [pc, #328]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a8:	4b50      	ldr	r3, [pc, #320]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	494d      	ldr	r1, [pc, #308]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d044      	beq.n	8001850 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d107      	bne.n	80017de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ce:	4b47      	ldr	r3, [pc, #284]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d119      	bne.n	800180e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e07f      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d003      	beq.n	80017ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ea:	2b03      	cmp	r3, #3
 80017ec:	d107      	bne.n	80017fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ee:	4b3f      	ldr	r3, [pc, #252]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d109      	bne.n	800180e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e06f      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fe:	4b3b      	ldr	r3, [pc, #236]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e067      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800180e:	4b37      	ldr	r3, [pc, #220]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f023 0203 	bic.w	r2, r3, #3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	4934      	ldr	r1, [pc, #208]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 800181c:	4313      	orrs	r3, r2
 800181e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001820:	f7ff fa6a 	bl	8000cf8 <HAL_GetTick>
 8001824:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001826:	e00a      	b.n	800183e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001828:	f7ff fa66 	bl	8000cf8 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	f241 3288 	movw	r2, #5000	; 0x1388
 8001836:	4293      	cmp	r3, r2
 8001838:	d901      	bls.n	800183e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e04f      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183e:	4b2b      	ldr	r3, [pc, #172]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 020c 	and.w	r2, r3, #12
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	429a      	cmp	r2, r3
 800184e:	d1eb      	bne.n	8001828 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001850:	4b25      	ldr	r3, [pc, #148]	; (80018e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0307 	and.w	r3, r3, #7
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	429a      	cmp	r2, r3
 800185c:	d20c      	bcs.n	8001878 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185e:	4b22      	ldr	r3, [pc, #136]	; (80018e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001866:	4b20      	ldr	r3, [pc, #128]	; (80018e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	429a      	cmp	r2, r3
 8001872:	d001      	beq.n	8001878 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e032      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0304 	and.w	r3, r3, #4
 8001880:	2b00      	cmp	r3, #0
 8001882:	d008      	beq.n	8001896 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001884:	4b19      	ldr	r3, [pc, #100]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	4916      	ldr	r1, [pc, #88]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 8001892:	4313      	orrs	r3, r2
 8001894:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0308 	and.w	r3, r3, #8
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d009      	beq.n	80018b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018a2:	4b12      	ldr	r3, [pc, #72]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	490e      	ldr	r1, [pc, #56]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018b6:	f000 f821 	bl	80018fc <HAL_RCC_GetSysClockFreq>
 80018ba:	4602      	mov	r2, r0
 80018bc:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	091b      	lsrs	r3, r3, #4
 80018c2:	f003 030f 	and.w	r3, r3, #15
 80018c6:	490a      	ldr	r1, [pc, #40]	; (80018f0 <HAL_RCC_ClockConfig+0x1c0>)
 80018c8:	5ccb      	ldrb	r3, [r1, r3]
 80018ca:	fa22 f303 	lsr.w	r3, r2, r3
 80018ce:	4a09      	ldr	r2, [pc, #36]	; (80018f4 <HAL_RCC_ClockConfig+0x1c4>)
 80018d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018d2:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <HAL_RCC_ClockConfig+0x1c8>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff f922 	bl	8000b20 <HAL_InitTick>

  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40023c00 	.word	0x40023c00
 80018ec:	40023800 	.word	0x40023800
 80018f0:	08007914 	.word	0x08007914
 80018f4:	20000000 	.word	0x20000000
 80018f8:	20000004 	.word	0x20000004

080018fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001900:	b094      	sub	sp, #80	; 0x50
 8001902:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001904:	2300      	movs	r3, #0
 8001906:	647b      	str	r3, [r7, #68]	; 0x44
 8001908:	2300      	movs	r3, #0
 800190a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800190c:	2300      	movs	r3, #0
 800190e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001910:	2300      	movs	r3, #0
 8001912:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001914:	4b79      	ldr	r3, [pc, #484]	; (8001afc <HAL_RCC_GetSysClockFreq+0x200>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f003 030c 	and.w	r3, r3, #12
 800191c:	2b08      	cmp	r3, #8
 800191e:	d00d      	beq.n	800193c <HAL_RCC_GetSysClockFreq+0x40>
 8001920:	2b08      	cmp	r3, #8
 8001922:	f200 80e1 	bhi.w	8001ae8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001926:	2b00      	cmp	r3, #0
 8001928:	d002      	beq.n	8001930 <HAL_RCC_GetSysClockFreq+0x34>
 800192a:	2b04      	cmp	r3, #4
 800192c:	d003      	beq.n	8001936 <HAL_RCC_GetSysClockFreq+0x3a>
 800192e:	e0db      	b.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001930:	4b73      	ldr	r3, [pc, #460]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x204>)
 8001932:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001934:	e0db      	b.n	8001aee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001936:	4b73      	ldr	r3, [pc, #460]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x208>)
 8001938:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800193a:	e0d8      	b.n	8001aee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800193c:	4b6f      	ldr	r3, [pc, #444]	; (8001afc <HAL_RCC_GetSysClockFreq+0x200>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001944:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001946:	4b6d      	ldr	r3, [pc, #436]	; (8001afc <HAL_RCC_GetSysClockFreq+0x200>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d063      	beq.n	8001a1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001952:	4b6a      	ldr	r3, [pc, #424]	; (8001afc <HAL_RCC_GetSysClockFreq+0x200>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	099b      	lsrs	r3, r3, #6
 8001958:	2200      	movs	r2, #0
 800195a:	63bb      	str	r3, [r7, #56]	; 0x38
 800195c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800195e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001964:	633b      	str	r3, [r7, #48]	; 0x30
 8001966:	2300      	movs	r3, #0
 8001968:	637b      	str	r3, [r7, #52]	; 0x34
 800196a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800196e:	4622      	mov	r2, r4
 8001970:	462b      	mov	r3, r5
 8001972:	f04f 0000 	mov.w	r0, #0
 8001976:	f04f 0100 	mov.w	r1, #0
 800197a:	0159      	lsls	r1, r3, #5
 800197c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001980:	0150      	lsls	r0, r2, #5
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	4621      	mov	r1, r4
 8001988:	1a51      	subs	r1, r2, r1
 800198a:	6139      	str	r1, [r7, #16]
 800198c:	4629      	mov	r1, r5
 800198e:	eb63 0301 	sbc.w	r3, r3, r1
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	f04f 0200 	mov.w	r2, #0
 8001998:	f04f 0300 	mov.w	r3, #0
 800199c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019a0:	4659      	mov	r1, fp
 80019a2:	018b      	lsls	r3, r1, #6
 80019a4:	4651      	mov	r1, sl
 80019a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019aa:	4651      	mov	r1, sl
 80019ac:	018a      	lsls	r2, r1, #6
 80019ae:	4651      	mov	r1, sl
 80019b0:	ebb2 0801 	subs.w	r8, r2, r1
 80019b4:	4659      	mov	r1, fp
 80019b6:	eb63 0901 	sbc.w	r9, r3, r1
 80019ba:	f04f 0200 	mov.w	r2, #0
 80019be:	f04f 0300 	mov.w	r3, #0
 80019c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019ce:	4690      	mov	r8, r2
 80019d0:	4699      	mov	r9, r3
 80019d2:	4623      	mov	r3, r4
 80019d4:	eb18 0303 	adds.w	r3, r8, r3
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	462b      	mov	r3, r5
 80019dc:	eb49 0303 	adc.w	r3, r9, r3
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	f04f 0200 	mov.w	r2, #0
 80019e6:	f04f 0300 	mov.w	r3, #0
 80019ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019ee:	4629      	mov	r1, r5
 80019f0:	024b      	lsls	r3, r1, #9
 80019f2:	4621      	mov	r1, r4
 80019f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019f8:	4621      	mov	r1, r4
 80019fa:	024a      	lsls	r2, r1, #9
 80019fc:	4610      	mov	r0, r2
 80019fe:	4619      	mov	r1, r3
 8001a00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a02:	2200      	movs	r2, #0
 8001a04:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a0c:	f7fe fc80 	bl	8000310 <__aeabi_uldivmod>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4613      	mov	r3, r2
 8001a16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a18:	e058      	b.n	8001acc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a1a:	4b38      	ldr	r3, [pc, #224]	; (8001afc <HAL_RCC_GetSysClockFreq+0x200>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	099b      	lsrs	r3, r3, #6
 8001a20:	2200      	movs	r2, #0
 8001a22:	4618      	mov	r0, r3
 8001a24:	4611      	mov	r1, r2
 8001a26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a2a:	623b      	str	r3, [r7, #32]
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a34:	4642      	mov	r2, r8
 8001a36:	464b      	mov	r3, r9
 8001a38:	f04f 0000 	mov.w	r0, #0
 8001a3c:	f04f 0100 	mov.w	r1, #0
 8001a40:	0159      	lsls	r1, r3, #5
 8001a42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a46:	0150      	lsls	r0, r2, #5
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4641      	mov	r1, r8
 8001a4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a52:	4649      	mov	r1, r9
 8001a54:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a58:	f04f 0200 	mov.w	r2, #0
 8001a5c:	f04f 0300 	mov.w	r3, #0
 8001a60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a6c:	ebb2 040a 	subs.w	r4, r2, sl
 8001a70:	eb63 050b 	sbc.w	r5, r3, fp
 8001a74:	f04f 0200 	mov.w	r2, #0
 8001a78:	f04f 0300 	mov.w	r3, #0
 8001a7c:	00eb      	lsls	r3, r5, #3
 8001a7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a82:	00e2      	lsls	r2, r4, #3
 8001a84:	4614      	mov	r4, r2
 8001a86:	461d      	mov	r5, r3
 8001a88:	4643      	mov	r3, r8
 8001a8a:	18e3      	adds	r3, r4, r3
 8001a8c:	603b      	str	r3, [r7, #0]
 8001a8e:	464b      	mov	r3, r9
 8001a90:	eb45 0303 	adc.w	r3, r5, r3
 8001a94:	607b      	str	r3, [r7, #4]
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	f04f 0300 	mov.w	r3, #0
 8001a9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001aa2:	4629      	mov	r1, r5
 8001aa4:	028b      	lsls	r3, r1, #10
 8001aa6:	4621      	mov	r1, r4
 8001aa8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001aac:	4621      	mov	r1, r4
 8001aae:	028a      	lsls	r2, r1, #10
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	61bb      	str	r3, [r7, #24]
 8001aba:	61fa      	str	r2, [r7, #28]
 8001abc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ac0:	f7fe fc26 	bl	8000310 <__aeabi_uldivmod>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4613      	mov	r3, r2
 8001aca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001acc:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <HAL_RCC_GetSysClockFreq+0x200>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	0c1b      	lsrs	r3, r3, #16
 8001ad2:	f003 0303 	and.w	r3, r3, #3
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001adc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ade:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ae6:	e002      	b.n	8001aee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ae8:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x204>)
 8001aea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001aec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3750      	adds	r7, #80	; 0x50
 8001af4:	46bd      	mov	sp, r7
 8001af6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001afa:	bf00      	nop
 8001afc:	40023800 	.word	0x40023800
 8001b00:	00f42400 	.word	0x00f42400
 8001b04:	007a1200 	.word	0x007a1200

08001b08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b0c:	4b03      	ldr	r3, [pc, #12]	; (8001b1c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	20000000 	.word	0x20000000

08001b20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b24:	f7ff fff0 	bl	8001b08 <HAL_RCC_GetHCLKFreq>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	0a9b      	lsrs	r3, r3, #10
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	4903      	ldr	r1, [pc, #12]	; (8001b44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b36:	5ccb      	ldrb	r3, [r1, r3]
 8001b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40023800 	.word	0x40023800
 8001b44:	08007924 	.word	0x08007924

08001b48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	220f      	movs	r2, #15
 8001b56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b58:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 0203 	and.w	r2, r3, #3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b64:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b70:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b7c:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	08db      	lsrs	r3, r3, #3
 8001b82:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b8a:	4b07      	ldr	r3, [pc, #28]	; (8001ba8 <HAL_RCC_GetClockConfig+0x60>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0207 	and.w	r2, r3, #7
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	601a      	str	r2, [r3, #0]
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	40023c00 	.word	0x40023c00

08001bac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e041      	b.n	8001c42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d106      	bne.n	8001bd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 f839 	bl	8001c4a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2202      	movs	r2, #2
 8001bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3304      	adds	r3, #4
 8001be8:	4619      	mov	r1, r3
 8001bea:	4610      	mov	r0, r2
 8001bec:	f000 f9d8 	bl	8001fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
	...

08001c60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d001      	beq.n	8001c78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e04e      	b.n	8001d16 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68da      	ldr	r2, [r3, #12]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 0201 	orr.w	r2, r2, #1
 8001c8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a23      	ldr	r2, [pc, #140]	; (8001d24 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d022      	beq.n	8001ce0 <HAL_TIM_Base_Start_IT+0x80>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ca2:	d01d      	beq.n	8001ce0 <HAL_TIM_Base_Start_IT+0x80>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a1f      	ldr	r2, [pc, #124]	; (8001d28 <HAL_TIM_Base_Start_IT+0xc8>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d018      	beq.n	8001ce0 <HAL_TIM_Base_Start_IT+0x80>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a1e      	ldr	r2, [pc, #120]	; (8001d2c <HAL_TIM_Base_Start_IT+0xcc>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d013      	beq.n	8001ce0 <HAL_TIM_Base_Start_IT+0x80>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a1c      	ldr	r2, [pc, #112]	; (8001d30 <HAL_TIM_Base_Start_IT+0xd0>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d00e      	beq.n	8001ce0 <HAL_TIM_Base_Start_IT+0x80>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a1b      	ldr	r2, [pc, #108]	; (8001d34 <HAL_TIM_Base_Start_IT+0xd4>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d009      	beq.n	8001ce0 <HAL_TIM_Base_Start_IT+0x80>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a19      	ldr	r2, [pc, #100]	; (8001d38 <HAL_TIM_Base_Start_IT+0xd8>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d004      	beq.n	8001ce0 <HAL_TIM_Base_Start_IT+0x80>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a18      	ldr	r2, [pc, #96]	; (8001d3c <HAL_TIM_Base_Start_IT+0xdc>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d111      	bne.n	8001d04 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2b06      	cmp	r3, #6
 8001cf0:	d010      	beq.n	8001d14 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f042 0201 	orr.w	r2, r2, #1
 8001d00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d02:	e007      	b.n	8001d14 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f042 0201 	orr.w	r2, r2, #1
 8001d12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40010000 	.word	0x40010000
 8001d28:	40000400 	.word	0x40000400
 8001d2c:	40000800 	.word	0x40000800
 8001d30:	40000c00 	.word	0x40000c00
 8001d34:	40010400 	.word	0x40010400
 8001d38:	40014000 	.word	0x40014000
 8001d3c:	40001800 	.word	0x40001800

08001d40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d122      	bne.n	8001d9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d11b      	bne.n	8001d9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f06f 0202 	mvn.w	r2, #2
 8001d6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2201      	movs	r2, #1
 8001d72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f8ee 	bl	8001f64 <HAL_TIM_IC_CaptureCallback>
 8001d88:	e005      	b.n	8001d96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f8e0 	bl	8001f50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 f8f1 	bl	8001f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	f003 0304 	and.w	r3, r3, #4
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	d122      	bne.n	8001df0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d11b      	bne.n	8001df0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f06f 0204 	mvn.w	r2, #4
 8001dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f8c4 	bl	8001f64 <HAL_TIM_IC_CaptureCallback>
 8001ddc:	e005      	b.n	8001dea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f8b6 	bl	8001f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 f8c7 	bl	8001f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	2b08      	cmp	r3, #8
 8001dfc:	d122      	bne.n	8001e44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	f003 0308 	and.w	r3, r3, #8
 8001e08:	2b08      	cmp	r3, #8
 8001e0a:	d11b      	bne.n	8001e44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f06f 0208 	mvn.w	r2, #8
 8001e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2204      	movs	r2, #4
 8001e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d003      	beq.n	8001e32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f89a 	bl	8001f64 <HAL_TIM_IC_CaptureCallback>
 8001e30:	e005      	b.n	8001e3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f88c 	bl	8001f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 f89d 	bl	8001f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	f003 0310 	and.w	r3, r3, #16
 8001e4e:	2b10      	cmp	r3, #16
 8001e50:	d122      	bne.n	8001e98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	f003 0310 	and.w	r3, r3, #16
 8001e5c:	2b10      	cmp	r3, #16
 8001e5e:	d11b      	bne.n	8001e98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f06f 0210 	mvn.w	r2, #16
 8001e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2208      	movs	r2, #8
 8001e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f870 	bl	8001f64 <HAL_TIM_IC_CaptureCallback>
 8001e84:	e005      	b.n	8001e92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f862 	bl	8001f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 f873 	bl	8001f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d10e      	bne.n	8001ec4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d107      	bne.n	8001ec4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f06f 0201 	mvn.w	r2, #1
 8001ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7fe fdee 	bl	8000aa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ece:	2b80      	cmp	r3, #128	; 0x80
 8001ed0:	d10e      	bne.n	8001ef0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001edc:	2b80      	cmp	r3, #128	; 0x80
 8001ede:	d107      	bne.n	8001ef0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f902 	bl	80020f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001efa:	2b40      	cmp	r3, #64	; 0x40
 8001efc:	d10e      	bne.n	8001f1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f08:	2b40      	cmp	r3, #64	; 0x40
 8001f0a:	d107      	bne.n	8001f1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f838 	bl	8001f8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	f003 0320 	and.w	r3, r3, #32
 8001f26:	2b20      	cmp	r3, #32
 8001f28:	d10e      	bne.n	8001f48 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	f003 0320 	and.w	r3, r3, #32
 8001f34:	2b20      	cmp	r3, #32
 8001f36:	d107      	bne.n	8001f48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f06f 0220 	mvn.w	r2, #32
 8001f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f8cc 	bl	80020e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f48:	bf00      	nop
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a40      	ldr	r2, [pc, #256]	; (80020b4 <TIM_Base_SetConfig+0x114>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d013      	beq.n	8001fe0 <TIM_Base_SetConfig+0x40>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fbe:	d00f      	beq.n	8001fe0 <TIM_Base_SetConfig+0x40>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a3d      	ldr	r2, [pc, #244]	; (80020b8 <TIM_Base_SetConfig+0x118>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d00b      	beq.n	8001fe0 <TIM_Base_SetConfig+0x40>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a3c      	ldr	r2, [pc, #240]	; (80020bc <TIM_Base_SetConfig+0x11c>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d007      	beq.n	8001fe0 <TIM_Base_SetConfig+0x40>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a3b      	ldr	r2, [pc, #236]	; (80020c0 <TIM_Base_SetConfig+0x120>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d003      	beq.n	8001fe0 <TIM_Base_SetConfig+0x40>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a3a      	ldr	r2, [pc, #232]	; (80020c4 <TIM_Base_SetConfig+0x124>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d108      	bne.n	8001ff2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a2f      	ldr	r2, [pc, #188]	; (80020b4 <TIM_Base_SetConfig+0x114>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d02b      	beq.n	8002052 <TIM_Base_SetConfig+0xb2>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002000:	d027      	beq.n	8002052 <TIM_Base_SetConfig+0xb2>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a2c      	ldr	r2, [pc, #176]	; (80020b8 <TIM_Base_SetConfig+0x118>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d023      	beq.n	8002052 <TIM_Base_SetConfig+0xb2>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a2b      	ldr	r2, [pc, #172]	; (80020bc <TIM_Base_SetConfig+0x11c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d01f      	beq.n	8002052 <TIM_Base_SetConfig+0xb2>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a2a      	ldr	r2, [pc, #168]	; (80020c0 <TIM_Base_SetConfig+0x120>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d01b      	beq.n	8002052 <TIM_Base_SetConfig+0xb2>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a29      	ldr	r2, [pc, #164]	; (80020c4 <TIM_Base_SetConfig+0x124>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d017      	beq.n	8002052 <TIM_Base_SetConfig+0xb2>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a28      	ldr	r2, [pc, #160]	; (80020c8 <TIM_Base_SetConfig+0x128>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d013      	beq.n	8002052 <TIM_Base_SetConfig+0xb2>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a27      	ldr	r2, [pc, #156]	; (80020cc <TIM_Base_SetConfig+0x12c>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d00f      	beq.n	8002052 <TIM_Base_SetConfig+0xb2>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a26      	ldr	r2, [pc, #152]	; (80020d0 <TIM_Base_SetConfig+0x130>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d00b      	beq.n	8002052 <TIM_Base_SetConfig+0xb2>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a25      	ldr	r2, [pc, #148]	; (80020d4 <TIM_Base_SetConfig+0x134>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d007      	beq.n	8002052 <TIM_Base_SetConfig+0xb2>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a24      	ldr	r2, [pc, #144]	; (80020d8 <TIM_Base_SetConfig+0x138>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d003      	beq.n	8002052 <TIM_Base_SetConfig+0xb2>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a23      	ldr	r2, [pc, #140]	; (80020dc <TIM_Base_SetConfig+0x13c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d108      	bne.n	8002064 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002058:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	4313      	orrs	r3, r2
 8002062:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	4313      	orrs	r3, r2
 8002070:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a0a      	ldr	r2, [pc, #40]	; (80020b4 <TIM_Base_SetConfig+0x114>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d003      	beq.n	8002098 <TIM_Base_SetConfig+0xf8>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a0c      	ldr	r2, [pc, #48]	; (80020c4 <TIM_Base_SetConfig+0x124>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d103      	bne.n	80020a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	691a      	ldr	r2, [r3, #16]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	615a      	str	r2, [r3, #20]
}
 80020a6:	bf00      	nop
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	40010000 	.word	0x40010000
 80020b8:	40000400 	.word	0x40000400
 80020bc:	40000800 	.word	0x40000800
 80020c0:	40000c00 	.word	0x40000c00
 80020c4:	40010400 	.word	0x40010400
 80020c8:	40014000 	.word	0x40014000
 80020cc:	40014400 	.word	0x40014400
 80020d0:	40014800 	.word	0x40014800
 80020d4:	40001800 	.word	0x40001800
 80020d8:	40001c00 	.word	0x40001c00
 80020dc:	40002000 	.word	0x40002000

080020e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f103 0208 	add.w	r2, r3, #8
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f04f 32ff 	mov.w	r2, #4294967295
 8002120:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f103 0208 	add.w	r2, r3, #8
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f103 0208 	add.w	r2, r3, #8
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002162:	b480      	push	{r7}
 8002164:	b085      	sub	sp, #20
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
 800216a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002178:	d103      	bne.n	8002182 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	e00c      	b.n	800219c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	3308      	adds	r3, #8
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	e002      	b.n	8002190 <vListInsert+0x2e>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	429a      	cmp	r2, r3
 800219a:	d2f6      	bcs.n	800218a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	1c5a      	adds	r2, r3, #1
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	601a      	str	r2, [r3, #0]
}
 80021c8:	bf00      	nop
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6892      	ldr	r2, [r2, #8]
 80021ea:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6852      	ldr	r2, [r2, #4]
 80021f4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d103      	bne.n	8002208 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	1e5a      	subs	r2, r3, #1
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
}
 800221c:	4618      	mov	r0, r3
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002232:	2301      	movs	r3, #1
 8002234:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10a      	bne.n	8002256 <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002244:	f383 8811 	msr	BASEPRI, r3
 8002248:	f3bf 8f6f 	isb	sy
 800224c:	f3bf 8f4f 	dsb	sy
 8002250:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002252:	bf00      	nop
 8002254:	e7fe      	b.n	8002254 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d052      	beq.n	8002302 <xQueueGenericReset+0xda>
        ( pxQueue->uxLength >= 1U ) &&
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002260:	2b00      	cmp	r3, #0
 8002262:	d04e      	beq.n	8002302 <xQueueGenericReset+0xda>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226c:	2100      	movs	r1, #0
 800226e:	fba3 2302 	umull	r2, r3, r3, r2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d000      	beq.n	8002278 <xQueueGenericReset+0x50>
 8002276:	2101      	movs	r1, #1
 8002278:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800227a:	2b00      	cmp	r3, #0
 800227c:	d141      	bne.n	8002302 <xQueueGenericReset+0xda>
    {
        taskENTER_CRITICAL();
 800227e:	f001 fe71 	bl	8003f64 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800228a:	6939      	ldr	r1, [r7, #16]
 800228c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800228e:	fb01 f303 	mul.w	r3, r1, r3
 8002292:	441a      	add	r2, r3
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	2200      	movs	r2, #0
 800229c:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ae:	3b01      	subs	r3, #1
 80022b0:	6939      	ldr	r1, [r7, #16]
 80022b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022b4:	fb01 f303 	mul.w	r3, r1, r3
 80022b8:	441a      	add	r2, r3
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	22ff      	movs	r2, #255	; 0xff
 80022c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	22ff      	movs	r2, #255	; 0xff
 80022ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d109      	bne.n	80022e8 <xQueueGenericReset+0xc0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00f      	beq.n	80022fc <xQueueGenericReset+0xd4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	3310      	adds	r3, #16
 80022e0:	4618      	mov	r0, r3
 80022e2:	f000 ff97 	bl	8003214 <xTaskRemoveFromEventList>
 80022e6:	e009      	b.n	80022fc <xQueueGenericReset+0xd4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	3310      	adds	r3, #16
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff ff0b 	bl	8002108 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	3324      	adds	r3, #36	; 0x24
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff ff06 	bl	8002108 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80022fc:	f001 fe62 	bl	8003fc4 <vPortExitCritical>
 8002300:	e001      	b.n	8002306 <xQueueGenericReset+0xde>
    }
    else
    {
        xReturn = pdFAIL;
 8002302:	2300      	movs	r3, #0
 8002304:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d10a      	bne.n	8002322 <xQueueGenericReset+0xfa>
        __asm volatile
 800230c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002310:	f383 8811 	msr	BASEPRI, r3
 8002314:	f3bf 8f6f 	isb	sy
 8002318:	f3bf 8f4f 	dsb	sy
 800231c:	60bb      	str	r3, [r7, #8]
    }
 800231e:	bf00      	nop
 8002320:	e7fe      	b.n	8002320 <xQueueGenericReset+0xf8>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002322:	697b      	ldr	r3, [r7, #20]
}
 8002324:	4618      	mov	r0, r3
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800232c:	b580      	push	{r7, lr}
 800232e:	b08a      	sub	sp, #40	; 0x28
 8002330:	af02      	add	r7, sp, #8
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	4613      	mov	r3, r2
 8002338:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800233a:	2300      	movs	r3, #0
 800233c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d02e      	beq.n	80023a2 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002344:	2100      	movs	r1, #0
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	fba3 2302 	umull	r2, r3, r3, r2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d000      	beq.n	8002354 <xQueueGenericCreate+0x28>
 8002352:	2101      	movs	r1, #1
 8002354:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002356:	2b00      	cmp	r3, #0
 8002358:	d123      	bne.n	80023a2 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002362:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002366:	d81c      	bhi.n	80023a2 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	fb02 f303 	mul.w	r3, r2, r3
 8002370:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	3350      	adds	r3, #80	; 0x50
 8002376:	4618      	mov	r0, r3
 8002378:	f001 ff20 	bl	80041bc <pvPortMalloc>
 800237c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d01c      	beq.n	80023be <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	3350      	adds	r3, #80	; 0x50
 800238c:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800238e:	79fa      	ldrb	r2, [r7, #7]
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	4613      	mov	r3, r2
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	68b9      	ldr	r1, [r7, #8]
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f000 f814 	bl	80023c8 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80023a0:	e00d      	b.n	80023be <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d10a      	bne.n	80023be <xQueueGenericCreate+0x92>
        __asm volatile
 80023a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ac:	f383 8811 	msr	BASEPRI, r3
 80023b0:	f3bf 8f6f 	isb	sy
 80023b4:	f3bf 8f4f 	dsb	sy
 80023b8:	613b      	str	r3, [r7, #16]
    }
 80023ba:	bf00      	nop
 80023bc:	e7fe      	b.n	80023bc <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80023be:	69fb      	ldr	r3, [r7, #28]
    }
 80023c0:	4618      	mov	r0, r3
 80023c2:	3720      	adds	r7, #32
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
 80023d4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d103      	bne.n	80023e4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	e002      	b.n	80023ea <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80023f6:	2101      	movs	r1, #1
 80023f8:	69b8      	ldr	r0, [r7, #24]
 80023fa:	f7ff ff15 	bl	8002228 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	78fa      	ldrb	r2, [r7, #3]
 8002402:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002406:	78fb      	ldrb	r3, [r7, #3]
 8002408:	68ba      	ldr	r2, [r7, #8]
 800240a:	68f9      	ldr	r1, [r7, #12]
 800240c:	2073      	movs	r0, #115	; 0x73
 800240e:	f003 fdfd 	bl	800600c <SEGGER_SYSVIEW_RecordU32x3>
}
 8002412:	bf00      	nop
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
	...

0800241c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800241c:	b590      	push	{r4, r7, lr}
 800241e:	b08f      	sub	sp, #60	; 0x3c
 8002420:	af02      	add	r7, sp, #8
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002428:	2300      	movs	r3, #0
 800242a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10a      	bne.n	800244c <xQueueReceive+0x30>
        __asm volatile
 8002436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800243a:	f383 8811 	msr	BASEPRI, r3
 800243e:	f3bf 8f6f 	isb	sy
 8002442:	f3bf 8f4f 	dsb	sy
 8002446:	623b      	str	r3, [r7, #32]
    }
 8002448:	bf00      	nop
 800244a:	e7fe      	b.n	800244a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d103      	bne.n	800245a <xQueueReceive+0x3e>
 8002452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <xQueueReceive+0x42>
 800245a:	2301      	movs	r3, #1
 800245c:	e000      	b.n	8002460 <xQueueReceive+0x44>
 800245e:	2300      	movs	r3, #0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10a      	bne.n	800247a <xQueueReceive+0x5e>
        __asm volatile
 8002464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002468:	f383 8811 	msr	BASEPRI, r3
 800246c:	f3bf 8f6f 	isb	sy
 8002470:	f3bf 8f4f 	dsb	sy
 8002474:	61fb      	str	r3, [r7, #28]
    }
 8002476:	bf00      	nop
 8002478:	e7fe      	b.n	8002478 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800247a:	f001 f89b 	bl	80035b4 <xTaskGetSchedulerState>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d102      	bne.n	800248a <xQueueReceive+0x6e>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <xQueueReceive+0x72>
 800248a:	2301      	movs	r3, #1
 800248c:	e000      	b.n	8002490 <xQueueReceive+0x74>
 800248e:	2300      	movs	r3, #0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10a      	bne.n	80024aa <xQueueReceive+0x8e>
        __asm volatile
 8002494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002498:	f383 8811 	msr	BASEPRI, r3
 800249c:	f3bf 8f6f 	isb	sy
 80024a0:	f3bf 8f4f 	dsb	sy
 80024a4:	61bb      	str	r3, [r7, #24]
    }
 80024a6:	bf00      	nop
 80024a8:	e7fe      	b.n	80024a8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80024aa:	f001 fd5b 	bl	8003f64 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80024ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d024      	beq.n	8002504 <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80024ba:	68b9      	ldr	r1, [r7, #8]
 80024bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024be:	f000 f8b3 	bl	8002628 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80024c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c4:	4618      	mov	r0, r3
 80024c6:	f004 fb2f 	bl	8006b28 <SEGGER_SYSVIEW_ShrinkId>
 80024ca:	4604      	mov	r4, r0
 80024cc:	2000      	movs	r0, #0
 80024ce:	f004 fb2b 	bl	8006b28 <SEGGER_SYSVIEW_ShrinkId>
 80024d2:	4602      	mov	r2, r0
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2101      	movs	r1, #1
 80024d8:	9100      	str	r1, [sp, #0]
 80024da:	4621      	mov	r1, r4
 80024dc:	205c      	movs	r0, #92	; 0x5c
 80024de:	f003 fe0b 	bl	80060f8 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	1e5a      	subs	r2, r3, #1
 80024e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d004      	beq.n	80024fc <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f4:	3310      	adds	r3, #16
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 fe8c 	bl	8003214 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80024fc:	f001 fd62 	bl	8003fc4 <vPortExitCritical>
                return pdPASS;
 8002500:	2301      	movs	r3, #1
 8002502:	e08a      	b.n	800261a <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d113      	bne.n	8002532 <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800250a:	f001 fd5b 	bl	8003fc4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800250e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002510:	4618      	mov	r0, r3
 8002512:	f004 fb09 	bl	8006b28 <SEGGER_SYSVIEW_ShrinkId>
 8002516:	4604      	mov	r4, r0
 8002518:	2000      	movs	r0, #0
 800251a:	f004 fb05 	bl	8006b28 <SEGGER_SYSVIEW_ShrinkId>
 800251e:	4602      	mov	r2, r0
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2101      	movs	r1, #1
 8002524:	9100      	str	r1, [sp, #0]
 8002526:	4621      	mov	r1, r4
 8002528:	205c      	movs	r0, #92	; 0x5c
 800252a:	f003 fde5 	bl	80060f8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800252e:	2300      	movs	r3, #0
 8002530:	e073      	b.n	800261a <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002534:	2b00      	cmp	r3, #0
 8002536:	d106      	bne.n	8002546 <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002538:	f107 0310 	add.w	r3, r7, #16
 800253c:	4618      	mov	r0, r3
 800253e:	f000 ff41 	bl	80033c4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002542:	2301      	movs	r3, #1
 8002544:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002546:	f001 fd3d 	bl	8003fc4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800254a:	f000 fb73 	bl	8002c34 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800254e:	f001 fd09 	bl	8003f64 <vPortEnterCritical>
 8002552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002554:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002558:	b25b      	sxtb	r3, r3
 800255a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800255e:	d103      	bne.n	8002568 <xQueueReceive+0x14c>
 8002560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002562:	2200      	movs	r2, #0
 8002564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800256a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800256e:	b25b      	sxtb	r3, r3
 8002570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002574:	d103      	bne.n	800257e <xQueueReceive+0x162>
 8002576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002578:	2200      	movs	r2, #0
 800257a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800257e:	f001 fd21 	bl	8003fc4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002582:	1d3a      	adds	r2, r7, #4
 8002584:	f107 0310 	add.w	r3, r7, #16
 8002588:	4611      	mov	r1, r2
 800258a:	4618      	mov	r0, r3
 800258c:	f000 ff30 	bl	80033f0 <xTaskCheckForTimeOut>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d124      	bne.n	80025e0 <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002596:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002598:	f000 f8be 	bl	8002718 <prvIsQueueEmpty>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d018      	beq.n	80025d4 <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80025a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a4:	3324      	adds	r3, #36	; 0x24
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	4611      	mov	r1, r2
 80025aa:	4618      	mov	r0, r3
 80025ac:	f000 fdc6 	bl	800313c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80025b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025b2:	f000 f85f 	bl	8002674 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80025b6:	f000 fb4b 	bl	8002c50 <xTaskResumeAll>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f47f af74 	bne.w	80024aa <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80025c2:	4b18      	ldr	r3, [pc, #96]	; (8002624 <xQueueReceive+0x208>)
 80025c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	f3bf 8f4f 	dsb	sy
 80025ce:	f3bf 8f6f 	isb	sy
 80025d2:	e76a      	b.n	80024aa <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80025d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025d6:	f000 f84d 	bl	8002674 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80025da:	f000 fb39 	bl	8002c50 <xTaskResumeAll>
 80025de:	e764      	b.n	80024aa <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80025e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025e2:	f000 f847 	bl	8002674 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80025e6:	f000 fb33 	bl	8002c50 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80025ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025ec:	f000 f894 	bl	8002718 <prvIsQueueEmpty>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f43f af59 	beq.w	80024aa <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80025f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025fa:	4618      	mov	r0, r3
 80025fc:	f004 fa94 	bl	8006b28 <SEGGER_SYSVIEW_ShrinkId>
 8002600:	4604      	mov	r4, r0
 8002602:	2000      	movs	r0, #0
 8002604:	f004 fa90 	bl	8006b28 <SEGGER_SYSVIEW_ShrinkId>
 8002608:	4602      	mov	r2, r0
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2101      	movs	r1, #1
 800260e:	9100      	str	r1, [sp, #0]
 8002610:	4621      	mov	r1, r4
 8002612:	205c      	movs	r0, #92	; 0x5c
 8002614:	f003 fd70 	bl	80060f8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002618:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800261a:	4618      	mov	r0, r3
 800261c:	3734      	adds	r7, #52	; 0x34
 800261e:	46bd      	mov	sp, r7
 8002620:	bd90      	pop	{r4, r7, pc}
 8002622:	bf00      	nop
 8002624:	e000ed04 	.word	0xe000ed04

08002628 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	2b00      	cmp	r3, #0
 8002638:	d018      	beq.n	800266c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68da      	ldr	r2, [r3, #12]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	441a      	add	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68da      	ldr	r2, [r3, #12]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	429a      	cmp	r2, r3
 8002652:	d303      	bcc.n	800265c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68d9      	ldr	r1, [r3, #12]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	461a      	mov	r2, r3
 8002666:	6838      	ldr	r0, [r7, #0]
 8002668:	f004 fc1c 	bl	8006ea4 <memcpy>
    }
}
 800266c:	bf00      	nop
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800267c:	f001 fc72 	bl	8003f64 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002686:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002688:	e011      	b.n	80026ae <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	2b00      	cmp	r3, #0
 8002690:	d012      	beq.n	80026b8 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	3324      	adds	r3, #36	; 0x24
 8002696:	4618      	mov	r0, r3
 8002698:	f000 fdbc 	bl	8003214 <xTaskRemoveFromEventList>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80026a2:	f000 ff0b 	bl	80034bc <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80026a6:	7bfb      	ldrb	r3, [r7, #15]
 80026a8:	3b01      	subs	r3, #1
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80026ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	dce9      	bgt.n	800268a <prvUnlockQueue+0x16>
 80026b6:	e000      	b.n	80026ba <prvUnlockQueue+0x46>
                        break;
 80026b8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	22ff      	movs	r2, #255	; 0xff
 80026be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80026c2:	f001 fc7f 	bl	8003fc4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80026c6:	f001 fc4d 	bl	8003f64 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026d0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80026d2:	e011      	b.n	80026f8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d012      	beq.n	8002702 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3310      	adds	r3, #16
 80026e0:	4618      	mov	r0, r3
 80026e2:	f000 fd97 	bl	8003214 <xTaskRemoveFromEventList>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80026ec:	f000 fee6 	bl	80034bc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80026f0:	7bbb      	ldrb	r3, [r7, #14]
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80026f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	dce9      	bgt.n	80026d4 <prvUnlockQueue+0x60>
 8002700:	e000      	b.n	8002704 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002702:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	22ff      	movs	r2, #255	; 0xff
 8002708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800270c:	f001 fc5a 	bl	8003fc4 <vPortExitCritical>
}
 8002710:	bf00      	nop
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002720:	f001 fc20 	bl	8003f64 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002728:	2b00      	cmp	r3, #0
 800272a:	d102      	bne.n	8002732 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800272c:	2301      	movs	r3, #1
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	e001      	b.n	8002736 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002732:	2300      	movs	r3, #0
 8002734:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002736:	f001 fc45 	bl	8003fc4 <vPortExitCritical>

    return xReturn;
 800273a:	68fb      	ldr	r3, [r7, #12]
}
 800273c:	4618      	mov	r0, r3
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10a      	bne.n	800276a <vQueueAddToRegistry+0x26>
        __asm volatile
 8002754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002758:	f383 8811 	msr	BASEPRI, r3
 800275c:	f3bf 8f6f 	isb	sy
 8002760:	f3bf 8f4f 	dsb	sy
 8002764:	60fb      	str	r3, [r7, #12]
    }
 8002766:	bf00      	nop
 8002768:	e7fe      	b.n	8002768 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800276a:	2300      	movs	r3, #0
 800276c:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d024      	beq.n	80027be <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002774:	2300      	movs	r3, #0
 8002776:	617b      	str	r3, [r7, #20]
 8002778:	e01e      	b.n	80027b8 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800277a:	4a1c      	ldr	r2, [pc, #112]	; (80027ec <vQueueAddToRegistry+0xa8>)
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	4413      	add	r3, r2
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	429a      	cmp	r2, r3
 8002788:	d105      	bne.n	8002796 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	4a17      	ldr	r2, [pc, #92]	; (80027ec <vQueueAddToRegistry+0xa8>)
 8002790:	4413      	add	r3, r2
 8002792:	613b      	str	r3, [r7, #16]
                    break;
 8002794:	e013      	b.n	80027be <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10a      	bne.n	80027b2 <vQueueAddToRegistry+0x6e>
 800279c:	4a13      	ldr	r2, [pc, #76]	; (80027ec <vQueueAddToRegistry+0xa8>)
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d104      	bne.n	80027b2 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	4a0f      	ldr	r2, [pc, #60]	; (80027ec <vQueueAddToRegistry+0xa8>)
 80027ae:	4413      	add	r3, r2
 80027b0:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	3301      	adds	r3, #1
 80027b6:	617b      	str	r3, [r7, #20]
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	2b07      	cmp	r3, #7
 80027bc:	d9dd      	bls.n	800277a <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00f      	beq.n	80027e4 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f004 f9a8 	bl	8006b28 <SEGGER_SYSVIEW_ShrinkId>
 80027d8:	4601      	mov	r1, r0
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	461a      	mov	r2, r3
 80027de:	2071      	movs	r0, #113	; 0x71
 80027e0:	f003 fbba 	bl	8005f58 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 80027e4:	bf00      	nop
 80027e6:	3718      	adds	r7, #24
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	200000e8 	.word	0x200000e8

080027f0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002800:	f001 fbb0 	bl	8003f64 <vPortEnterCritical>
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800280a:	b25b      	sxtb	r3, r3
 800280c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002810:	d103      	bne.n	800281a <vQueueWaitForMessageRestricted+0x2a>
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002820:	b25b      	sxtb	r3, r3
 8002822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002826:	d103      	bne.n	8002830 <vQueueWaitForMessageRestricted+0x40>
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002830:	f001 fbc8 	bl	8003fc4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002838:	2b00      	cmp	r3, #0
 800283a:	d106      	bne.n	800284a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	3324      	adds	r3, #36	; 0x24
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	68b9      	ldr	r1, [r7, #8]
 8002844:	4618      	mov	r0, r3
 8002846:	f000 fc9d 	bl	8003184 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800284a:	6978      	ldr	r0, [r7, #20]
 800284c:	f7ff ff12 	bl	8002674 <prvUnlockQueue>
    }
 8002850:	bf00      	nop
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002858:	b580      	push	{r7, lr}
 800285a:	b08c      	sub	sp, #48	; 0x30
 800285c:	af04      	add	r7, sp, #16
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	603b      	str	r3, [r7, #0]
 8002864:	4613      	mov	r3, r2
 8002866:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002868:	88fb      	ldrh	r3, [r7, #6]
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4618      	mov	r0, r3
 800286e:	f001 fca5 	bl	80041bc <pvPortMalloc>
 8002872:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00e      	beq.n	8002898 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800287a:	2058      	movs	r0, #88	; 0x58
 800287c:	f001 fc9e 	bl	80041bc <pvPortMalloc>
 8002880:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d003      	beq.n	8002890 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	631a      	str	r2, [r3, #48]	; 0x30
 800288e:	e005      	b.n	800289c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8002890:	6978      	ldr	r0, [r7, #20]
 8002892:	f001 fd73 	bl	800437c <vPortFree>
 8002896:	e001      	b.n	800289c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002898:	2300      	movs	r3, #0
 800289a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d013      	beq.n	80028ca <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80028a2:	88fa      	ldrh	r2, [r7, #6]
 80028a4:	2300      	movs	r3, #0
 80028a6:	9303      	str	r3, [sp, #12]
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	9302      	str	r3, [sp, #8]
 80028ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ae:	9301      	str	r3, [sp, #4]
 80028b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b2:	9300      	str	r3, [sp, #0]
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	68b9      	ldr	r1, [r7, #8]
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 f80e 	bl	80028da <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80028be:	69f8      	ldr	r0, [r7, #28]
 80028c0:	f000 f8b0 	bl	8002a24 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80028c4:	2301      	movs	r3, #1
 80028c6:	61bb      	str	r3, [r7, #24]
 80028c8:	e002      	b.n	80028d0 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80028ca:	f04f 33ff 	mov.w	r3, #4294967295
 80028ce:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80028d0:	69bb      	ldr	r3, [r7, #24]
    }
 80028d2:	4618      	mov	r0, r3
 80028d4:	3720      	adds	r7, #32
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b088      	sub	sp, #32
 80028de:	af00      	add	r7, sp, #0
 80028e0:	60f8      	str	r0, [r7, #12]
 80028e2:	60b9      	str	r1, [r7, #8]
 80028e4:	607a      	str	r2, [r7, #4]
 80028e6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80028e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ea:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	461a      	mov	r2, r3
 80028f2:	21a5      	movs	r1, #165	; 0xa5
 80028f4:	f004 fae4 	bl	8006ec0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80028f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002902:	3b01      	subs	r3, #1
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	f023 0307 	bic.w	r3, r3, #7
 8002910:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	f003 0307 	and.w	r3, r3, #7
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00a      	beq.n	8002932 <prvInitialiseNewTask+0x58>
        __asm volatile
 800291c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002920:	f383 8811 	msr	BASEPRI, r3
 8002924:	f3bf 8f6f 	isb	sy
 8002928:	f3bf 8f4f 	dsb	sy
 800292c:	617b      	str	r3, [r7, #20]
    }
 800292e:	bf00      	nop
 8002930:	e7fe      	b.n	8002930 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d01f      	beq.n	8002978 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002938:	2300      	movs	r3, #0
 800293a:	61fb      	str	r3, [r7, #28]
 800293c:	e012      	b.n	8002964 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	4413      	add	r3, r2
 8002944:	7819      	ldrb	r1, [r3, #0]
 8002946:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	4413      	add	r3, r2
 800294c:	3334      	adds	r3, #52	; 0x34
 800294e:	460a      	mov	r2, r1
 8002950:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	4413      	add	r3, r2
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d006      	beq.n	800296c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	3301      	adds	r3, #1
 8002962:	61fb      	str	r3, [r7, #28]
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	2b09      	cmp	r3, #9
 8002968:	d9e9      	bls.n	800293e <prvInitialiseNewTask+0x64>
 800296a:	e000      	b.n	800296e <prvInitialiseNewTask+0x94>
            {
                break;
 800296c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800296e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002970:	2200      	movs	r2, #0
 8002972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002976:	e003      	b.n	8002980 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297a:	2200      	movs	r2, #0
 800297c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002982:	2b04      	cmp	r3, #4
 8002984:	d90a      	bls.n	800299c <prvInitialiseNewTask+0xc2>
        __asm volatile
 8002986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800298a:	f383 8811 	msr	BASEPRI, r3
 800298e:	f3bf 8f6f 	isb	sy
 8002992:	f3bf 8f4f 	dsb	sy
 8002996:	613b      	str	r3, [r7, #16]
    }
 8002998:	bf00      	nop
 800299a:	e7fe      	b.n	800299a <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800299c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d901      	bls.n	80029a6 <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80029a2:	2304      	movs	r3, #4
 80029a4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80029a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029aa:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80029ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029b0:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80029b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b4:	2200      	movs	r2, #0
 80029b6:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80029b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ba:	3304      	adds	r3, #4
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff fbc3 	bl	8002148 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80029c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c4:	3318      	adds	r3, #24
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff fbbe 	bl	8002148 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80029cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029d0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d4:	f1c3 0205 	rsb	r2, r3, #5
 80029d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029da:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80029dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029e0:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80029e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e4:	3350      	adds	r3, #80	; 0x50
 80029e6:	2204      	movs	r2, #4
 80029e8:	2100      	movs	r1, #0
 80029ea:	4618      	mov	r0, r3
 80029ec:	f004 fa68 	bl	8006ec0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80029f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f2:	3354      	adds	r3, #84	; 0x54
 80029f4:	2201      	movs	r2, #1
 80029f6:	2100      	movs	r1, #0
 80029f8:	4618      	mov	r0, r3
 80029fa:	f004 fa61 	bl	8006ec0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	68f9      	ldr	r1, [r7, #12]
 8002a02:	69b8      	ldr	r0, [r7, #24]
 8002a04:	f001 f904 	bl	8003c10 <pxPortInitialiseStack>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a0c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d002      	beq.n	8002a1a <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a18:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002a1a:	bf00      	nop
 8002a1c:	3720      	adds	r7, #32
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
	...

08002a24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002a24:	b5b0      	push	{r4, r5, r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af02      	add	r7, sp, #8
 8002a2a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002a2c:	f001 fa9a 	bl	8003f64 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002a30:	4b49      	ldr	r3, [pc, #292]	; (8002b58 <prvAddNewTaskToReadyList+0x134>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	3301      	adds	r3, #1
 8002a36:	4a48      	ldr	r2, [pc, #288]	; (8002b58 <prvAddNewTaskToReadyList+0x134>)
 8002a38:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002a3a:	4b48      	ldr	r3, [pc, #288]	; (8002b5c <prvAddNewTaskToReadyList+0x138>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d109      	bne.n	8002a56 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002a42:	4a46      	ldr	r2, [pc, #280]	; (8002b5c <prvAddNewTaskToReadyList+0x138>)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002a48:	4b43      	ldr	r3, [pc, #268]	; (8002b58 <prvAddNewTaskToReadyList+0x134>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d110      	bne.n	8002a72 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002a50:	f000 fd52 	bl	80034f8 <prvInitialiseTaskLists>
 8002a54:	e00d      	b.n	8002a72 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002a56:	4b42      	ldr	r3, [pc, #264]	; (8002b60 <prvAddNewTaskToReadyList+0x13c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d109      	bne.n	8002a72 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002a5e:	4b3f      	ldr	r3, [pc, #252]	; (8002b5c <prvAddNewTaskToReadyList+0x138>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d802      	bhi.n	8002a72 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002a6c:	4a3b      	ldr	r2, [pc, #236]	; (8002b5c <prvAddNewTaskToReadyList+0x138>)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002a72:	4b3c      	ldr	r3, [pc, #240]	; (8002b64 <prvAddNewTaskToReadyList+0x140>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	3301      	adds	r3, #1
 8002a78:	4a3a      	ldr	r2, [pc, #232]	; (8002b64 <prvAddNewTaskToReadyList+0x140>)
 8002a7a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002a7c:	4b39      	ldr	r3, [pc, #228]	; (8002b64 <prvAddNewTaskToReadyList+0x140>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d016      	beq.n	8002ab8 <prvAddNewTaskToReadyList+0x94>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f003 ff25 	bl	80068dc <SEGGER_SYSVIEW_OnTaskCreate>
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa2:	461d      	mov	r5, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	461c      	mov	r4, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	1ae3      	subs	r3, r4, r3
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	462b      	mov	r3, r5
 8002ab4:	f001 fe30 	bl	8004718 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f003 ff92 	bl	80069e4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	409a      	lsls	r2, r3
 8002ac8:	4b27      	ldr	r3, [pc, #156]	; (8002b68 <prvAddNewTaskToReadyList+0x144>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	4a26      	ldr	r2, [pc, #152]	; (8002b68 <prvAddNewTaskToReadyList+0x144>)
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ad6:	4925      	ldr	r1, [pc, #148]	; (8002b6c <prvAddNewTaskToReadyList+0x148>)
 8002ad8:	4613      	mov	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	3304      	adds	r3, #4
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	609a      	str	r2, [r3, #8]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	689a      	ldr	r2, [r3, #8]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	60da      	str	r2, [r3, #12]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	3204      	adds	r2, #4
 8002afe:	605a      	str	r2, [r3, #4]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	1d1a      	adds	r2, r3, #4
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	4413      	add	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4a15      	ldr	r2, [pc, #84]	; (8002b6c <prvAddNewTaskToReadyList+0x148>)
 8002b16:	441a      	add	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	615a      	str	r2, [r3, #20]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b20:	4912      	ldr	r1, [pc, #72]	; (8002b6c <prvAddNewTaskToReadyList+0x148>)
 8002b22:	4613      	mov	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	440b      	add	r3, r1
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	1c59      	adds	r1, r3, #1
 8002b30:	480e      	ldr	r0, [pc, #56]	; (8002b6c <prvAddNewTaskToReadyList+0x148>)
 8002b32:	4613      	mov	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4413      	add	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4403      	add	r3, r0
 8002b3c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002b3e:	f001 fa41 	bl	8003fc4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002b42:	4b07      	ldr	r3, [pc, #28]	; (8002b60 <prvAddNewTaskToReadyList+0x13c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <prvAddNewTaskToReadyList+0x12a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002b4a:	4b04      	ldr	r3, [pc, #16]	; (8002b5c <prvAddNewTaskToReadyList+0x138>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b4e:	bf00      	nop
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bdb0      	pop	{r4, r5, r7, pc}
 8002b56:	bf00      	nop
 8002b58:	200001e8 	.word	0x200001e8
 8002b5c:	20000128 	.word	0x20000128
 8002b60:	200001f4 	.word	0x200001f4
 8002b64:	20000204 	.word	0x20000204
 8002b68:	200001f0 	.word	0x200001f0
 8002b6c:	2000012c 	.word	0x2000012c

08002b70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002b76:	4b27      	ldr	r3, [pc, #156]	; (8002c14 <vTaskStartScheduler+0xa4>)
 8002b78:	9301      	str	r3, [sp, #4]
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	2300      	movs	r3, #0
 8002b80:	2282      	movs	r2, #130	; 0x82
 8002b82:	4925      	ldr	r1, [pc, #148]	; (8002c18 <vTaskStartScheduler+0xa8>)
 8002b84:	4825      	ldr	r0, [pc, #148]	; (8002c1c <vTaskStartScheduler+0xac>)
 8002b86:	f7ff fe67 	bl	8002858 <xTaskCreate>
 8002b8a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d102      	bne.n	8002b98 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002b92:	f000 fdb9 	bl	8003708 <xTimerCreateTimerTask>
 8002b96:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d124      	bne.n	8002be8 <vTaskStartScheduler+0x78>
        __asm volatile
 8002b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba2:	f383 8811 	msr	BASEPRI, r3
 8002ba6:	f3bf 8f6f 	isb	sy
 8002baa:	f3bf 8f4f 	dsb	sy
 8002bae:	60bb      	str	r3, [r7, #8]
    }
 8002bb0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002bb2:	4b1b      	ldr	r3, [pc, #108]	; (8002c20 <vTaskStartScheduler+0xb0>)
 8002bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002bba:	4b1a      	ldr	r3, [pc, #104]	; (8002c24 <vTaskStartScheduler+0xb4>)
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002bc0:	4b19      	ldr	r3, [pc, #100]	; (8002c28 <vTaskStartScheduler+0xb8>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002bc6:	4b19      	ldr	r3, [pc, #100]	; (8002c2c <vTaskStartScheduler+0xbc>)
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	4b12      	ldr	r3, [pc, #72]	; (8002c14 <vTaskStartScheduler+0xa4>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d102      	bne.n	8002bd8 <vTaskStartScheduler+0x68>
 8002bd2:	f003 fe67 	bl	80068a4 <SEGGER_SYSVIEW_OnIdle>
 8002bd6:	e004      	b.n	8002be2 <vTaskStartScheduler+0x72>
 8002bd8:	4b14      	ldr	r3, [pc, #80]	; (8002c2c <vTaskStartScheduler+0xbc>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f003 febf 	bl	8006960 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002be2:	f001 f89f 	bl	8003d24 <xPortStartScheduler>
 8002be6:	e00e      	b.n	8002c06 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bee:	d10a      	bne.n	8002c06 <vTaskStartScheduler+0x96>
        __asm volatile
 8002bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf4:	f383 8811 	msr	BASEPRI, r3
 8002bf8:	f3bf 8f6f 	isb	sy
 8002bfc:	f3bf 8f4f 	dsb	sy
 8002c00:	607b      	str	r3, [r7, #4]
    }
 8002c02:	bf00      	nop
 8002c04:	e7fe      	b.n	8002c04 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002c06:	4b0a      	ldr	r3, [pc, #40]	; (8002c30 <vTaskStartScheduler+0xc0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
}
 8002c0a:	bf00      	nop
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	2000020c 	.word	0x2000020c
 8002c18:	08007830 	.word	0x08007830
 8002c1c:	080034d5 	.word	0x080034d5
 8002c20:	20000208 	.word	0x20000208
 8002c24:	200001f4 	.word	0x200001f4
 8002c28:	200001ec 	.word	0x200001ec
 8002c2c:	20000128 	.word	0x20000128
 8002c30:	2000000c 	.word	0x2000000c

08002c34 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002c38:	4b04      	ldr	r3, [pc, #16]	; (8002c4c <vTaskSuspendAll+0x18>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	4a03      	ldr	r2, [pc, #12]	; (8002c4c <vTaskSuspendAll+0x18>)
 8002c40:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002c42:	bf00      	nop
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	20000210 	.word	0x20000210

08002c50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b088      	sub	sp, #32
 8002c54:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002c56:	2300      	movs	r3, #0
 8002c58:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002c5e:	4b6d      	ldr	r3, [pc, #436]	; (8002e14 <xTaskResumeAll+0x1c4>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10a      	bne.n	8002c7c <xTaskResumeAll+0x2c>
        __asm volatile
 8002c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c6a:	f383 8811 	msr	BASEPRI, r3
 8002c6e:	f3bf 8f6f 	isb	sy
 8002c72:	f3bf 8f4f 	dsb	sy
 8002c76:	607b      	str	r3, [r7, #4]
    }
 8002c78:	bf00      	nop
 8002c7a:	e7fe      	b.n	8002c7a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002c7c:	f001 f972 	bl	8003f64 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002c80:	4b64      	ldr	r3, [pc, #400]	; (8002e14 <xTaskResumeAll+0x1c4>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	3b01      	subs	r3, #1
 8002c86:	4a63      	ldr	r2, [pc, #396]	; (8002e14 <xTaskResumeAll+0x1c4>)
 8002c88:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c8a:	4b62      	ldr	r3, [pc, #392]	; (8002e14 <xTaskResumeAll+0x1c4>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f040 80b8 	bne.w	8002e04 <xTaskResumeAll+0x1b4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002c94:	4b60      	ldr	r3, [pc, #384]	; (8002e18 <xTaskResumeAll+0x1c8>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 80b3 	beq.w	8002e04 <xTaskResumeAll+0x1b4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c9e:	e08e      	b.n	8002dbe <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ca0:	4b5e      	ldr	r3, [pc, #376]	; (8002e1c <xTaskResumeAll+0x1cc>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cac:	613b      	str	r3, [r7, #16]
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	69fa      	ldr	r2, [r7, #28]
 8002cb4:	6a12      	ldr	r2, [r2, #32]
 8002cb6:	609a      	str	r2, [r3, #8]
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	69fa      	ldr	r2, [r7, #28]
 8002cbe:	69d2      	ldr	r2, [r2, #28]
 8002cc0:	605a      	str	r2, [r3, #4]
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	3318      	adds	r3, #24
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d103      	bne.n	8002cd6 <xTaskResumeAll+0x86>
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	6a1a      	ldr	r2, [r3, #32]
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	605a      	str	r2, [r3, #4]
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	629a      	str	r2, [r3, #40]	; 0x28
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	1e5a      	subs	r2, r3, #1
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	69fa      	ldr	r2, [r7, #28]
 8002cf2:	68d2      	ldr	r2, [r2, #12]
 8002cf4:	609a      	str	r2, [r3, #8]
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	69fa      	ldr	r2, [r7, #28]
 8002cfc:	6892      	ldr	r2, [r2, #8]
 8002cfe:	605a      	str	r2, [r3, #4]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	3304      	adds	r3, #4
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d103      	bne.n	8002d14 <xTaskResumeAll+0xc4>
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	68da      	ldr	r2, [r3, #12]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	605a      	str	r2, [r3, #4]
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	2200      	movs	r2, #0
 8002d18:	615a      	str	r2, [r3, #20]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	1e5a      	subs	r2, r3, #1
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f003 fe5c 	bl	80069e4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d30:	2201      	movs	r2, #1
 8002d32:	409a      	lsls	r2, r3
 8002d34:	4b3a      	ldr	r3, [pc, #232]	; (8002e20 <xTaskResumeAll+0x1d0>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	4a39      	ldr	r2, [pc, #228]	; (8002e20 <xTaskResumeAll+0x1d0>)
 8002d3c:	6013      	str	r3, [r2, #0]
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d42:	4938      	ldr	r1, [pc, #224]	; (8002e24 <xTaskResumeAll+0x1d4>)
 8002d44:	4613      	mov	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	3304      	adds	r3, #4
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	60bb      	str	r3, [r7, #8]
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	609a      	str	r2, [r3, #8]
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	689a      	ldr	r2, [r3, #8]
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	60da      	str	r2, [r3, #12]
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	69fa      	ldr	r2, [r7, #28]
 8002d68:	3204      	adds	r2, #4
 8002d6a:	605a      	str	r2, [r3, #4]
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	1d1a      	adds	r2, r3, #4
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d78:	4613      	mov	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4a28      	ldr	r2, [pc, #160]	; (8002e24 <xTaskResumeAll+0x1d4>)
 8002d82:	441a      	add	r2, r3
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	615a      	str	r2, [r3, #20]
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d8c:	4925      	ldr	r1, [pc, #148]	; (8002e24 <xTaskResumeAll+0x1d4>)
 8002d8e:	4613      	mov	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	440b      	add	r3, r1
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	1c59      	adds	r1, r3, #1
 8002d9c:	4821      	ldr	r0, [pc, #132]	; (8002e24 <xTaskResumeAll+0x1d4>)
 8002d9e:	4613      	mov	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4403      	add	r3, r0
 8002da8:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dae:	4b1e      	ldr	r3, [pc, #120]	; (8002e28 <xTaskResumeAll+0x1d8>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d302      	bcc.n	8002dbe <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8002db8:	4b1c      	ldr	r3, [pc, #112]	; (8002e2c <xTaskResumeAll+0x1dc>)
 8002dba:	2201      	movs	r2, #1
 8002dbc:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002dbe:	4b17      	ldr	r3, [pc, #92]	; (8002e1c <xTaskResumeAll+0x1cc>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f47f af6c 	bne.w	8002ca0 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002dce:	f000 fbd5 	bl	800357c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002dd2:	4b17      	ldr	r3, [pc, #92]	; (8002e30 <xTaskResumeAll+0x1e0>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d010      	beq.n	8002e00 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002dde:	f000 f84b 	bl	8002e78 <xTaskIncrementTick>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d002      	beq.n	8002dee <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002de8:	4b10      	ldr	r3, [pc, #64]	; (8002e2c <xTaskResumeAll+0x1dc>)
 8002dea:	2201      	movs	r2, #1
 8002dec:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	3b01      	subs	r3, #1
 8002df2:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1f1      	bne.n	8002dde <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8002dfa:	4b0d      	ldr	r3, [pc, #52]	; (8002e30 <xTaskResumeAll+0x1e0>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002e00:	4b0a      	ldr	r3, [pc, #40]	; (8002e2c <xTaskResumeAll+0x1dc>)
 8002e02:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002e04:	f001 f8de 	bl	8003fc4 <vPortExitCritical>

    return xAlreadyYielded;
 8002e08:	697b      	ldr	r3, [r7, #20]
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3720      	adds	r7, #32
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	20000210 	.word	0x20000210
 8002e18:	200001e8 	.word	0x200001e8
 8002e1c:	200001c0 	.word	0x200001c0
 8002e20:	200001f0 	.word	0x200001f0
 8002e24:	2000012c 	.word	0x2000012c
 8002e28:	20000128 	.word	0x20000128
 8002e2c:	200001fc 	.word	0x200001fc
 8002e30:	200001f8 	.word	0x200001f8

08002e34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002e3a:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <xTaskGetTickCount+0x1c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002e40:	687b      	ldr	r3, [r7, #4]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	200001ec 	.word	0x200001ec

08002e54 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e5a:	f001 f96f 	bl	800413c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002e5e:	2300      	movs	r3, #0
 8002e60:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002e62:	4b04      	ldr	r3, [pc, #16]	; (8002e74 <xTaskGetTickCountFromISR+0x20>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002e68:	683b      	ldr	r3, [r7, #0]
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	200001ec 	.word	0x200001ec

08002e78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b08a      	sub	sp, #40	; 0x28
 8002e7c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e82:	4b70      	ldr	r3, [pc, #448]	; (8003044 <xTaskIncrementTick+0x1cc>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f040 80d1 	bne.w	800302e <xTaskIncrementTick+0x1b6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002e8c:	4b6e      	ldr	r3, [pc, #440]	; (8003048 <xTaskIncrementTick+0x1d0>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	3301      	adds	r3, #1
 8002e92:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002e94:	4a6c      	ldr	r2, [pc, #432]	; (8003048 <xTaskIncrementTick+0x1d0>)
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d120      	bne.n	8002ee2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002ea0:	4b6a      	ldr	r3, [pc, #424]	; (800304c <xTaskIncrementTick+0x1d4>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00a      	beq.n	8002ec0 <xTaskIncrementTick+0x48>
        __asm volatile
 8002eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eae:	f383 8811 	msr	BASEPRI, r3
 8002eb2:	f3bf 8f6f 	isb	sy
 8002eb6:	f3bf 8f4f 	dsb	sy
 8002eba:	607b      	str	r3, [r7, #4]
    }
 8002ebc:	bf00      	nop
 8002ebe:	e7fe      	b.n	8002ebe <xTaskIncrementTick+0x46>
 8002ec0:	4b62      	ldr	r3, [pc, #392]	; (800304c <xTaskIncrementTick+0x1d4>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	61fb      	str	r3, [r7, #28]
 8002ec6:	4b62      	ldr	r3, [pc, #392]	; (8003050 <xTaskIncrementTick+0x1d8>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a60      	ldr	r2, [pc, #384]	; (800304c <xTaskIncrementTick+0x1d4>)
 8002ecc:	6013      	str	r3, [r2, #0]
 8002ece:	4a60      	ldr	r2, [pc, #384]	; (8003050 <xTaskIncrementTick+0x1d8>)
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	6013      	str	r3, [r2, #0]
 8002ed4:	4b5f      	ldr	r3, [pc, #380]	; (8003054 <xTaskIncrementTick+0x1dc>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	4a5e      	ldr	r2, [pc, #376]	; (8003054 <xTaskIncrementTick+0x1dc>)
 8002edc:	6013      	str	r3, [r2, #0]
 8002ede:	f000 fb4d 	bl	800357c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002ee2:	4b5d      	ldr	r3, [pc, #372]	; (8003058 <xTaskIncrementTick+0x1e0>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6a3a      	ldr	r2, [r7, #32]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	f0c0 80a5 	bcc.w	8003038 <xTaskIncrementTick+0x1c0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002eee:	4b57      	ldr	r3, [pc, #348]	; (800304c <xTaskIncrementTick+0x1d4>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d104      	bne.n	8002f02 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ef8:	4b57      	ldr	r3, [pc, #348]	; (8003058 <xTaskIncrementTick+0x1e0>)
 8002efa:	f04f 32ff 	mov.w	r2, #4294967295
 8002efe:	601a      	str	r2, [r3, #0]
                    break;
 8002f00:	e09a      	b.n	8003038 <xTaskIncrementTick+0x1c0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f02:	4b52      	ldr	r3, [pc, #328]	; (800304c <xTaskIncrementTick+0x1d4>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002f12:	6a3a      	ldr	r2, [r7, #32]
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d203      	bcs.n	8002f22 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002f1a:	4a4f      	ldr	r2, [pc, #316]	; (8003058 <xTaskIncrementTick+0x1e0>)
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002f20:	e08a      	b.n	8003038 <xTaskIncrementTick+0x1c0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	613b      	str	r3, [r7, #16]
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	68d2      	ldr	r2, [r2, #12]
 8002f30:	609a      	str	r2, [r3, #8]
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	6892      	ldr	r2, [r2, #8]
 8002f3a:	605a      	str	r2, [r3, #4]
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	3304      	adds	r3, #4
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d103      	bne.n	8002f50 <xTaskIncrementTick+0xd8>
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	68da      	ldr	r2, [r3, #12]
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	605a      	str	r2, [r3, #4]
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	2200      	movs	r2, #0
 8002f54:	615a      	str	r2, [r3, #20]
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	1e5a      	subs	r2, r3, #1
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d01e      	beq.n	8002fa6 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6c:	60fb      	str	r3, [r7, #12]
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	6a12      	ldr	r2, [r2, #32]
 8002f76:	609a      	str	r2, [r3, #8]
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	69d2      	ldr	r2, [r2, #28]
 8002f80:	605a      	str	r2, [r3, #4]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	3318      	adds	r3, #24
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d103      	bne.n	8002f96 <xTaskIncrementTick+0x11e>
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	6a1a      	ldr	r2, [r3, #32]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	629a      	str	r2, [r3, #40]	; 0x28
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	1e5a      	subs	r2, r3, #1
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f003 fd1b 	bl	80069e4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	409a      	lsls	r2, r3
 8002fb6:	4b29      	ldr	r3, [pc, #164]	; (800305c <xTaskIncrementTick+0x1e4>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	4a27      	ldr	r2, [pc, #156]	; (800305c <xTaskIncrementTick+0x1e4>)
 8002fbe:	6013      	str	r3, [r2, #0]
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc4:	4926      	ldr	r1, [pc, #152]	; (8003060 <xTaskIncrementTick+0x1e8>)
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4413      	add	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	440b      	add	r3, r1
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	68ba      	ldr	r2, [r7, #8]
 8002fda:	609a      	str	r2, [r3, #8]
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	60da      	str	r2, [r3, #12]
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	3204      	adds	r2, #4
 8002fec:	605a      	str	r2, [r3, #4]
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	1d1a      	adds	r2, r3, #4
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	609a      	str	r2, [r3, #8]
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4a17      	ldr	r2, [pc, #92]	; (8003060 <xTaskIncrementTick+0x1e8>)
 8003004:	441a      	add	r2, r3
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	615a      	str	r2, [r3, #20]
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800300e:	4914      	ldr	r1, [pc, #80]	; (8003060 <xTaskIncrementTick+0x1e8>)
 8003010:	4613      	mov	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	1c59      	adds	r1, r3, #1
 800301e:	4810      	ldr	r0, [pc, #64]	; (8003060 <xTaskIncrementTick+0x1e8>)
 8003020:	4613      	mov	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4413      	add	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4403      	add	r3, r0
 800302a:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800302c:	e75f      	b.n	8002eee <xTaskIncrementTick+0x76>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800302e:	4b0d      	ldr	r3, [pc, #52]	; (8003064 <xTaskIncrementTick+0x1ec>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	3301      	adds	r3, #1
 8003034:	4a0b      	ldr	r2, [pc, #44]	; (8003064 <xTaskIncrementTick+0x1ec>)
 8003036:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800303a:	4618      	mov	r0, r3
 800303c:	3728      	adds	r7, #40	; 0x28
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	20000210 	.word	0x20000210
 8003048:	200001ec 	.word	0x200001ec
 800304c:	200001b8 	.word	0x200001b8
 8003050:	200001bc 	.word	0x200001bc
 8003054:	20000200 	.word	0x20000200
 8003058:	20000208 	.word	0x20000208
 800305c:	200001f0 	.word	0x200001f0
 8003060:	2000012c 	.word	0x2000012c
 8003064:	200001f8 	.word	0x200001f8

08003068 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800306e:	4b2d      	ldr	r3, [pc, #180]	; (8003124 <vTaskSwitchContext+0xbc>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003076:	4b2c      	ldr	r3, [pc, #176]	; (8003128 <vTaskSwitchContext+0xc0>)
 8003078:	2201      	movs	r2, #1
 800307a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800307c:	e04d      	b.n	800311a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800307e:	4b2a      	ldr	r3, [pc, #168]	; (8003128 <vTaskSwitchContext+0xc0>)
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003084:	4b29      	ldr	r3, [pc, #164]	; (800312c <vTaskSwitchContext+0xc4>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	fab3 f383 	clz	r3, r3
 8003090:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003092:	7afb      	ldrb	r3, [r7, #11]
 8003094:	f1c3 031f 	rsb	r3, r3, #31
 8003098:	617b      	str	r3, [r7, #20]
 800309a:	4925      	ldr	r1, [pc, #148]	; (8003130 <vTaskSwitchContext+0xc8>)
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	4613      	mov	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4413      	add	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	440b      	add	r3, r1
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10a      	bne.n	80030c4 <vTaskSwitchContext+0x5c>
        __asm volatile
 80030ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b2:	f383 8811 	msr	BASEPRI, r3
 80030b6:	f3bf 8f6f 	isb	sy
 80030ba:	f3bf 8f4f 	dsb	sy
 80030be:	607b      	str	r3, [r7, #4]
    }
 80030c0:	bf00      	nop
 80030c2:	e7fe      	b.n	80030c2 <vTaskSwitchContext+0x5a>
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	4613      	mov	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4413      	add	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4a18      	ldr	r2, [pc, #96]	; (8003130 <vTaskSwitchContext+0xc8>)
 80030d0:	4413      	add	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	605a      	str	r2, [r3, #4]
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	3308      	adds	r3, #8
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d104      	bne.n	80030f4 <vTaskSwitchContext+0x8c>
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	605a      	str	r2, [r3, #4]
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	4a0e      	ldr	r2, [pc, #56]	; (8003134 <vTaskSwitchContext+0xcc>)
 80030fc:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80030fe:	4b0d      	ldr	r3, [pc, #52]	; (8003134 <vTaskSwitchContext+0xcc>)
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	4b0d      	ldr	r3, [pc, #52]	; (8003138 <vTaskSwitchContext+0xd0>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	429a      	cmp	r2, r3
 8003108:	d102      	bne.n	8003110 <vTaskSwitchContext+0xa8>
 800310a:	f003 fbcb 	bl	80068a4 <SEGGER_SYSVIEW_OnIdle>
}
 800310e:	e004      	b.n	800311a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003110:	4b08      	ldr	r3, [pc, #32]	; (8003134 <vTaskSwitchContext+0xcc>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4618      	mov	r0, r3
 8003116:	f003 fc23 	bl	8006960 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800311a:	bf00      	nop
 800311c:	3718      	adds	r7, #24
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	20000210 	.word	0x20000210
 8003128:	200001fc 	.word	0x200001fc
 800312c:	200001f0 	.word	0x200001f0
 8003130:	2000012c 	.word	0x2000012c
 8003134:	20000128 	.word	0x20000128
 8003138:	2000020c 	.word	0x2000020c

0800313c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10a      	bne.n	8003162 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800314c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003150:	f383 8811 	msr	BASEPRI, r3
 8003154:	f3bf 8f6f 	isb	sy
 8003158:	f3bf 8f4f 	dsb	sy
 800315c:	60fb      	str	r3, [r7, #12]
    }
 800315e:	bf00      	nop
 8003160:	e7fe      	b.n	8003160 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003162:	4b07      	ldr	r3, [pc, #28]	; (8003180 <vTaskPlaceOnEventList+0x44>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	3318      	adds	r3, #24
 8003168:	4619      	mov	r1, r3
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f7fe fff9 	bl	8002162 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003170:	2101      	movs	r1, #1
 8003172:	6838      	ldr	r0, [r7, #0]
 8003174:	f000 fa3c 	bl	80035f0 <prvAddCurrentTaskToDelayedList>
}
 8003178:	bf00      	nop
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	20000128 	.word	0x20000128

08003184 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10a      	bne.n	80031ac <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800319a:	f383 8811 	msr	BASEPRI, r3
 800319e:	f3bf 8f6f 	isb	sy
 80031a2:	f3bf 8f4f 	dsb	sy
 80031a6:	613b      	str	r3, [r7, #16]
    }
 80031a8:	bf00      	nop
 80031aa:	e7fe      	b.n	80031aa <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	4b17      	ldr	r3, [pc, #92]	; (8003210 <vTaskPlaceOnEventListRestricted+0x8c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	61da      	str	r2, [r3, #28]
 80031ba:	4b15      	ldr	r3, [pc, #84]	; (8003210 <vTaskPlaceOnEventListRestricted+0x8c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	6892      	ldr	r2, [r2, #8]
 80031c2:	621a      	str	r2, [r3, #32]
 80031c4:	4b12      	ldr	r3, [pc, #72]	; (8003210 <vTaskPlaceOnEventListRestricted+0x8c>)
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	3218      	adds	r2, #24
 80031ce:	605a      	str	r2, [r3, #4]
 80031d0:	4b0f      	ldr	r3, [pc, #60]	; (8003210 <vTaskPlaceOnEventListRestricted+0x8c>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f103 0218 	add.w	r2, r3, #24
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	609a      	str	r2, [r3, #8]
 80031dc:	4b0c      	ldr	r3, [pc, #48]	; (8003210 <vTaskPlaceOnEventListRestricted+0x8c>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	629a      	str	r2, [r3, #40]	; 0x28
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	1c5a      	adds	r2, r3, #1
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d002      	beq.n	80031fa <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80031f4:	f04f 33ff 	mov.w	r3, #4294967295
 80031f8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80031fa:	2024      	movs	r0, #36	; 0x24
 80031fc:	f002 fe52 	bl	8005ea4 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	68b8      	ldr	r0, [r7, #8]
 8003204:	f000 f9f4 	bl	80035f0 <prvAddCurrentTaskToDelayedList>
    }
 8003208:	bf00      	nop
 800320a:	3718      	adds	r7, #24
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	20000128 	.word	0x20000128

08003214 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b08a      	sub	sp, #40	; 0x28
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003224:	6a3b      	ldr	r3, [r7, #32]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10a      	bne.n	8003240 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800322a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322e:	f383 8811 	msr	BASEPRI, r3
 8003232:	f3bf 8f6f 	isb	sy
 8003236:	f3bf 8f4f 	dsb	sy
 800323a:	60fb      	str	r3, [r7, #12]
    }
 800323c:	bf00      	nop
 800323e:	e7fe      	b.n	800323e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003240:	6a3b      	ldr	r3, [r7, #32]
 8003242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003244:	61fb      	str	r3, [r7, #28]
 8003246:	6a3b      	ldr	r3, [r7, #32]
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	6a3a      	ldr	r2, [r7, #32]
 800324c:	6a12      	ldr	r2, [r2, #32]
 800324e:	609a      	str	r2, [r3, #8]
 8003250:	6a3b      	ldr	r3, [r7, #32]
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	6a3a      	ldr	r2, [r7, #32]
 8003256:	69d2      	ldr	r2, [r2, #28]
 8003258:	605a      	str	r2, [r3, #4]
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	6a3b      	ldr	r3, [r7, #32]
 8003260:	3318      	adds	r3, #24
 8003262:	429a      	cmp	r2, r3
 8003264:	d103      	bne.n	800326e <xTaskRemoveFromEventList+0x5a>
 8003266:	6a3b      	ldr	r3, [r7, #32]
 8003268:	6a1a      	ldr	r2, [r3, #32]
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	605a      	str	r2, [r3, #4]
 800326e:	6a3b      	ldr	r3, [r7, #32]
 8003270:	2200      	movs	r2, #0
 8003272:	629a      	str	r2, [r3, #40]	; 0x28
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	1e5a      	subs	r2, r3, #1
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800327e:	4b4b      	ldr	r3, [pc, #300]	; (80033ac <xTaskRemoveFromEventList+0x198>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d162      	bne.n	800334c <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	617b      	str	r3, [r7, #20]
 800328c:	6a3b      	ldr	r3, [r7, #32]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	6a3a      	ldr	r2, [r7, #32]
 8003292:	68d2      	ldr	r2, [r2, #12]
 8003294:	609a      	str	r2, [r3, #8]
 8003296:	6a3b      	ldr	r3, [r7, #32]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	6a3a      	ldr	r2, [r7, #32]
 800329c:	6892      	ldr	r2, [r2, #8]
 800329e:	605a      	str	r2, [r3, #4]
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	6a3b      	ldr	r3, [r7, #32]
 80032a6:	3304      	adds	r3, #4
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d103      	bne.n	80032b4 <xTaskRemoveFromEventList+0xa0>
 80032ac:	6a3b      	ldr	r3, [r7, #32]
 80032ae:	68da      	ldr	r2, [r3, #12]
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	605a      	str	r2, [r3, #4]
 80032b4:	6a3b      	ldr	r3, [r7, #32]
 80032b6:	2200      	movs	r2, #0
 80032b8:	615a      	str	r2, [r3, #20]
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	1e5a      	subs	r2, r3, #1
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80032c4:	6a3b      	ldr	r3, [r7, #32]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f003 fb8c 	bl	80069e4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80032cc:	6a3b      	ldr	r3, [r7, #32]
 80032ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d0:	2201      	movs	r2, #1
 80032d2:	409a      	lsls	r2, r3
 80032d4:	4b36      	ldr	r3, [pc, #216]	; (80033b0 <xTaskRemoveFromEventList+0x19c>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4313      	orrs	r3, r2
 80032da:	4a35      	ldr	r2, [pc, #212]	; (80033b0 <xTaskRemoveFromEventList+0x19c>)
 80032dc:	6013      	str	r3, [r2, #0]
 80032de:	6a3b      	ldr	r3, [r7, #32]
 80032e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e2:	4934      	ldr	r1, [pc, #208]	; (80033b4 <xTaskRemoveFromEventList+0x1a0>)
 80032e4:	4613      	mov	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	440b      	add	r3, r1
 80032ee:	3304      	adds	r3, #4
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	613b      	str	r3, [r7, #16]
 80032f4:	6a3b      	ldr	r3, [r7, #32]
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	609a      	str	r2, [r3, #8]
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	6a3b      	ldr	r3, [r7, #32]
 8003300:	60da      	str	r2, [r3, #12]
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	6a3a      	ldr	r2, [r7, #32]
 8003308:	3204      	adds	r2, #4
 800330a:	605a      	str	r2, [r3, #4]
 800330c:	6a3b      	ldr	r3, [r7, #32]
 800330e:	1d1a      	adds	r2, r3, #4
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	609a      	str	r2, [r3, #8]
 8003314:	6a3b      	ldr	r3, [r7, #32]
 8003316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003318:	4613      	mov	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4413      	add	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4a24      	ldr	r2, [pc, #144]	; (80033b4 <xTaskRemoveFromEventList+0x1a0>)
 8003322:	441a      	add	r2, r3
 8003324:	6a3b      	ldr	r3, [r7, #32]
 8003326:	615a      	str	r2, [r3, #20]
 8003328:	6a3b      	ldr	r3, [r7, #32]
 800332a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800332c:	4921      	ldr	r1, [pc, #132]	; (80033b4 <xTaskRemoveFromEventList+0x1a0>)
 800332e:	4613      	mov	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4413      	add	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	440b      	add	r3, r1
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	1c59      	adds	r1, r3, #1
 800333c:	481d      	ldr	r0, [pc, #116]	; (80033b4 <xTaskRemoveFromEventList+0x1a0>)
 800333e:	4613      	mov	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4413      	add	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4403      	add	r3, r0
 8003348:	6019      	str	r1, [r3, #0]
 800334a:	e01b      	b.n	8003384 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800334c:	4b1a      	ldr	r3, [pc, #104]	; (80033b8 <xTaskRemoveFromEventList+0x1a4>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	61bb      	str	r3, [r7, #24]
 8003352:	6a3b      	ldr	r3, [r7, #32]
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	61da      	str	r2, [r3, #28]
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	6a3b      	ldr	r3, [r7, #32]
 800335e:	621a      	str	r2, [r3, #32]
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	6a3a      	ldr	r2, [r7, #32]
 8003366:	3218      	adds	r2, #24
 8003368:	605a      	str	r2, [r3, #4]
 800336a:	6a3b      	ldr	r3, [r7, #32]
 800336c:	f103 0218 	add.w	r2, r3, #24
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	609a      	str	r2, [r3, #8]
 8003374:	6a3b      	ldr	r3, [r7, #32]
 8003376:	4a10      	ldr	r2, [pc, #64]	; (80033b8 <xTaskRemoveFromEventList+0x1a4>)
 8003378:	629a      	str	r2, [r3, #40]	; 0x28
 800337a:	4b0f      	ldr	r3, [pc, #60]	; (80033b8 <xTaskRemoveFromEventList+0x1a4>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	3301      	adds	r3, #1
 8003380:	4a0d      	ldr	r2, [pc, #52]	; (80033b8 <xTaskRemoveFromEventList+0x1a4>)
 8003382:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003384:	6a3b      	ldr	r3, [r7, #32]
 8003386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003388:	4b0c      	ldr	r3, [pc, #48]	; (80033bc <xTaskRemoveFromEventList+0x1a8>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338e:	429a      	cmp	r2, r3
 8003390:	d905      	bls.n	800339e <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003392:	2301      	movs	r3, #1
 8003394:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003396:	4b0a      	ldr	r3, [pc, #40]	; (80033c0 <xTaskRemoveFromEventList+0x1ac>)
 8003398:	2201      	movs	r2, #1
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	e001      	b.n	80033a2 <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 800339e:	2300      	movs	r3, #0
 80033a0:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3728      	adds	r7, #40	; 0x28
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	20000210 	.word	0x20000210
 80033b0:	200001f0 	.word	0x200001f0
 80033b4:	2000012c 	.word	0x2000012c
 80033b8:	200001c0 	.word	0x200001c0
 80033bc:	20000128 	.word	0x20000128
 80033c0:	200001fc 	.word	0x200001fc

080033c4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80033cc:	4b06      	ldr	r3, [pc, #24]	; (80033e8 <vTaskInternalSetTimeOutState+0x24>)
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80033d4:	4b05      	ldr	r3, [pc, #20]	; (80033ec <vTaskInternalSetTimeOutState+0x28>)
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	605a      	str	r2, [r3, #4]
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	20000200 	.word	0x20000200
 80033ec:	200001ec 	.word	0x200001ec

080033f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b088      	sub	sp, #32
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10a      	bne.n	8003416 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003404:	f383 8811 	msr	BASEPRI, r3
 8003408:	f3bf 8f6f 	isb	sy
 800340c:	f3bf 8f4f 	dsb	sy
 8003410:	613b      	str	r3, [r7, #16]
    }
 8003412:	bf00      	nop
 8003414:	e7fe      	b.n	8003414 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10a      	bne.n	8003432 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800341c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003420:	f383 8811 	msr	BASEPRI, r3
 8003424:	f3bf 8f6f 	isb	sy
 8003428:	f3bf 8f4f 	dsb	sy
 800342c:	60fb      	str	r3, [r7, #12]
    }
 800342e:	bf00      	nop
 8003430:	e7fe      	b.n	8003430 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003432:	f000 fd97 	bl	8003f64 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003436:	4b1f      	ldr	r3, [pc, #124]	; (80034b4 <xTaskCheckForTimeOut+0xc4>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344e:	d102      	bne.n	8003456 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003450:	2300      	movs	r3, #0
 8003452:	61fb      	str	r3, [r7, #28]
 8003454:	e026      	b.n	80034a4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	4b17      	ldr	r3, [pc, #92]	; (80034b8 <xTaskCheckForTimeOut+0xc8>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	429a      	cmp	r2, r3
 8003460:	d00a      	beq.n	8003478 <xTaskCheckForTimeOut+0x88>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	429a      	cmp	r2, r3
 800346a:	d305      	bcc.n	8003478 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800346c:	2301      	movs	r3, #1
 800346e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	2200      	movs	r2, #0
 8003474:	601a      	str	r2, [r3, #0]
 8003476:	e015      	b.n	80034a4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	429a      	cmp	r2, r3
 8003480:	d20b      	bcs.n	800349a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	1ad2      	subs	r2, r2, r3
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7ff ff98 	bl	80033c4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003494:	2300      	movs	r3, #0
 8003496:	61fb      	str	r3, [r7, #28]
 8003498:	e004      	b.n	80034a4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80034a0:	2301      	movs	r3, #1
 80034a2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80034a4:	f000 fd8e 	bl	8003fc4 <vPortExitCritical>

    return xReturn;
 80034a8:	69fb      	ldr	r3, [r7, #28]
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3720      	adds	r7, #32
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	200001ec 	.word	0x200001ec
 80034b8:	20000200 	.word	0x20000200

080034bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80034c0:	4b03      	ldr	r3, [pc, #12]	; (80034d0 <vTaskMissedYield+0x14>)
 80034c2:	2201      	movs	r2, #1
 80034c4:	601a      	str	r2, [r3, #0]
}
 80034c6:	bf00      	nop
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	200001fc 	.word	0x200001fc

080034d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80034dc:	f000 f846 	bl	800356c <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 80034e0:	4b04      	ldr	r3, [pc, #16]	; (80034f4 <prvIdleTask+0x20>)
 80034e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	f3bf 8f4f 	dsb	sy
 80034ec:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80034f0:	e7f4      	b.n	80034dc <prvIdleTask+0x8>
 80034f2:	bf00      	nop
 80034f4:	e000ed04 	.word	0xe000ed04

080034f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80034fe:	2300      	movs	r3, #0
 8003500:	607b      	str	r3, [r7, #4]
 8003502:	e00c      	b.n	800351e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	4613      	mov	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4a10      	ldr	r2, [pc, #64]	; (8003550 <prvInitialiseTaskLists+0x58>)
 8003510:	4413      	add	r3, r2
 8003512:	4618      	mov	r0, r3
 8003514:	f7fe fdf8 	bl	8002108 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	3301      	adds	r3, #1
 800351c:	607b      	str	r3, [r7, #4]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b04      	cmp	r3, #4
 8003522:	d9ef      	bls.n	8003504 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003524:	480b      	ldr	r0, [pc, #44]	; (8003554 <prvInitialiseTaskLists+0x5c>)
 8003526:	f7fe fdef 	bl	8002108 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800352a:	480b      	ldr	r0, [pc, #44]	; (8003558 <prvInitialiseTaskLists+0x60>)
 800352c:	f7fe fdec 	bl	8002108 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003530:	480a      	ldr	r0, [pc, #40]	; (800355c <prvInitialiseTaskLists+0x64>)
 8003532:	f7fe fde9 	bl	8002108 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003536:	480a      	ldr	r0, [pc, #40]	; (8003560 <prvInitialiseTaskLists+0x68>)
 8003538:	f7fe fde6 	bl	8002108 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800353c:	4b09      	ldr	r3, [pc, #36]	; (8003564 <prvInitialiseTaskLists+0x6c>)
 800353e:	4a05      	ldr	r2, [pc, #20]	; (8003554 <prvInitialiseTaskLists+0x5c>)
 8003540:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003542:	4b09      	ldr	r3, [pc, #36]	; (8003568 <prvInitialiseTaskLists+0x70>)
 8003544:	4a04      	ldr	r2, [pc, #16]	; (8003558 <prvInitialiseTaskLists+0x60>)
 8003546:	601a      	str	r2, [r3, #0]
}
 8003548:	bf00      	nop
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	2000012c 	.word	0x2000012c
 8003554:	20000190 	.word	0x20000190
 8003558:	200001a4 	.word	0x200001a4
 800355c:	200001c0 	.word	0x200001c0
 8003560:	200001d4 	.word	0x200001d4
 8003564:	200001b8 	.word	0x200001b8
 8003568:	200001bc 	.word	0x200001bc

0800356c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0

                prvDeleteTCB( pxTCB );
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003570:	bf00      	nop
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
	...

0800357c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003580:	4b0a      	ldr	r3, [pc, #40]	; (80035ac <prvResetNextTaskUnblockTime+0x30>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d104      	bne.n	8003594 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800358a:	4b09      	ldr	r3, [pc, #36]	; (80035b0 <prvResetNextTaskUnblockTime+0x34>)
 800358c:	f04f 32ff 	mov.w	r2, #4294967295
 8003590:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003592:	e005      	b.n	80035a0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003594:	4b05      	ldr	r3, [pc, #20]	; (80035ac <prvResetNextTaskUnblockTime+0x30>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a04      	ldr	r2, [pc, #16]	; (80035b0 <prvResetNextTaskUnblockTime+0x34>)
 800359e:	6013      	str	r3, [r2, #0]
}
 80035a0:	bf00      	nop
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	200001b8 	.word	0x200001b8
 80035b0:	20000208 	.word	0x20000208

080035b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80035ba:	4b0b      	ldr	r3, [pc, #44]	; (80035e8 <xTaskGetSchedulerState+0x34>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d102      	bne.n	80035c8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80035c2:	2301      	movs	r3, #1
 80035c4:	607b      	str	r3, [r7, #4]
 80035c6:	e008      	b.n	80035da <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035c8:	4b08      	ldr	r3, [pc, #32]	; (80035ec <xTaskGetSchedulerState+0x38>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d102      	bne.n	80035d6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80035d0:	2302      	movs	r3, #2
 80035d2:	607b      	str	r3, [r7, #4]
 80035d4:	e001      	b.n	80035da <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80035d6:	2300      	movs	r3, #0
 80035d8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80035da:	687b      	ldr	r3, [r7, #4]
    }
 80035dc:	4618      	mov	r0, r3
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr
 80035e8:	200001f4 	.word	0x200001f4
 80035ec:	20000210 	.word	0x20000210

080035f0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80035fa:	4b3c      	ldr	r3, [pc, #240]	; (80036ec <prvAddCurrentTaskToDelayedList+0xfc>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003600:	4b3b      	ldr	r3, [pc, #236]	; (80036f0 <prvAddCurrentTaskToDelayedList+0x100>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	3304      	adds	r3, #4
 8003606:	4618      	mov	r0, r3
 8003608:	f7fe fde4 	bl	80021d4 <uxListRemove>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d10b      	bne.n	800362a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003612:	4b37      	ldr	r3, [pc, #220]	; (80036f0 <prvAddCurrentTaskToDelayedList+0x100>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003618:	2201      	movs	r2, #1
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	43da      	mvns	r2, r3
 8003620:	4b34      	ldr	r3, [pc, #208]	; (80036f4 <prvAddCurrentTaskToDelayedList+0x104>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4013      	ands	r3, r2
 8003626:	4a33      	ldr	r2, [pc, #204]	; (80036f4 <prvAddCurrentTaskToDelayedList+0x104>)
 8003628:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003630:	d124      	bne.n	800367c <prvAddCurrentTaskToDelayedList+0x8c>
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d021      	beq.n	800367c <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003638:	4b2f      	ldr	r3, [pc, #188]	; (80036f8 <prvAddCurrentTaskToDelayedList+0x108>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	613b      	str	r3, [r7, #16]
 800363e:	4b2c      	ldr	r3, [pc, #176]	; (80036f0 <prvAddCurrentTaskToDelayedList+0x100>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	609a      	str	r2, [r3, #8]
 8003646:	4b2a      	ldr	r3, [pc, #168]	; (80036f0 <prvAddCurrentTaskToDelayedList+0x100>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	6892      	ldr	r2, [r2, #8]
 800364e:	60da      	str	r2, [r3, #12]
 8003650:	4b27      	ldr	r3, [pc, #156]	; (80036f0 <prvAddCurrentTaskToDelayedList+0x100>)
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	3204      	adds	r2, #4
 800365a:	605a      	str	r2, [r3, #4]
 800365c:	4b24      	ldr	r3, [pc, #144]	; (80036f0 <prvAddCurrentTaskToDelayedList+0x100>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	1d1a      	adds	r2, r3, #4
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	609a      	str	r2, [r3, #8]
 8003666:	4b22      	ldr	r3, [pc, #136]	; (80036f0 <prvAddCurrentTaskToDelayedList+0x100>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a23      	ldr	r2, [pc, #140]	; (80036f8 <prvAddCurrentTaskToDelayedList+0x108>)
 800366c:	615a      	str	r2, [r3, #20]
 800366e:	4b22      	ldr	r3, [pc, #136]	; (80036f8 <prvAddCurrentTaskToDelayedList+0x108>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	3301      	adds	r3, #1
 8003674:	4a20      	ldr	r2, [pc, #128]	; (80036f8 <prvAddCurrentTaskToDelayedList+0x108>)
 8003676:	6013      	str	r3, [r2, #0]
 8003678:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800367a:	e032      	b.n	80036e2 <prvAddCurrentTaskToDelayedList+0xf2>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4413      	add	r3, r2
 8003682:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003684:	4b1a      	ldr	r3, [pc, #104]	; (80036f0 <prvAddCurrentTaskToDelayedList+0x100>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	429a      	cmp	r2, r3
 8003692:	d20f      	bcs.n	80036b4 <prvAddCurrentTaskToDelayedList+0xc4>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003694:	4b16      	ldr	r3, [pc, #88]	; (80036f0 <prvAddCurrentTaskToDelayedList+0x100>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2104      	movs	r1, #4
 800369a:	4618      	mov	r0, r3
 800369c:	f003 f9e4 	bl	8006a68 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80036a0:	4b16      	ldr	r3, [pc, #88]	; (80036fc <prvAddCurrentTaskToDelayedList+0x10c>)
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	4b12      	ldr	r3, [pc, #72]	; (80036f0 <prvAddCurrentTaskToDelayedList+0x100>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	3304      	adds	r3, #4
 80036aa:	4619      	mov	r1, r3
 80036ac:	4610      	mov	r0, r2
 80036ae:	f7fe fd58 	bl	8002162 <vListInsert>
}
 80036b2:	e016      	b.n	80036e2 <prvAddCurrentTaskToDelayedList+0xf2>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80036b4:	4b0e      	ldr	r3, [pc, #56]	; (80036f0 <prvAddCurrentTaskToDelayedList+0x100>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2104      	movs	r1, #4
 80036ba:	4618      	mov	r0, r3
 80036bc:	f003 f9d4 	bl	8006a68 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80036c0:	4b0f      	ldr	r3, [pc, #60]	; (8003700 <prvAddCurrentTaskToDelayedList+0x110>)
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	4b0a      	ldr	r3, [pc, #40]	; (80036f0 <prvAddCurrentTaskToDelayedList+0x100>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	3304      	adds	r3, #4
 80036ca:	4619      	mov	r1, r3
 80036cc:	4610      	mov	r0, r2
 80036ce:	f7fe fd48 	bl	8002162 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80036d2:	4b0c      	ldr	r3, [pc, #48]	; (8003704 <prvAddCurrentTaskToDelayedList+0x114>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d202      	bcs.n	80036e2 <prvAddCurrentTaskToDelayedList+0xf2>
                        xNextTaskUnblockTime = xTimeToWake;
 80036dc:	4a09      	ldr	r2, [pc, #36]	; (8003704 <prvAddCurrentTaskToDelayedList+0x114>)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6013      	str	r3, [r2, #0]
}
 80036e2:	bf00      	nop
 80036e4:	3718      	adds	r7, #24
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	200001ec 	.word	0x200001ec
 80036f0:	20000128 	.word	0x20000128
 80036f4:	200001f0 	.word	0x200001f0
 80036f8:	200001d4 	.word	0x200001d4
 80036fc:	200001bc 	.word	0x200001bc
 8003700:	200001b8 	.word	0x200001b8
 8003704:	20000208 	.word	0x20000208

08003708 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800370e:	2300      	movs	r3, #0
 8003710:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003712:	f000 fa47 	bl	8003ba4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003716:	4b11      	ldr	r3, [pc, #68]	; (800375c <xTimerCreateTimerTask+0x54>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00b      	beq.n	8003736 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800371e:	4b10      	ldr	r3, [pc, #64]	; (8003760 <xTimerCreateTimerTask+0x58>)
 8003720:	9301      	str	r3, [sp, #4]
 8003722:	2302      	movs	r3, #2
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	2300      	movs	r3, #0
 8003728:	f44f 7282 	mov.w	r2, #260	; 0x104
 800372c:	490d      	ldr	r1, [pc, #52]	; (8003764 <xTimerCreateTimerTask+0x5c>)
 800372e:	480e      	ldr	r0, [pc, #56]	; (8003768 <xTimerCreateTimerTask+0x60>)
 8003730:	f7ff f892 	bl	8002858 <xTaskCreate>
 8003734:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d10a      	bne.n	8003752 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800373c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003740:	f383 8811 	msr	BASEPRI, r3
 8003744:	f3bf 8f6f 	isb	sy
 8003748:	f3bf 8f4f 	dsb	sy
 800374c:	603b      	str	r3, [r7, #0]
    }
 800374e:	bf00      	nop
 8003750:	e7fe      	b.n	8003750 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003752:	687b      	ldr	r3, [r7, #4]
    }
 8003754:	4618      	mov	r0, r3
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	20000244 	.word	0x20000244
 8003760:	20000248 	.word	0x20000248
 8003764:	08007838 	.word	0x08007838
 8003768:	08003811 	.word	0x08003811

0800376c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003778:	e008      	b.n	800378c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	4413      	add	r3, r2
 8003782:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	699a      	ldr	r2, [r3, #24]
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	18d1      	adds	r1, r2, r3
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	f000 f8dd 	bl	8003958 <prvInsertTimerInActiveList>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1ea      	bne.n	800377a <prvReloadTimer+0xe>
        }
    }
 80037a4:	bf00      	nop
 80037a6:	bf00      	nop
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
	...

080037b0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037ba:	4b14      	ldr	r3, [pc, #80]	; (800380c <prvProcessExpiredTimer+0x5c>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	3304      	adds	r3, #4
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7fe fd03 	bl	80021d4 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d005      	beq.n	80037e8 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	6879      	ldr	r1, [r7, #4]
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f7ff ffc3 	bl	800376c <prvReloadTimer>
 80037e6:	e008      	b.n	80037fa <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80037ee:	f023 0301 	bic.w	r3, r3, #1
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	4798      	blx	r3
    }
 8003802:	bf00      	nop
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	2000023c 	.word	0x2000023c

08003810 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003818:	f107 0308 	add.w	r3, r7, #8
 800381c:	4618      	mov	r0, r3
 800381e:	f000 f857 	bl	80038d0 <prvGetNextExpireTime>
 8003822:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	4619      	mov	r1, r3
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f000 f803 	bl	8003834 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800382e:	f000 f8d5 	bl	80039dc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003832:	e7f1      	b.n	8003818 <prvTimerTask+0x8>

08003834 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800383e:	f7ff f9f9 	bl	8002c34 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003842:	f107 0308 	add.w	r3, r7, #8
 8003846:	4618      	mov	r0, r3
 8003848:	f000 f866 	bl	8003918 <prvSampleTimeNow>
 800384c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d130      	bne.n	80038b6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10a      	bne.n	8003870 <prvProcessTimerOrBlockTask+0x3c>
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	429a      	cmp	r2, r3
 8003860:	d806      	bhi.n	8003870 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003862:	f7ff f9f5 	bl	8002c50 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003866:	68f9      	ldr	r1, [r7, #12]
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7ff ffa1 	bl	80037b0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800386e:	e024      	b.n	80038ba <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d008      	beq.n	8003888 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003876:	4b13      	ldr	r3, [pc, #76]	; (80038c4 <prvProcessTimerOrBlockTask+0x90>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <prvProcessTimerOrBlockTask+0x50>
 8003880:	2301      	movs	r3, #1
 8003882:	e000      	b.n	8003886 <prvProcessTimerOrBlockTask+0x52>
 8003884:	2300      	movs	r3, #0
 8003886:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003888:	4b0f      	ldr	r3, [pc, #60]	; (80038c8 <prvProcessTimerOrBlockTask+0x94>)
 800388a:	6818      	ldr	r0, [r3, #0]
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	4619      	mov	r1, r3
 8003896:	f7fe ffab 	bl	80027f0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800389a:	f7ff f9d9 	bl	8002c50 <xTaskResumeAll>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10a      	bne.n	80038ba <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80038a4:	4b09      	ldr	r3, [pc, #36]	; (80038cc <prvProcessTimerOrBlockTask+0x98>)
 80038a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	f3bf 8f4f 	dsb	sy
 80038b0:	f3bf 8f6f 	isb	sy
    }
 80038b4:	e001      	b.n	80038ba <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80038b6:	f7ff f9cb 	bl	8002c50 <xTaskResumeAll>
    }
 80038ba:	bf00      	nop
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	20000240 	.word	0x20000240
 80038c8:	20000244 	.word	0x20000244
 80038cc:	e000ed04 	.word	0xe000ed04

080038d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80038d8:	4b0e      	ldr	r3, [pc, #56]	; (8003914 <prvGetNextExpireTime+0x44>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <prvGetNextExpireTime+0x16>
 80038e2:	2201      	movs	r2, #1
 80038e4:	e000      	b.n	80038e8 <prvGetNextExpireTime+0x18>
 80038e6:	2200      	movs	r2, #0
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d105      	bne.n	8003900 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80038f4:	4b07      	ldr	r3, [pc, #28]	; (8003914 <prvGetNextExpireTime+0x44>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	60fb      	str	r3, [r7, #12]
 80038fe:	e001      	b.n	8003904 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003900:	2300      	movs	r3, #0
 8003902:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003904:	68fb      	ldr	r3, [r7, #12]
    }
 8003906:	4618      	mov	r0, r3
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	2000023c 	.word	0x2000023c

08003918 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003920:	f7ff fa88 	bl	8002e34 <xTaskGetTickCount>
 8003924:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003926:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <prvSampleTimeNow+0x3c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	429a      	cmp	r2, r3
 800392e:	d205      	bcs.n	800393c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003930:	f000 f912 	bl	8003b58 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	e002      	b.n	8003942 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003942:	4a04      	ldr	r2, [pc, #16]	; (8003954 <prvSampleTimeNow+0x3c>)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003948:	68fb      	ldr	r3, [r7, #12]
    }
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	2000024c 	.word	0x2000024c

08003958 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
 8003964:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003966:	2300      	movs	r3, #0
 8003968:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	68ba      	ldr	r2, [r7, #8]
 800396e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	429a      	cmp	r2, r3
 800397c:	d812      	bhi.n	80039a4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	1ad2      	subs	r2, r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	429a      	cmp	r2, r3
 800398a:	d302      	bcc.n	8003992 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800398c:	2301      	movs	r3, #1
 800398e:	617b      	str	r3, [r7, #20]
 8003990:	e01b      	b.n	80039ca <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003992:	4b10      	ldr	r3, [pc, #64]	; (80039d4 <prvInsertTimerInActiveList+0x7c>)
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	3304      	adds	r3, #4
 800399a:	4619      	mov	r1, r3
 800399c:	4610      	mov	r0, r2
 800399e:	f7fe fbe0 	bl	8002162 <vListInsert>
 80039a2:	e012      	b.n	80039ca <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d206      	bcs.n	80039ba <prvInsertTimerInActiveList+0x62>
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d302      	bcc.n	80039ba <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80039b4:	2301      	movs	r3, #1
 80039b6:	617b      	str	r3, [r7, #20]
 80039b8:	e007      	b.n	80039ca <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80039ba:	4b07      	ldr	r3, [pc, #28]	; (80039d8 <prvInsertTimerInActiveList+0x80>)
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	3304      	adds	r3, #4
 80039c2:	4619      	mov	r1, r3
 80039c4:	4610      	mov	r0, r2
 80039c6:	f7fe fbcc 	bl	8002162 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80039ca:	697b      	ldr	r3, [r7, #20]
    }
 80039cc:	4618      	mov	r0, r3
 80039ce:	3718      	adds	r7, #24
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	20000240 	.word	0x20000240
 80039d8:	2000023c 	.word	0x2000023c

080039dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80039dc:	b580      	push	{r7, lr}
 80039de:	b088      	sub	sp, #32
 80039e0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80039e2:	e0a6      	b.n	8003b32 <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f2c0 80a2 	blt.w	8003b30 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d004      	beq.n	8003a02 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	3304      	adds	r3, #4
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7fe fbe9 	bl	80021d4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003a02:	1d3b      	adds	r3, r7, #4
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7ff ff87 	bl	8003918 <prvSampleTimeNow>
 8003a0a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	2b08      	cmp	r3, #8
 8003a12:	f200 808e 	bhi.w	8003b32 <prvProcessReceivedCommands+0x156>
 8003a16:	a201      	add	r2, pc, #4	; (adr r2, 8003a1c <prvProcessReceivedCommands+0x40>)
 8003a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1c:	08003a41 	.word	0x08003a41
 8003a20:	08003a41 	.word	0x08003a41
 8003a24:	08003aa9 	.word	0x08003aa9
 8003a28:	08003abd 	.word	0x08003abd
 8003a2c:	08003b07 	.word	0x08003b07
 8003a30:	08003a41 	.word	0x08003a41
 8003a34:	08003a41 	.word	0x08003a41
 8003a38:	08003aa9 	.word	0x08003aa9
 8003a3c:	08003abd 	.word	0x08003abd
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a46:	f043 0301 	orr.w	r3, r3, #1
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	18d1      	adds	r1, r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	69f8      	ldr	r0, [r7, #28]
 8003a60:	f7ff ff7a 	bl	8003958 <prvInsertTimerInActiveList>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d063      	beq.n	8003b32 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d009      	beq.n	8003a8c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	4413      	add	r3, r2
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	4619      	mov	r1, r3
 8003a84:	69f8      	ldr	r0, [r7, #28]
 8003a86:	f7ff fe71 	bl	800376c <prvReloadTimer>
 8003a8a:	e008      	b.n	8003a9e <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a92:	f023 0301 	bic.w	r3, r3, #1
 8003a96:	b2da      	uxtb	r2, r3
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	69f8      	ldr	r0, [r7, #28]
 8003aa4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003aa6:	e044      	b.n	8003b32 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003aae:	f023 0301 	bic.w	r3, r3, #1
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003aba:	e03a      	b.n	8003b32 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ac2:	f043 0301 	orr.w	r3, r3, #1
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10a      	bne.n	8003af2 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8003adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae0:	f383 8811 	msr	BASEPRI, r3
 8003ae4:	f3bf 8f6f 	isb	sy
 8003ae8:	f3bf 8f4f 	dsb	sy
 8003aec:	617b      	str	r3, [r7, #20]
    }
 8003aee:	bf00      	nop
 8003af0:	e7fe      	b.n	8003af0 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	699a      	ldr	r2, [r3, #24]
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	18d1      	adds	r1, r2, r3
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	69f8      	ldr	r0, [r7, #28]
 8003b00:	f7ff ff2a 	bl	8003958 <prvInsertTimerInActiveList>
                        break;
 8003b04:	e015      	b.n	8003b32 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d103      	bne.n	8003b1c <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 8003b14:	69f8      	ldr	r0, [r7, #28]
 8003b16:	f000 fc31 	bl	800437c <vPortFree>
 8003b1a:	e00a      	b.n	8003b32 <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b22:	f023 0301 	bic.w	r3, r3, #1
 8003b26:	b2da      	uxtb	r2, r3
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003b2e:	e000      	b.n	8003b32 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003b30:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003b32:	4b08      	ldr	r3, [pc, #32]	; (8003b54 <prvProcessReceivedCommands+0x178>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f107 0108 	add.w	r1, r7, #8
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7fe fc6d 	bl	800241c <xQueueReceive>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f47f af4d 	bne.w	80039e4 <prvProcessReceivedCommands+0x8>
        }
    }
 8003b4a:	bf00      	nop
 8003b4c:	bf00      	nop
 8003b4e:	3720      	adds	r7, #32
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	20000244 	.word	0x20000244

08003b58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003b5e:	e009      	b.n	8003b74 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003b60:	4b0e      	ldr	r3, [pc, #56]	; (8003b9c <prvSwitchTimerLists+0x44>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003b6a:	f04f 31ff 	mov.w	r1, #4294967295
 8003b6e:	6838      	ldr	r0, [r7, #0]
 8003b70:	f7ff fe1e 	bl	80037b0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003b74:	4b09      	ldr	r3, [pc, #36]	; (8003b9c <prvSwitchTimerLists+0x44>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1f0      	bne.n	8003b60 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003b7e:	4b07      	ldr	r3, [pc, #28]	; (8003b9c <prvSwitchTimerLists+0x44>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003b84:	4b06      	ldr	r3, [pc, #24]	; (8003ba0 <prvSwitchTimerLists+0x48>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a04      	ldr	r2, [pc, #16]	; (8003b9c <prvSwitchTimerLists+0x44>)
 8003b8a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003b8c:	4a04      	ldr	r2, [pc, #16]	; (8003ba0 <prvSwitchTimerLists+0x48>)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6013      	str	r3, [r2, #0]
    }
 8003b92:	bf00      	nop
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	2000023c 	.word	0x2000023c
 8003ba0:	20000240 	.word	0x20000240

08003ba4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003ba8:	f000 f9dc 	bl	8003f64 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003bac:	4b12      	ldr	r3, [pc, #72]	; (8003bf8 <prvCheckForValidListAndQueue+0x54>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d11d      	bne.n	8003bf0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003bb4:	4811      	ldr	r0, [pc, #68]	; (8003bfc <prvCheckForValidListAndQueue+0x58>)
 8003bb6:	f7fe faa7 	bl	8002108 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003bba:	4811      	ldr	r0, [pc, #68]	; (8003c00 <prvCheckForValidListAndQueue+0x5c>)
 8003bbc:	f7fe faa4 	bl	8002108 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003bc0:	4b10      	ldr	r3, [pc, #64]	; (8003c04 <prvCheckForValidListAndQueue+0x60>)
 8003bc2:	4a0e      	ldr	r2, [pc, #56]	; (8003bfc <prvCheckForValidListAndQueue+0x58>)
 8003bc4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003bc6:	4b10      	ldr	r3, [pc, #64]	; (8003c08 <prvCheckForValidListAndQueue+0x64>)
 8003bc8:	4a0d      	ldr	r2, [pc, #52]	; (8003c00 <prvCheckForValidListAndQueue+0x5c>)
 8003bca:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003bcc:	2200      	movs	r2, #0
 8003bce:	210c      	movs	r1, #12
 8003bd0:	200a      	movs	r0, #10
 8003bd2:	f7fe fbab 	bl	800232c <xQueueGenericCreate>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	4a07      	ldr	r2, [pc, #28]	; (8003bf8 <prvCheckForValidListAndQueue+0x54>)
 8003bda:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003bdc:	4b06      	ldr	r3, [pc, #24]	; (8003bf8 <prvCheckForValidListAndQueue+0x54>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d005      	beq.n	8003bf0 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003be4:	4b04      	ldr	r3, [pc, #16]	; (8003bf8 <prvCheckForValidListAndQueue+0x54>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4908      	ldr	r1, [pc, #32]	; (8003c0c <prvCheckForValidListAndQueue+0x68>)
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7fe fdaa 	bl	8002744 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003bf0:	f000 f9e8 	bl	8003fc4 <vPortExitCritical>
    }
 8003bf4:	bf00      	nop
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	20000244 	.word	0x20000244
 8003bfc:	20000214 	.word	0x20000214
 8003c00:	20000228 	.word	0x20000228
 8003c04:	2000023c 	.word	0x2000023c
 8003c08:	20000240 	.word	0x20000240
 8003c0c:	08007840 	.word	0x08007840

08003c10 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	3b04      	subs	r3, #4
 8003c20:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c28:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	3b04      	subs	r3, #4
 8003c2e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	f023 0201 	bic.w	r2, r3, #1
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	3b04      	subs	r3, #4
 8003c3e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003c40:	4a0c      	ldr	r2, [pc, #48]	; (8003c74 <pxPortInitialiseStack+0x64>)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	3b14      	subs	r3, #20
 8003c4a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	3b04      	subs	r3, #4
 8003c56:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f06f 0202 	mvn.w	r2, #2
 8003c5e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	3b20      	subs	r3, #32
 8003c64:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003c66:	68fb      	ldr	r3, [r7, #12]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3714      	adds	r7, #20
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr
 8003c74:	08003c79 	.word	0x08003c79

08003c78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003c82:	4b12      	ldr	r3, [pc, #72]	; (8003ccc <prvTaskExitError+0x54>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c8a:	d00a      	beq.n	8003ca2 <prvTaskExitError+0x2a>
        __asm volatile
 8003c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c90:	f383 8811 	msr	BASEPRI, r3
 8003c94:	f3bf 8f6f 	isb	sy
 8003c98:	f3bf 8f4f 	dsb	sy
 8003c9c:	60fb      	str	r3, [r7, #12]
    }
 8003c9e:	bf00      	nop
 8003ca0:	e7fe      	b.n	8003ca0 <prvTaskExitError+0x28>
        __asm volatile
 8003ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca6:	f383 8811 	msr	BASEPRI, r3
 8003caa:	f3bf 8f6f 	isb	sy
 8003cae:	f3bf 8f4f 	dsb	sy
 8003cb2:	60bb      	str	r3, [r7, #8]
    }
 8003cb4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003cb6:	bf00      	nop
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d0fc      	beq.n	8003cb8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003cbe:	bf00      	nop
 8003cc0:	bf00      	nop
 8003cc2:	3714      	adds	r7, #20
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr
 8003ccc:	20000010 	.word	0x20000010

08003cd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003cd0:	4b07      	ldr	r3, [pc, #28]	; (8003cf0 <pxCurrentTCBConst2>)
 8003cd2:	6819      	ldr	r1, [r3, #0]
 8003cd4:	6808      	ldr	r0, [r1, #0]
 8003cd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cda:	f380 8809 	msr	PSP, r0
 8003cde:	f3bf 8f6f 	isb	sy
 8003ce2:	f04f 0000 	mov.w	r0, #0
 8003ce6:	f380 8811 	msr	BASEPRI, r0
 8003cea:	4770      	bx	lr
 8003cec:	f3af 8000 	nop.w

08003cf0 <pxCurrentTCBConst2>:
 8003cf0:	20000128 	.word	0x20000128
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003cf4:	bf00      	nop
 8003cf6:	bf00      	nop

08003cf8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003cf8:	4808      	ldr	r0, [pc, #32]	; (8003d1c <prvPortStartFirstTask+0x24>)
 8003cfa:	6800      	ldr	r0, [r0, #0]
 8003cfc:	6800      	ldr	r0, [r0, #0]
 8003cfe:	f380 8808 	msr	MSP, r0
 8003d02:	f04f 0000 	mov.w	r0, #0
 8003d06:	f380 8814 	msr	CONTROL, r0
 8003d0a:	b662      	cpsie	i
 8003d0c:	b661      	cpsie	f
 8003d0e:	f3bf 8f4f 	dsb	sy
 8003d12:	f3bf 8f6f 	isb	sy
 8003d16:	df00      	svc	0
 8003d18:	bf00      	nop
 8003d1a:	0000      	.short	0x0000
 8003d1c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003d20:	bf00      	nop
 8003d22:	bf00      	nop

08003d24 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003d2a:	4b46      	ldr	r3, [pc, #280]	; (8003e44 <xPortStartScheduler+0x120>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a46      	ldr	r2, [pc, #280]	; (8003e48 <xPortStartScheduler+0x124>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d10a      	bne.n	8003d4a <xPortStartScheduler+0x26>
        __asm volatile
 8003d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d38:	f383 8811 	msr	BASEPRI, r3
 8003d3c:	f3bf 8f6f 	isb	sy
 8003d40:	f3bf 8f4f 	dsb	sy
 8003d44:	613b      	str	r3, [r7, #16]
    }
 8003d46:	bf00      	nop
 8003d48:	e7fe      	b.n	8003d48 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003d4a:	4b3e      	ldr	r3, [pc, #248]	; (8003e44 <xPortStartScheduler+0x120>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a3f      	ldr	r2, [pc, #252]	; (8003e4c <xPortStartScheduler+0x128>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d10a      	bne.n	8003d6a <xPortStartScheduler+0x46>
        __asm volatile
 8003d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d58:	f383 8811 	msr	BASEPRI, r3
 8003d5c:	f3bf 8f6f 	isb	sy
 8003d60:	f3bf 8f4f 	dsb	sy
 8003d64:	60fb      	str	r3, [r7, #12]
    }
 8003d66:	bf00      	nop
 8003d68:	e7fe      	b.n	8003d68 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003d6a:	4b39      	ldr	r3, [pc, #228]	; (8003e50 <xPortStartScheduler+0x12c>)
 8003d6c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	22ff      	movs	r2, #255	; 0xff
 8003d7a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003d84:	78fb      	ldrb	r3, [r7, #3]
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d8c:	b2da      	uxtb	r2, r3
 8003d8e:	4b31      	ldr	r3, [pc, #196]	; (8003e54 <xPortStartScheduler+0x130>)
 8003d90:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003d92:	4b31      	ldr	r3, [pc, #196]	; (8003e58 <xPortStartScheduler+0x134>)
 8003d94:	2207      	movs	r2, #7
 8003d96:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d98:	e009      	b.n	8003dae <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003d9a:	4b2f      	ldr	r3, [pc, #188]	; (8003e58 <xPortStartScheduler+0x134>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	4a2d      	ldr	r2, [pc, #180]	; (8003e58 <xPortStartScheduler+0x134>)
 8003da2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003da4:	78fb      	ldrb	r3, [r7, #3]
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003dae:	78fb      	ldrb	r3, [r7, #3]
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db6:	2b80      	cmp	r3, #128	; 0x80
 8003db8:	d0ef      	beq.n	8003d9a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003dba:	4b27      	ldr	r3, [pc, #156]	; (8003e58 <xPortStartScheduler+0x134>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f1c3 0307 	rsb	r3, r3, #7
 8003dc2:	2b04      	cmp	r3, #4
 8003dc4:	d00a      	beq.n	8003ddc <xPortStartScheduler+0xb8>
        __asm volatile
 8003dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dca:	f383 8811 	msr	BASEPRI, r3
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	f3bf 8f4f 	dsb	sy
 8003dd6:	60bb      	str	r3, [r7, #8]
    }
 8003dd8:	bf00      	nop
 8003dda:	e7fe      	b.n	8003dda <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003ddc:	4b1e      	ldr	r3, [pc, #120]	; (8003e58 <xPortStartScheduler+0x134>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	021b      	lsls	r3, r3, #8
 8003de2:	4a1d      	ldr	r2, [pc, #116]	; (8003e58 <xPortStartScheduler+0x134>)
 8003de4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003de6:	4b1c      	ldr	r3, [pc, #112]	; (8003e58 <xPortStartScheduler+0x134>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003dee:	4a1a      	ldr	r2, [pc, #104]	; (8003e58 <xPortStartScheduler+0x134>)
 8003df0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	b2da      	uxtb	r2, r3
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003dfa:	4b18      	ldr	r3, [pc, #96]	; (8003e5c <xPortStartScheduler+0x138>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a17      	ldr	r2, [pc, #92]	; (8003e5c <xPortStartScheduler+0x138>)
 8003e00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e04:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003e06:	4b15      	ldr	r3, [pc, #84]	; (8003e5c <xPortStartScheduler+0x138>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a14      	ldr	r2, [pc, #80]	; (8003e5c <xPortStartScheduler+0x138>)
 8003e0c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003e10:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003e12:	f000 f963 	bl	80040dc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003e16:	4b12      	ldr	r3, [pc, #72]	; (8003e60 <xPortStartScheduler+0x13c>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003e1c:	f000 f982 	bl	8004124 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003e20:	4b10      	ldr	r3, [pc, #64]	; (8003e64 <xPortStartScheduler+0x140>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a0f      	ldr	r2, [pc, #60]	; (8003e64 <xPortStartScheduler+0x140>)
 8003e26:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003e2a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003e2c:	f7ff ff64 	bl	8003cf8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003e30:	f7ff f91a 	bl	8003068 <vTaskSwitchContext>
    prvTaskExitError();
 8003e34:	f7ff ff20 	bl	8003c78 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3718      	adds	r7, #24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	e000ed00 	.word	0xe000ed00
 8003e48:	410fc271 	.word	0x410fc271
 8003e4c:	410fc270 	.word	0x410fc270
 8003e50:	e000e400 	.word	0xe000e400
 8003e54:	20000250 	.word	0x20000250
 8003e58:	20000254 	.word	0x20000254
 8003e5c:	e000ed20 	.word	0xe000ed20
 8003e60:	20000010 	.word	0x20000010
 8003e64:	e000ef34 	.word	0xe000ef34

08003e68 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b087      	sub	sp, #28
 8003e6c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003e6e:	4b37      	ldr	r3, [pc, #220]	; (8003f4c <vInitPrioGroupValue+0xe4>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a37      	ldr	r2, [pc, #220]	; (8003f50 <vInitPrioGroupValue+0xe8>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d10a      	bne.n	8003e8e <vInitPrioGroupValue+0x26>
        __asm volatile
 8003e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e7c:	f383 8811 	msr	BASEPRI, r3
 8003e80:	f3bf 8f6f 	isb	sy
 8003e84:	f3bf 8f4f 	dsb	sy
 8003e88:	613b      	str	r3, [r7, #16]
    }
 8003e8a:	bf00      	nop
 8003e8c:	e7fe      	b.n	8003e8c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003e8e:	4b2f      	ldr	r3, [pc, #188]	; (8003f4c <vInitPrioGroupValue+0xe4>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a30      	ldr	r2, [pc, #192]	; (8003f54 <vInitPrioGroupValue+0xec>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d10a      	bne.n	8003eae <vInitPrioGroupValue+0x46>
        __asm volatile
 8003e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9c:	f383 8811 	msr	BASEPRI, r3
 8003ea0:	f3bf 8f6f 	isb	sy
 8003ea4:	f3bf 8f4f 	dsb	sy
 8003ea8:	60fb      	str	r3, [r7, #12]
    }
 8003eaa:	bf00      	nop
 8003eac:	e7fe      	b.n	8003eac <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003eae:	4b2a      	ldr	r3, [pc, #168]	; (8003f58 <vInitPrioGroupValue+0xf0>)
 8003eb0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	22ff      	movs	r2, #255	; 0xff
 8003ebe:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003ec8:	78fb      	ldrb	r3, [r7, #3]
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ed0:	b2da      	uxtb	r2, r3
 8003ed2:	4b22      	ldr	r3, [pc, #136]	; (8003f5c <vInitPrioGroupValue+0xf4>)
 8003ed4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003ed6:	4b22      	ldr	r3, [pc, #136]	; (8003f60 <vInitPrioGroupValue+0xf8>)
 8003ed8:	2207      	movs	r2, #7
 8003eda:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003edc:	e009      	b.n	8003ef2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003ede:	4b20      	ldr	r3, [pc, #128]	; (8003f60 <vInitPrioGroupValue+0xf8>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	4a1e      	ldr	r2, [pc, #120]	; (8003f60 <vInitPrioGroupValue+0xf8>)
 8003ee6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003ee8:	78fb      	ldrb	r3, [r7, #3]
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ef2:	78fb      	ldrb	r3, [r7, #3]
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efa:	2b80      	cmp	r3, #128	; 0x80
 8003efc:	d0ef      	beq.n	8003ede <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003efe:	4b18      	ldr	r3, [pc, #96]	; (8003f60 <vInitPrioGroupValue+0xf8>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f1c3 0307 	rsb	r3, r3, #7
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	d00a      	beq.n	8003f20 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8003f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0e:	f383 8811 	msr	BASEPRI, r3
 8003f12:	f3bf 8f6f 	isb	sy
 8003f16:	f3bf 8f4f 	dsb	sy
 8003f1a:	60bb      	str	r3, [r7, #8]
    }
 8003f1c:	bf00      	nop
 8003f1e:	e7fe      	b.n	8003f1e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003f20:	4b0f      	ldr	r3, [pc, #60]	; (8003f60 <vInitPrioGroupValue+0xf8>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	021b      	lsls	r3, r3, #8
 8003f26:	4a0e      	ldr	r2, [pc, #56]	; (8003f60 <vInitPrioGroupValue+0xf8>)
 8003f28:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003f2a:	4b0d      	ldr	r3, [pc, #52]	; (8003f60 <vInitPrioGroupValue+0xf8>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f32:	4a0b      	ldr	r2, [pc, #44]	; (8003f60 <vInitPrioGroupValue+0xf8>)
 8003f34:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	b2da      	uxtb	r2, r3
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8003f3e:	bf00      	nop
 8003f40:	371c      	adds	r7, #28
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	e000ed00 	.word	0xe000ed00
 8003f50:	410fc271 	.word	0x410fc271
 8003f54:	410fc270 	.word	0x410fc270
 8003f58:	e000e400 	.word	0xe000e400
 8003f5c:	20000250 	.word	0x20000250
 8003f60:	20000254 	.word	0x20000254

08003f64 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
        __asm volatile
 8003f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6e:	f383 8811 	msr	BASEPRI, r3
 8003f72:	f3bf 8f6f 	isb	sy
 8003f76:	f3bf 8f4f 	dsb	sy
 8003f7a:	607b      	str	r3, [r7, #4]
    }
 8003f7c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003f7e:	4b0f      	ldr	r3, [pc, #60]	; (8003fbc <vPortEnterCritical+0x58>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	3301      	adds	r3, #1
 8003f84:	4a0d      	ldr	r2, [pc, #52]	; (8003fbc <vPortEnterCritical+0x58>)
 8003f86:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003f88:	4b0c      	ldr	r3, [pc, #48]	; (8003fbc <vPortEnterCritical+0x58>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d10f      	bne.n	8003fb0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003f90:	4b0b      	ldr	r3, [pc, #44]	; (8003fc0 <vPortEnterCritical+0x5c>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00a      	beq.n	8003fb0 <vPortEnterCritical+0x4c>
        __asm volatile
 8003f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9e:	f383 8811 	msr	BASEPRI, r3
 8003fa2:	f3bf 8f6f 	isb	sy
 8003fa6:	f3bf 8f4f 	dsb	sy
 8003faa:	603b      	str	r3, [r7, #0]
    }
 8003fac:	bf00      	nop
 8003fae:	e7fe      	b.n	8003fae <vPortEnterCritical+0x4a>
    }
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	20000010 	.word	0x20000010
 8003fc0:	e000ed04 	.word	0xe000ed04

08003fc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003fca:	4b12      	ldr	r3, [pc, #72]	; (8004014 <vPortExitCritical+0x50>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10a      	bne.n	8003fe8 <vPortExitCritical+0x24>
        __asm volatile
 8003fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd6:	f383 8811 	msr	BASEPRI, r3
 8003fda:	f3bf 8f6f 	isb	sy
 8003fde:	f3bf 8f4f 	dsb	sy
 8003fe2:	607b      	str	r3, [r7, #4]
    }
 8003fe4:	bf00      	nop
 8003fe6:	e7fe      	b.n	8003fe6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003fe8:	4b0a      	ldr	r3, [pc, #40]	; (8004014 <vPortExitCritical+0x50>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	3b01      	subs	r3, #1
 8003fee:	4a09      	ldr	r2, [pc, #36]	; (8004014 <vPortExitCritical+0x50>)
 8003ff0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003ff2:	4b08      	ldr	r3, [pc, #32]	; (8004014 <vPortExitCritical+0x50>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d105      	bne.n	8004006 <vPortExitCritical+0x42>
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004004:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004006:	bf00      	nop
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	20000010 	.word	0x20000010
	...

08004020 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004020:	f3ef 8009 	mrs	r0, PSP
 8004024:	f3bf 8f6f 	isb	sy
 8004028:	4b15      	ldr	r3, [pc, #84]	; (8004080 <pxCurrentTCBConst>)
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	f01e 0f10 	tst.w	lr, #16
 8004030:	bf08      	it	eq
 8004032:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004036:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800403a:	6010      	str	r0, [r2, #0]
 800403c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004040:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004044:	f380 8811 	msr	BASEPRI, r0
 8004048:	f3bf 8f4f 	dsb	sy
 800404c:	f3bf 8f6f 	isb	sy
 8004050:	f7ff f80a 	bl	8003068 <vTaskSwitchContext>
 8004054:	f04f 0000 	mov.w	r0, #0
 8004058:	f380 8811 	msr	BASEPRI, r0
 800405c:	bc09      	pop	{r0, r3}
 800405e:	6819      	ldr	r1, [r3, #0]
 8004060:	6808      	ldr	r0, [r1, #0]
 8004062:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004066:	f01e 0f10 	tst.w	lr, #16
 800406a:	bf08      	it	eq
 800406c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004070:	f380 8809 	msr	PSP, r0
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	f3af 8000 	nop.w

08004080 <pxCurrentTCBConst>:
 8004080:	20000128 	.word	0x20000128
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004084:	bf00      	nop
 8004086:	bf00      	nop

08004088 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
        __asm volatile
 800408e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004092:	f383 8811 	msr	BASEPRI, r3
 8004096:	f3bf 8f6f 	isb	sy
 800409a:	f3bf 8f4f 	dsb	sy
 800409e:	607b      	str	r3, [r7, #4]
    }
 80040a0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80040a2:	f002 fb85 	bl	80067b0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80040a6:	f7fe fee7 	bl	8002e78 <xTaskIncrementTick>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d006      	beq.n	80040be <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80040b0:	f002 fbdc 	bl	800686c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80040b4:	4b08      	ldr	r3, [pc, #32]	; (80040d8 <SysTick_Handler+0x50>)
 80040b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	e001      	b.n	80040c2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80040be:	f002 fbb9 	bl	8006834 <SEGGER_SYSVIEW_RecordExitISR>
 80040c2:	2300      	movs	r3, #0
 80040c4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	f383 8811 	msr	BASEPRI, r3
    }
 80040cc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80040ce:	bf00      	nop
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	e000ed04 	.word	0xe000ed04

080040dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80040dc:	b480      	push	{r7}
 80040de:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80040e0:	4b0b      	ldr	r3, [pc, #44]	; (8004110 <vPortSetupTimerInterrupt+0x34>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80040e6:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <vPortSetupTimerInterrupt+0x38>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80040ec:	4b0a      	ldr	r3, [pc, #40]	; (8004118 <vPortSetupTimerInterrupt+0x3c>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a0a      	ldr	r2, [pc, #40]	; (800411c <vPortSetupTimerInterrupt+0x40>)
 80040f2:	fba2 2303 	umull	r2, r3, r2, r3
 80040f6:	099b      	lsrs	r3, r3, #6
 80040f8:	4a09      	ldr	r2, [pc, #36]	; (8004120 <vPortSetupTimerInterrupt+0x44>)
 80040fa:	3b01      	subs	r3, #1
 80040fc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80040fe:	4b04      	ldr	r3, [pc, #16]	; (8004110 <vPortSetupTimerInterrupt+0x34>)
 8004100:	2207      	movs	r2, #7
 8004102:	601a      	str	r2, [r3, #0]
}
 8004104:	bf00      	nop
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	e000e010 	.word	0xe000e010
 8004114:	e000e018 	.word	0xe000e018
 8004118:	20000000 	.word	0x20000000
 800411c:	10624dd3 	.word	0x10624dd3
 8004120:	e000e014 	.word	0xe000e014

08004124 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004124:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004134 <vPortEnableVFP+0x10>
 8004128:	6801      	ldr	r1, [r0, #0]
 800412a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800412e:	6001      	str	r1, [r0, #0]
 8004130:	4770      	bx	lr
 8004132:	0000      	.short	0x0000
 8004134:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004138:	bf00      	nop
 800413a:	bf00      	nop

0800413c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004142:	f3ef 8305 	mrs	r3, IPSR
 8004146:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2b0f      	cmp	r3, #15
 800414c:	d914      	bls.n	8004178 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800414e:	4a17      	ldr	r2, [pc, #92]	; (80041ac <vPortValidateInterruptPriority+0x70>)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	4413      	add	r3, r2
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004158:	4b15      	ldr	r3, [pc, #84]	; (80041b0 <vPortValidateInterruptPriority+0x74>)
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	7afa      	ldrb	r2, [r7, #11]
 800415e:	429a      	cmp	r2, r3
 8004160:	d20a      	bcs.n	8004178 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004166:	f383 8811 	msr	BASEPRI, r3
 800416a:	f3bf 8f6f 	isb	sy
 800416e:	f3bf 8f4f 	dsb	sy
 8004172:	607b      	str	r3, [r7, #4]
    }
 8004174:	bf00      	nop
 8004176:	e7fe      	b.n	8004176 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004178:	4b0e      	ldr	r3, [pc, #56]	; (80041b4 <vPortValidateInterruptPriority+0x78>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004180:	4b0d      	ldr	r3, [pc, #52]	; (80041b8 <vPortValidateInterruptPriority+0x7c>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	429a      	cmp	r2, r3
 8004186:	d90a      	bls.n	800419e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418c:	f383 8811 	msr	BASEPRI, r3
 8004190:	f3bf 8f6f 	isb	sy
 8004194:	f3bf 8f4f 	dsb	sy
 8004198:	603b      	str	r3, [r7, #0]
    }
 800419a:	bf00      	nop
 800419c:	e7fe      	b.n	800419c <vPortValidateInterruptPriority+0x60>
    }
 800419e:	bf00      	nop
 80041a0:	3714      	adds	r7, #20
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	e000e3f0 	.word	0xe000e3f0
 80041b0:	20000250 	.word	0x20000250
 80041b4:	e000ed0c 	.word	0xe000ed0c
 80041b8:	20000254 	.word	0x20000254

080041bc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b08a      	sub	sp, #40	; 0x28
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80041c4:	2300      	movs	r3, #0
 80041c6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80041c8:	f7fe fd34 	bl	8002c34 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80041cc:	4b65      	ldr	r3, [pc, #404]	; (8004364 <pvPortMalloc+0x1a8>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d101      	bne.n	80041d8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80041d4:	f000 f934 	bl	8004440 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80041d8:	4b63      	ldr	r3, [pc, #396]	; (8004368 <pvPortMalloc+0x1ac>)
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4013      	ands	r3, r2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f040 80a7 	bne.w	8004334 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d02d      	beq.n	8004248 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80041ec:	2208      	movs	r2, #8
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d227      	bcs.n	8004248 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80041f8:	2208      	movs	r2, #8
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4413      	add	r3, r2
 80041fe:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f003 0307 	and.w	r3, r3, #7
 8004206:	2b00      	cmp	r3, #0
 8004208:	d021      	beq.n	800424e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f023 0307 	bic.w	r3, r3, #7
 8004210:	3308      	adds	r3, #8
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	429a      	cmp	r2, r3
 8004216:	d214      	bcs.n	8004242 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f023 0307 	bic.w	r3, r3, #7
 800421e:	3308      	adds	r3, #8
 8004220:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f003 0307 	and.w	r3, r3, #7
 8004228:	2b00      	cmp	r3, #0
 800422a:	d010      	beq.n	800424e <pvPortMalloc+0x92>
        __asm volatile
 800422c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004230:	f383 8811 	msr	BASEPRI, r3
 8004234:	f3bf 8f6f 	isb	sy
 8004238:	f3bf 8f4f 	dsb	sy
 800423c:	617b      	str	r3, [r7, #20]
    }
 800423e:	bf00      	nop
 8004240:	e7fe      	b.n	8004240 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004242:	2300      	movs	r3, #0
 8004244:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004246:	e002      	b.n	800424e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8004248:	2300      	movs	r3, #0
 800424a:	607b      	str	r3, [r7, #4]
 800424c:	e000      	b.n	8004250 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800424e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d06e      	beq.n	8004334 <pvPortMalloc+0x178>
 8004256:	4b45      	ldr	r3, [pc, #276]	; (800436c <pvPortMalloc+0x1b0>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	429a      	cmp	r2, r3
 800425e:	d869      	bhi.n	8004334 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004260:	4b43      	ldr	r3, [pc, #268]	; (8004370 <pvPortMalloc+0x1b4>)
 8004262:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004264:	4b42      	ldr	r3, [pc, #264]	; (8004370 <pvPortMalloc+0x1b4>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800426a:	e004      	b.n	8004276 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800426c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	429a      	cmp	r2, r3
 800427e:	d903      	bls.n	8004288 <pvPortMalloc+0xcc>
 8004280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1f1      	bne.n	800426c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004288:	4b36      	ldr	r3, [pc, #216]	; (8004364 <pvPortMalloc+0x1a8>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800428e:	429a      	cmp	r2, r3
 8004290:	d050      	beq.n	8004334 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004292:	6a3b      	ldr	r3, [r7, #32]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2208      	movs	r2, #8
 8004298:	4413      	add	r3, r2
 800429a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800429c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80042a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	1ad2      	subs	r2, r2, r3
 80042ac:	2308      	movs	r3, #8
 80042ae:	005b      	lsls	r3, r3, #1
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d91f      	bls.n	80042f4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80042b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4413      	add	r3, r2
 80042ba:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	f003 0307 	and.w	r3, r3, #7
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00a      	beq.n	80042dc <pvPortMalloc+0x120>
        __asm volatile
 80042c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ca:	f383 8811 	msr	BASEPRI, r3
 80042ce:	f3bf 8f6f 	isb	sy
 80042d2:	f3bf 8f4f 	dsb	sy
 80042d6:	613b      	str	r3, [r7, #16]
    }
 80042d8:	bf00      	nop
 80042da:	e7fe      	b.n	80042da <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80042dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	1ad2      	subs	r2, r2, r3
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80042e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80042ee:	69b8      	ldr	r0, [r7, #24]
 80042f0:	f000 f908 	bl	8004504 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80042f4:	4b1d      	ldr	r3, [pc, #116]	; (800436c <pvPortMalloc+0x1b0>)
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	4a1b      	ldr	r2, [pc, #108]	; (800436c <pvPortMalloc+0x1b0>)
 8004300:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004302:	4b1a      	ldr	r3, [pc, #104]	; (800436c <pvPortMalloc+0x1b0>)
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	4b1b      	ldr	r3, [pc, #108]	; (8004374 <pvPortMalloc+0x1b8>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	429a      	cmp	r2, r3
 800430c:	d203      	bcs.n	8004316 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800430e:	4b17      	ldr	r3, [pc, #92]	; (800436c <pvPortMalloc+0x1b0>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a18      	ldr	r2, [pc, #96]	; (8004374 <pvPortMalloc+0x1b8>)
 8004314:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	4b13      	ldr	r3, [pc, #76]	; (8004368 <pvPortMalloc+0x1ac>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	431a      	orrs	r2, r3
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004326:	2200      	movs	r2, #0
 8004328:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800432a:	4b13      	ldr	r3, [pc, #76]	; (8004378 <pvPortMalloc+0x1bc>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	3301      	adds	r3, #1
 8004330:	4a11      	ldr	r2, [pc, #68]	; (8004378 <pvPortMalloc+0x1bc>)
 8004332:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004334:	f7fe fc8c 	bl	8002c50 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	f003 0307 	and.w	r3, r3, #7
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00a      	beq.n	8004358 <pvPortMalloc+0x19c>
        __asm volatile
 8004342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004346:	f383 8811 	msr	BASEPRI, r3
 800434a:	f3bf 8f6f 	isb	sy
 800434e:	f3bf 8f4f 	dsb	sy
 8004352:	60fb      	str	r3, [r7, #12]
    }
 8004354:	bf00      	nop
 8004356:	e7fe      	b.n	8004356 <pvPortMalloc+0x19a>
    return pvReturn;
 8004358:	69fb      	ldr	r3, [r7, #28]
}
 800435a:	4618      	mov	r0, r3
 800435c:	3728      	adds	r7, #40	; 0x28
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	20019260 	.word	0x20019260
 8004368:	20019274 	.word	0x20019274
 800436c:	20019264 	.word	0x20019264
 8004370:	20019258 	.word	0x20019258
 8004374:	20019268 	.word	0x20019268
 8004378:	2001926c 	.word	0x2001926c

0800437c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d04d      	beq.n	800442a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800438e:	2308      	movs	r3, #8
 8004390:	425b      	negs	r3, r3
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	4413      	add	r3, r2
 8004396:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	4b24      	ldr	r3, [pc, #144]	; (8004434 <vPortFree+0xb8>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4013      	ands	r3, r2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10a      	bne.n	80043c0 <vPortFree+0x44>
        __asm volatile
 80043aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ae:	f383 8811 	msr	BASEPRI, r3
 80043b2:	f3bf 8f6f 	isb	sy
 80043b6:	f3bf 8f4f 	dsb	sy
 80043ba:	60fb      	str	r3, [r7, #12]
    }
 80043bc:	bf00      	nop
 80043be:	e7fe      	b.n	80043be <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00a      	beq.n	80043de <vPortFree+0x62>
        __asm volatile
 80043c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043cc:	f383 8811 	msr	BASEPRI, r3
 80043d0:	f3bf 8f6f 	isb	sy
 80043d4:	f3bf 8f4f 	dsb	sy
 80043d8:	60bb      	str	r3, [r7, #8]
    }
 80043da:	bf00      	nop
 80043dc:	e7fe      	b.n	80043dc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	4b14      	ldr	r3, [pc, #80]	; (8004434 <vPortFree+0xb8>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4013      	ands	r3, r2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d01e      	beq.n	800442a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d11a      	bne.n	800442a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	685a      	ldr	r2, [r3, #4]
 80043f8:	4b0e      	ldr	r3, [pc, #56]	; (8004434 <vPortFree+0xb8>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	43db      	mvns	r3, r3
 80043fe:	401a      	ands	r2, r3
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004404:	f7fe fc16 	bl	8002c34 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	4b0a      	ldr	r3, [pc, #40]	; (8004438 <vPortFree+0xbc>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4413      	add	r3, r2
 8004412:	4a09      	ldr	r2, [pc, #36]	; (8004438 <vPortFree+0xbc>)
 8004414:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004416:	6938      	ldr	r0, [r7, #16]
 8004418:	f000 f874 	bl	8004504 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800441c:	4b07      	ldr	r3, [pc, #28]	; (800443c <vPortFree+0xc0>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	3301      	adds	r3, #1
 8004422:	4a06      	ldr	r2, [pc, #24]	; (800443c <vPortFree+0xc0>)
 8004424:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004426:	f7fe fc13 	bl	8002c50 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800442a:	bf00      	nop
 800442c:	3718      	adds	r7, #24
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	20019274 	.word	0x20019274
 8004438:	20019264 	.word	0x20019264
 800443c:	20019270 	.word	0x20019270

08004440 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004446:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 800444a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800444c:	4b27      	ldr	r3, [pc, #156]	; (80044ec <prvHeapInit+0xac>)
 800444e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f003 0307 	and.w	r3, r3, #7
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00c      	beq.n	8004474 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	3307      	adds	r3, #7
 800445e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f023 0307 	bic.w	r3, r3, #7
 8004466:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	4a1f      	ldr	r2, [pc, #124]	; (80044ec <prvHeapInit+0xac>)
 8004470:	4413      	add	r3, r2
 8004472:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004478:	4a1d      	ldr	r2, [pc, #116]	; (80044f0 <prvHeapInit+0xb0>)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800447e:	4b1c      	ldr	r3, [pc, #112]	; (80044f0 <prvHeapInit+0xb0>)
 8004480:	2200      	movs	r2, #0
 8004482:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	4413      	add	r3, r2
 800448a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800448c:	2208      	movs	r2, #8
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	1a9b      	subs	r3, r3, r2
 8004492:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f023 0307 	bic.w	r3, r3, #7
 800449a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	4a15      	ldr	r2, [pc, #84]	; (80044f4 <prvHeapInit+0xb4>)
 80044a0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80044a2:	4b14      	ldr	r3, [pc, #80]	; (80044f4 <prvHeapInit+0xb4>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2200      	movs	r2, #0
 80044a8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80044aa:	4b12      	ldr	r3, [pc, #72]	; (80044f4 <prvHeapInit+0xb4>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2200      	movs	r2, #0
 80044b0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	1ad2      	subs	r2, r2, r3
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80044c0:	4b0c      	ldr	r3, [pc, #48]	; (80044f4 <prvHeapInit+0xb4>)
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	4a0a      	ldr	r2, [pc, #40]	; (80044f8 <prvHeapInit+0xb8>)
 80044ce:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	4a09      	ldr	r2, [pc, #36]	; (80044fc <prvHeapInit+0xbc>)
 80044d6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80044d8:	4b09      	ldr	r3, [pc, #36]	; (8004500 <prvHeapInit+0xc0>)
 80044da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80044de:	601a      	str	r2, [r3, #0]
}
 80044e0:	bf00      	nop
 80044e2:	3714      	adds	r7, #20
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr
 80044ec:	20000258 	.word	0x20000258
 80044f0:	20019258 	.word	0x20019258
 80044f4:	20019260 	.word	0x20019260
 80044f8:	20019268 	.word	0x20019268
 80044fc:	20019264 	.word	0x20019264
 8004500:	20019274 	.word	0x20019274

08004504 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800450c:	4b28      	ldr	r3, [pc, #160]	; (80045b0 <prvInsertBlockIntoFreeList+0xac>)
 800450e:	60fb      	str	r3, [r7, #12]
 8004510:	e002      	b.n	8004518 <prvInsertBlockIntoFreeList+0x14>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	60fb      	str	r3, [r7, #12]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	429a      	cmp	r2, r3
 8004520:	d8f7      	bhi.n	8004512 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	4413      	add	r3, r2
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	429a      	cmp	r2, r3
 8004532:	d108      	bne.n	8004546 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	441a      	add	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	68ba      	ldr	r2, [r7, #8]
 8004550:	441a      	add	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	429a      	cmp	r2, r3
 8004558:	d118      	bne.n	800458c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	4b15      	ldr	r3, [pc, #84]	; (80045b4 <prvInsertBlockIntoFreeList+0xb0>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	429a      	cmp	r2, r3
 8004564:	d00d      	beq.n	8004582 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	441a      	add	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	601a      	str	r2, [r3, #0]
 8004580:	e008      	b.n	8004594 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004582:	4b0c      	ldr	r3, [pc, #48]	; (80045b4 <prvInsertBlockIntoFreeList+0xb0>)
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	601a      	str	r2, [r3, #0]
 800458a:	e003      	b.n	8004594 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	429a      	cmp	r2, r3
 800459a:	d002      	beq.n	80045a2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80045a2:	bf00      	nop
 80045a4:	3714      	adds	r7, #20
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	20019258 	.word	0x20019258
 80045b4:	20019260 	.word	0x20019260

080045b8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80045b8:	b580      	push	{r7, lr}
 80045ba:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80045bc:	4803      	ldr	r0, [pc, #12]	; (80045cc <_cbSendSystemDesc+0x14>)
 80045be:	f002 f8a1 	bl	8006704 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80045c2:	4803      	ldr	r0, [pc, #12]	; (80045d0 <_cbSendSystemDesc+0x18>)
 80045c4:	f002 f89e 	bl	8006704 <SEGGER_SYSVIEW_SendSysDesc>
}
 80045c8:	bf00      	nop
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	08007848 	.word	0x08007848
 80045d0:	0800788c 	.word	0x0800788c

080045d4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80045d4:	b580      	push	{r7, lr}
 80045d6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80045d8:	4b06      	ldr	r3, [pc, #24]	; (80045f4 <SEGGER_SYSVIEW_Conf+0x20>)
 80045da:	6818      	ldr	r0, [r3, #0]
 80045dc:	4b05      	ldr	r3, [pc, #20]	; (80045f4 <SEGGER_SYSVIEW_Conf+0x20>)
 80045de:	6819      	ldr	r1, [r3, #0]
 80045e0:	4b05      	ldr	r3, [pc, #20]	; (80045f8 <SEGGER_SYSVIEW_Conf+0x24>)
 80045e2:	4a06      	ldr	r2, [pc, #24]	; (80045fc <SEGGER_SYSVIEW_Conf+0x28>)
 80045e4:	f001 fc0a 	bl	8005dfc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80045e8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80045ec:	f001 fc4a 	bl	8005e84 <SEGGER_SYSVIEW_SetRAMBase>
}
 80045f0:	bf00      	nop
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	20000000 	.word	0x20000000
 80045f8:	080045b9 	.word	0x080045b9
 80045fc:	0800792c 	.word	0x0800792c

08004600 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004602:	b085      	sub	sp, #20
 8004604:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004606:	2300      	movs	r3, #0
 8004608:	607b      	str	r3, [r7, #4]
 800460a:	e033      	b.n	8004674 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800460c:	491e      	ldr	r1, [pc, #120]	; (8004688 <_cbSendTaskList+0x88>)
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	4613      	mov	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4413      	add	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	440b      	add	r3, r1
 800461a:	6818      	ldr	r0, [r3, #0]
 800461c:	491a      	ldr	r1, [pc, #104]	; (8004688 <_cbSendTaskList+0x88>)
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	4613      	mov	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	440b      	add	r3, r1
 800462a:	3304      	adds	r3, #4
 800462c:	6819      	ldr	r1, [r3, #0]
 800462e:	4c16      	ldr	r4, [pc, #88]	; (8004688 <_cbSendTaskList+0x88>)
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	4613      	mov	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4413      	add	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4423      	add	r3, r4
 800463c:	3308      	adds	r3, #8
 800463e:	681c      	ldr	r4, [r3, #0]
 8004640:	4d11      	ldr	r5, [pc, #68]	; (8004688 <_cbSendTaskList+0x88>)
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	4613      	mov	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4413      	add	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	442b      	add	r3, r5
 800464e:	330c      	adds	r3, #12
 8004650:	681d      	ldr	r5, [r3, #0]
 8004652:	4e0d      	ldr	r6, [pc, #52]	; (8004688 <_cbSendTaskList+0x88>)
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	4613      	mov	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	4413      	add	r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	4433      	add	r3, r6
 8004660:	3310      	adds	r3, #16
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	462b      	mov	r3, r5
 8004668:	4622      	mov	r2, r4
 800466a:	f000 f8bd 	bl	80047e8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	3301      	adds	r3, #1
 8004672:	607b      	str	r3, [r7, #4]
 8004674:	4b05      	ldr	r3, [pc, #20]	; (800468c <_cbSendTaskList+0x8c>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	429a      	cmp	r2, r3
 800467c:	d3c6      	bcc.n	800460c <_cbSendTaskList+0xc>
  }
}
 800467e:	bf00      	nop
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004688:	20019278 	.word	0x20019278
 800468c:	20019318 	.word	0x20019318

08004690 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004690:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004694:	b082      	sub	sp, #8
 8004696:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004698:	f7fe fbdc 	bl	8002e54 <xTaskGetTickCountFromISR>
 800469c:	4603      	mov	r3, r0
 800469e:	2200      	movs	r2, #0
 80046a0:	469a      	mov	sl, r3
 80046a2:	4693      	mov	fp, r2
 80046a4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80046a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80046ac:	4602      	mov	r2, r0
 80046ae:	460b      	mov	r3, r1
 80046b0:	f04f 0a00 	mov.w	sl, #0
 80046b4:	f04f 0b00 	mov.w	fp, #0
 80046b8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80046bc:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80046c0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80046c4:	4652      	mov	r2, sl
 80046c6:	465b      	mov	r3, fp
 80046c8:	1a14      	subs	r4, r2, r0
 80046ca:	eb63 0501 	sbc.w	r5, r3, r1
 80046ce:	f04f 0200 	mov.w	r2, #0
 80046d2:	f04f 0300 	mov.w	r3, #0
 80046d6:	00ab      	lsls	r3, r5, #2
 80046d8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80046dc:	00a2      	lsls	r2, r4, #2
 80046de:	4614      	mov	r4, r2
 80046e0:	461d      	mov	r5, r3
 80046e2:	eb14 0800 	adds.w	r8, r4, r0
 80046e6:	eb45 0901 	adc.w	r9, r5, r1
 80046ea:	f04f 0200 	mov.w	r2, #0
 80046ee:	f04f 0300 	mov.w	r3, #0
 80046f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046fe:	4690      	mov	r8, r2
 8004700:	4699      	mov	r9, r3
 8004702:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004706:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800470a:	4610      	mov	r0, r2
 800470c:	4619      	mov	r1, r3
 800470e:	3708      	adds	r7, #8
 8004710:	46bd      	mov	sp, r7
 8004712:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004718 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af02      	add	r7, sp, #8
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
 8004724:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004726:	2205      	movs	r2, #5
 8004728:	492b      	ldr	r1, [pc, #172]	; (80047d8 <SYSVIEW_AddTask+0xc0>)
 800472a:	68b8      	ldr	r0, [r7, #8]
 800472c:	f002 fbaa 	bl	8006e84 <memcmp>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d04b      	beq.n	80047ce <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004736:	4b29      	ldr	r3, [pc, #164]	; (80047dc <SYSVIEW_AddTask+0xc4>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2b07      	cmp	r3, #7
 800473c:	d903      	bls.n	8004746 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800473e:	4828      	ldr	r0, [pc, #160]	; (80047e0 <SYSVIEW_AddTask+0xc8>)
 8004740:	f002 faf2 	bl	8006d28 <SEGGER_SYSVIEW_Warn>
    return;
 8004744:	e044      	b.n	80047d0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004746:	4b25      	ldr	r3, [pc, #148]	; (80047dc <SYSVIEW_AddTask+0xc4>)
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	4926      	ldr	r1, [pc, #152]	; (80047e4 <SYSVIEW_AddTask+0xcc>)
 800474c:	4613      	mov	r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	4413      	add	r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	440b      	add	r3, r1
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800475a:	4b20      	ldr	r3, [pc, #128]	; (80047dc <SYSVIEW_AddTask+0xc4>)
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	4921      	ldr	r1, [pc, #132]	; (80047e4 <SYSVIEW_AddTask+0xcc>)
 8004760:	4613      	mov	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4413      	add	r3, r2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	440b      	add	r3, r1
 800476a:	3304      	adds	r3, #4
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004770:	4b1a      	ldr	r3, [pc, #104]	; (80047dc <SYSVIEW_AddTask+0xc4>)
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	491b      	ldr	r1, [pc, #108]	; (80047e4 <SYSVIEW_AddTask+0xcc>)
 8004776:	4613      	mov	r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	4413      	add	r3, r2
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	440b      	add	r3, r1
 8004780:	3308      	adds	r3, #8
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004786:	4b15      	ldr	r3, [pc, #84]	; (80047dc <SYSVIEW_AddTask+0xc4>)
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	4916      	ldr	r1, [pc, #88]	; (80047e4 <SYSVIEW_AddTask+0xcc>)
 800478c:	4613      	mov	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	4413      	add	r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	440b      	add	r3, r1
 8004796:	330c      	adds	r3, #12
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800479c:	4b0f      	ldr	r3, [pc, #60]	; (80047dc <SYSVIEW_AddTask+0xc4>)
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	4910      	ldr	r1, [pc, #64]	; (80047e4 <SYSVIEW_AddTask+0xcc>)
 80047a2:	4613      	mov	r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	4413      	add	r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	440b      	add	r3, r1
 80047ac:	3310      	adds	r3, #16
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80047b2:	4b0a      	ldr	r3, [pc, #40]	; (80047dc <SYSVIEW_AddTask+0xc4>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	3301      	adds	r3, #1
 80047b8:	4a08      	ldr	r2, [pc, #32]	; (80047dc <SYSVIEW_AddTask+0xc4>)
 80047ba:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	9300      	str	r3, [sp, #0]
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	68b9      	ldr	r1, [r7, #8]
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f000 f80e 	bl	80047e8 <SYSVIEW_SendTaskInfo>
 80047cc:	e000      	b.n	80047d0 <SYSVIEW_AddTask+0xb8>
    return;
 80047ce:	bf00      	nop

}
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	0800789c 	.word	0x0800789c
 80047dc:	20019318 	.word	0x20019318
 80047e0:	080078a4 	.word	0x080078a4
 80047e4:	20019278 	.word	0x20019278

080047e8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b08a      	sub	sp, #40	; 0x28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
 80047f4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80047f6:	f107 0314 	add.w	r3, r7, #20
 80047fa:	2214      	movs	r2, #20
 80047fc:	2100      	movs	r1, #0
 80047fe:	4618      	mov	r0, r3
 8004800:	f002 fb5e 	bl	8006ec0 <memset>
  TaskInfo.TaskID     = TaskID;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004816:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004818:	f107 0314 	add.w	r3, r7, #20
 800481c:	4618      	mov	r0, r3
 800481e:	f001 fe79 	bl	8006514 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004822:	bf00      	nop
 8004824:	3728      	adds	r7, #40	; 0x28
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
	...

0800482c <__NVIC_EnableIRQ>:
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	4603      	mov	r3, r0
 8004834:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800483a:	2b00      	cmp	r3, #0
 800483c:	db0b      	blt.n	8004856 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800483e:	79fb      	ldrb	r3, [r7, #7]
 8004840:	f003 021f 	and.w	r2, r3, #31
 8004844:	4907      	ldr	r1, [pc, #28]	; (8004864 <__NVIC_EnableIRQ+0x38>)
 8004846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800484a:	095b      	lsrs	r3, r3, #5
 800484c:	2001      	movs	r0, #1
 800484e:	fa00 f202 	lsl.w	r2, r0, r2
 8004852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004856:	bf00      	nop
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	e000e100 	.word	0xe000e100

08004868 <__NVIC_SetPriority>:
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	4603      	mov	r3, r0
 8004870:	6039      	str	r1, [r7, #0]
 8004872:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004878:	2b00      	cmp	r3, #0
 800487a:	db0a      	blt.n	8004892 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	b2da      	uxtb	r2, r3
 8004880:	490c      	ldr	r1, [pc, #48]	; (80048b4 <__NVIC_SetPriority+0x4c>)
 8004882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004886:	0112      	lsls	r2, r2, #4
 8004888:	b2d2      	uxtb	r2, r2
 800488a:	440b      	add	r3, r1
 800488c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004890:	e00a      	b.n	80048a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	b2da      	uxtb	r2, r3
 8004896:	4908      	ldr	r1, [pc, #32]	; (80048b8 <__NVIC_SetPriority+0x50>)
 8004898:	79fb      	ldrb	r3, [r7, #7]
 800489a:	f003 030f 	and.w	r3, r3, #15
 800489e:	3b04      	subs	r3, #4
 80048a0:	0112      	lsls	r2, r2, #4
 80048a2:	b2d2      	uxtb	r2, r2
 80048a4:	440b      	add	r3, r1
 80048a6:	761a      	strb	r2, [r3, #24]
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr
 80048b4:	e000e100 	.word	0xe000e100
 80048b8:	e000ed00 	.word	0xe000ed00

080048bc <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80048c2:	f002 fa8d 	bl	8006de0 <SEGGER_SYSVIEW_IsStarted>
 80048c6:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80048ce:	f001 fca5 	bl	800621c <SEGGER_SYSVIEW_Start>
  }
}
 80048d2:	bf00      	nop
 80048d4:	3708      	adds	r7, #8
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
	...

080048dc <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	4603      	mov	r3, r0
 80048e4:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80048e6:	4b0c      	ldr	r3, [pc, #48]	; (8004918 <_cbOnUARTRx+0x3c>)
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	2b03      	cmp	r3, #3
 80048ec:	d806      	bhi.n	80048fc <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80048ee:	4b0a      	ldr	r3, [pc, #40]	; (8004918 <_cbOnUARTRx+0x3c>)
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	3301      	adds	r3, #1
 80048f4:	b2da      	uxtb	r2, r3
 80048f6:	4b08      	ldr	r3, [pc, #32]	; (8004918 <_cbOnUARTRx+0x3c>)
 80048f8:	701a      	strb	r2, [r3, #0]
    goto Done;
 80048fa:	e009      	b.n	8004910 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80048fc:	f7ff ffde 	bl	80048bc <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8004900:	4b05      	ldr	r3, [pc, #20]	; (8004918 <_cbOnUARTRx+0x3c>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	4618      	mov	r0, r3
 8004906:	1dfb      	adds	r3, r7, #7
 8004908:	2201      	movs	r2, #1
 800490a:	4619      	mov	r1, r3
 800490c:	f000 fb9a 	bl	8005044 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8004910:	bf00      	nop
}
 8004912:	3708      	adds	r7, #8
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	20000014 	.word	0x20000014

0800491c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8004924:	4b14      	ldr	r3, [pc, #80]	; (8004978 <_cbOnUARTTx+0x5c>)
 8004926:	785b      	ldrb	r3, [r3, #1]
 8004928:	2b03      	cmp	r3, #3
 800492a:	d80f      	bhi.n	800494c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 800492c:	4b12      	ldr	r3, [pc, #72]	; (8004978 <_cbOnUARTTx+0x5c>)
 800492e:	785b      	ldrb	r3, [r3, #1]
 8004930:	461a      	mov	r2, r3
 8004932:	4b12      	ldr	r3, [pc, #72]	; (800497c <_cbOnUARTTx+0x60>)
 8004934:	5c9a      	ldrb	r2, [r3, r2]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 800493a:	4b0f      	ldr	r3, [pc, #60]	; (8004978 <_cbOnUARTTx+0x5c>)
 800493c:	785b      	ldrb	r3, [r3, #1]
 800493e:	3301      	adds	r3, #1
 8004940:	b2da      	uxtb	r2, r3
 8004942:	4b0d      	ldr	r3, [pc, #52]	; (8004978 <_cbOnUARTTx+0x5c>)
 8004944:	705a      	strb	r2, [r3, #1]
    r = 1;
 8004946:	2301      	movs	r3, #1
 8004948:	60fb      	str	r3, [r7, #12]
    goto Done;
 800494a:	e00f      	b.n	800496c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 800494c:	4b0a      	ldr	r3, [pc, #40]	; (8004978 <_cbOnUARTTx+0x5c>)
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	6879      	ldr	r1, [r7, #4]
 8004954:	4618      	mov	r0, r3
 8004956:	f000 fa19 	bl	8004d8c <SEGGER_RTT_ReadUpBufferNoLock>
 800495a:	4603      	mov	r3, r0
 800495c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2b00      	cmp	r3, #0
 8004962:	da02      	bge.n	800496a <_cbOnUARTTx+0x4e>
    r = 0;
 8004964:	2300      	movs	r3, #0
 8004966:	60fb      	str	r3, [r7, #12]
 8004968:	e000      	b.n	800496c <_cbOnUARTTx+0x50>
  }
Done:
 800496a:	bf00      	nop
  return r;
 800496c:	68fb      	ldr	r3, [r7, #12]
}
 800496e:	4618      	mov	r0, r3
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	20000014 	.word	0x20000014
 800497c:	08007934 	.word	0x08007934

08004980 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004988:	4a04      	ldr	r2, [pc, #16]	; (800499c <SEGGER_UART_init+0x1c>)
 800498a:	4905      	ldr	r1, [pc, #20]	; (80049a0 <SEGGER_UART_init+0x20>)
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 f863 	bl	8004a58 <HIF_UART_Init>
}
 8004992:	bf00      	nop
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	080048dd 	.word	0x080048dd
 80049a0:	0800491d 	.word	0x0800491d

080049a4 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80049aa:	4b1e      	ldr	r3, [pc, #120]	; (8004a24 <USART2_IRQHandler+0x80>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f003 0320 	and.w	r3, r3, #32
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d011      	beq.n	80049de <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80049ba:	4b1b      	ldr	r3, [pc, #108]	; (8004a28 <USART2_IRQHandler+0x84>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f003 030b 	and.w	r3, r3, #11
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d108      	bne.n	80049de <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80049cc:	4b17      	ldr	r3, [pc, #92]	; (8004a2c <USART2_IRQHandler+0x88>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d004      	beq.n	80049de <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 80049d4:	4b15      	ldr	r3, [pc, #84]	; (8004a2c <USART2_IRQHandler+0x88>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	79fa      	ldrb	r2, [r7, #7]
 80049da:	4610      	mov	r0, r2
 80049dc:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d01a      	beq.n	8004a1e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80049e8:	4b11      	ldr	r3, [pc, #68]	; (8004a30 <USART2_IRQHandler+0x8c>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d015      	beq.n	8004a1c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80049f0:	4b0f      	ldr	r3, [pc, #60]	; (8004a30 <USART2_IRQHandler+0x8c>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	1dfa      	adds	r2, r7, #7
 80049f6:	4610      	mov	r0, r2
 80049f8:	4798      	blx	r3
 80049fa:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d106      	bne.n	8004a10 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004a02:	4b0c      	ldr	r3, [pc, #48]	; (8004a34 <USART2_IRQHandler+0x90>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a0b      	ldr	r2, [pc, #44]	; (8004a34 <USART2_IRQHandler+0x90>)
 8004a08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a0c:	6013      	str	r3, [r2, #0]
 8004a0e:	e006      	b.n	8004a1e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004a10:	4b04      	ldr	r3, [pc, #16]	; (8004a24 <USART2_IRQHandler+0x80>)
 8004a12:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004a14:	79fa      	ldrb	r2, [r7, #7]
 8004a16:	4b04      	ldr	r3, [pc, #16]	; (8004a28 <USART2_IRQHandler+0x84>)
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	e000      	b.n	8004a1e <USART2_IRQHandler+0x7a>
      return;
 8004a1c:	bf00      	nop
    }
  }
}
 8004a1e:	3710      	adds	r7, #16
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	40004400 	.word	0x40004400
 8004a28:	40004404 	.word	0x40004404
 8004a2c:	2001931c 	.word	0x2001931c
 8004a30:	20019320 	.word	0x20019320
 8004a34:	4000440c 	.word	0x4000440c

08004a38 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004a38:	b480      	push	{r7}
 8004a3a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8004a3c:	4b05      	ldr	r3, [pc, #20]	; (8004a54 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a04      	ldr	r2, [pc, #16]	; (8004a54 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a46:	6013      	str	r3, [r2, #0]
}
 8004a48:	bf00      	nop
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	4000440c 	.word	0x4000440c

08004a58 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8004a64:	4b2e      	ldr	r3, [pc, #184]	; (8004b20 <HIF_UART_Init+0xc8>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a2d      	ldr	r2, [pc, #180]	; (8004b20 <HIF_UART_Init+0xc8>)
 8004a6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a6e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8004a70:	4b2c      	ldr	r3, [pc, #176]	; (8004b24 <HIF_UART_Init+0xcc>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a2b      	ldr	r2, [pc, #172]	; (8004b24 <HIF_UART_Init+0xcc>)
 8004a76:	f043 0301 	orr.w	r3, r3, #1
 8004a7a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8004a7c:	4b2a      	ldr	r3, [pc, #168]	; (8004b28 <HIF_UART_Init+0xd0>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a88:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8004a90:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8004a92:	4a25      	ldr	r2, [pc, #148]	; (8004b28 <HIF_UART_Init+0xd0>)
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8004a98:	4b24      	ldr	r3, [pc, #144]	; (8004b2c <HIF_UART_Init+0xd4>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004aa4:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8004aac:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8004aae:	4a1f      	ldr	r2, [pc, #124]	; (8004b2c <HIF_UART_Init+0xd4>)
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8004ab4:	4b1e      	ldr	r3, [pc, #120]	; (8004b30 <HIF_UART_Init+0xd8>)
 8004ab6:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8004aba:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8004abc:	4b1d      	ldr	r3, [pc, #116]	; (8004b34 <HIF_UART_Init+0xdc>)
 8004abe:	2200      	movs	r2, #0
 8004ac0:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8004ac2:	4b1d      	ldr	r3, [pc, #116]	; (8004b38 <HIF_UART_Init+0xe0>)
 8004ac4:	2280      	movs	r2, #128	; 0x80
 8004ac6:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8004ace:	4a1b      	ldr	r2, [pc, #108]	; (8004b3c <HIF_UART_Init+0xe4>)
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	085b      	lsrs	r3, r3, #1
 8004ade:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ae6:	d302      	bcc.n	8004aee <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8004ae8:	f640 73ff 	movw	r3, #4095	; 0xfff
 8004aec:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d004      	beq.n	8004afe <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	011b      	lsls	r3, r3, #4
 8004af8:	4a11      	ldr	r2, [pc, #68]	; (8004b40 <HIF_UART_Init+0xe8>)
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8004afe:	4a11      	ldr	r2, [pc, #68]	; (8004b44 <HIF_UART_Init+0xec>)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8004b04:	4a10      	ldr	r2, [pc, #64]	; (8004b48 <HIF_UART_Init+0xf0>)
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8004b0a:	2106      	movs	r1, #6
 8004b0c:	2026      	movs	r0, #38	; 0x26
 8004b0e:	f7ff feab 	bl	8004868 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8004b12:	2026      	movs	r0, #38	; 0x26
 8004b14:	f7ff fe8a 	bl	800482c <__NVIC_EnableIRQ>
}
 8004b18:	bf00      	nop
 8004b1a:	3718      	adds	r7, #24
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	40023840 	.word	0x40023840
 8004b24:	40023830 	.word	0x40023830
 8004b28:	40020020 	.word	0x40020020
 8004b2c:	40020000 	.word	0x40020000
 8004b30:	4000440c 	.word	0x4000440c
 8004b34:	40004410 	.word	0x40004410
 8004b38:	40004414 	.word	0x40004414
 8004b3c:	0501bd00 	.word	0x0501bd00
 8004b40:	40004408 	.word	0x40004408
 8004b44:	2001931c 	.word	0x2001931c
 8004b48:	20019320 	.word	0x20019320

08004b4c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004b52:	4b24      	ldr	r3, [pc, #144]	; (8004be4 <_DoInit+0x98>)
 8004b54:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2203      	movs	r2, #3
 8004b5a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2203      	movs	r2, #3
 8004b60:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a20      	ldr	r2, [pc, #128]	; (8004be8 <_DoInit+0x9c>)
 8004b66:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a20      	ldr	r2, [pc, #128]	; (8004bec <_DoInit+0xa0>)
 8004b6c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b74:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a17      	ldr	r2, [pc, #92]	; (8004be8 <_DoInit+0x9c>)
 8004b8c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a17      	ldr	r2, [pc, #92]	; (8004bf0 <_DoInit+0xa4>)
 8004b92:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2210      	movs	r2, #16
 8004b98:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	3307      	adds	r3, #7
 8004bb0:	4a10      	ldr	r2, [pc, #64]	; (8004bf4 <_DoInit+0xa8>)
 8004bb2:	6810      	ldr	r0, [r2, #0]
 8004bb4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004bb6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a0e      	ldr	r2, [pc, #56]	; (8004bf8 <_DoInit+0xac>)
 8004bbe:	6810      	ldr	r0, [r2, #0]
 8004bc0:	6018      	str	r0, [r3, #0]
 8004bc2:	8891      	ldrh	r1, [r2, #4]
 8004bc4:	7992      	ldrb	r2, [r2, #6]
 8004bc6:	8099      	strh	r1, [r3, #4]
 8004bc8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004bca:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2220      	movs	r2, #32
 8004bd2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004bd4:	f3bf 8f5f 	dmb	sy
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr
 8004be4:	20019324 	.word	0x20019324
 8004be8:	080078f4 	.word	0x080078f4
 8004bec:	200193cc 	.word	0x200193cc
 8004bf0:	200197cc 	.word	0x200197cc
 8004bf4:	08007900 	.word	0x08007900
 8004bf8:	08007904 	.word	0x08007904

08004bfc <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b08a      	sub	sp, #40	; 0x28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d905      	bls.n	8004c2c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004c20:	69ba      	ldr	r2, [r7, #24]
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	3b01      	subs	r3, #1
 8004c28:	627b      	str	r3, [r7, #36]	; 0x24
 8004c2a:	e007      	b.n	8004c3c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	689a      	ldr	r2, [r3, #8]
 8004c30:	69b9      	ldr	r1, [r7, #24]
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	1acb      	subs	r3, r1, r3
 8004c36:	4413      	add	r3, r2
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c46:	4293      	cmp	r3, r2
 8004c48:	bf28      	it	cs
 8004c4a:	4613      	movcs	r3, r2
 8004c4c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4293      	cmp	r3, r2
 8004c54:	bf28      	it	cs
 8004c56:	4613      	movcs	r3, r2
 8004c58:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	685a      	ldr	r2, [r3, #4]
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	4413      	add	r3, r2
 8004c62:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c66:	68b9      	ldr	r1, [r7, #8]
 8004c68:	6978      	ldr	r0, [r7, #20]
 8004c6a:	f002 f91b 	bl	8006ea4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004c6e:	6a3a      	ldr	r2, [r7, #32]
 8004c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c72:	4413      	add	r3, r2
 8004c74:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7a:	4413      	add	r3, r2
 8004c7c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004c86:	69fa      	ldr	r2, [r7, #28]
 8004c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8a:	4413      	add	r3, r2
 8004c8c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	69fa      	ldr	r2, [r7, #28]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d101      	bne.n	8004c9c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004c9c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	69fa      	ldr	r2, [r7, #28]
 8004ca4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1b2      	bne.n	8004c12 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004cac:	6a3b      	ldr	r3, [r7, #32]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3728      	adds	r7, #40	; 0x28
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b088      	sub	sp, #32
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	60f8      	str	r0, [r7, #12]
 8004cbe:	60b9      	str	r1, [r7, #8]
 8004cc0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004cd2:	69ba      	ldr	r2, [r7, #24]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d911      	bls.n	8004cfe <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	685a      	ldr	r2, [r3, #4]
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	68b9      	ldr	r1, [r7, #8]
 8004ce8:	6938      	ldr	r0, [r7, #16]
 8004cea:	f002 f8db 	bl	8006ea4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004cee:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004cf2:	69fa      	ldr	r2, [r7, #28]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	441a      	add	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004cfc:	e01f      	b.n	8004d3e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	685a      	ldr	r2, [r3, #4]
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	4413      	add	r3, r2
 8004d0a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	68b9      	ldr	r1, [r7, #8]
 8004d10:	6938      	ldr	r0, [r7, #16]
 8004d12:	f002 f8c7 	bl	8006ea4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	4413      	add	r3, r2
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	6938      	ldr	r0, [r7, #16]
 8004d30:	f002 f8b8 	bl	8006ea4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004d34:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	60da      	str	r2, [r3, #12]
}
 8004d3e:	bf00      	nop
 8004d40:	3720      	adds	r7, #32
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004d46:	b480      	push	{r7}
 8004d48:	b087      	sub	sp, #28
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d808      	bhi.n	8004d74 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	689a      	ldr	r2, [r3, #8]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	1ad2      	subs	r2, r2, r3
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	617b      	str	r3, [r7, #20]
 8004d72:	e004      	b.n	8004d7e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004d7e:	697b      	ldr	r3, [r7, #20]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	371c      	adds	r7, #28
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b08c      	sub	sp, #48	; 0x30
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8004d98:	4b3e      	ldr	r3, [pc, #248]	; (8004e94 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004d9a:	623b      	str	r3, [r7, #32]
 8004d9c:	6a3b      	ldr	r3, [r7, #32]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d101      	bne.n	8004daa <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8004da6:	f7ff fed1 	bl	8004b4c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	1c5a      	adds	r2, r3, #1
 8004dae:	4613      	mov	r3, r2
 8004db0:	005b      	lsls	r3, r3, #1
 8004db2:	4413      	add	r3, r2
 8004db4:	00db      	lsls	r3, r3, #3
 8004db6:	4a37      	ldr	r2, [pc, #220]	; (8004e94 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004db8:	4413      	add	r3, r2
 8004dba:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004dd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d92b      	bls.n	8004e30 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4293      	cmp	r3, r2
 8004de8:	bf28      	it	cs
 8004dea:	4613      	movcs	r3, r2
 8004dec:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df4:	4413      	add	r3, r2
 8004df6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	6939      	ldr	r1, [r7, #16]
 8004dfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004dfe:	f002 f851 	bl	8006ea4 <memcpy>
    NumBytesRead += NumBytesRem;
 8004e02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	4413      	add	r3, r2
 8004e08:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	4413      	add	r3, r2
 8004e10:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004e1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	4413      	add	r3, r2
 8004e20:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d101      	bne.n	8004e30 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004e38:	697a      	ldr	r2, [r7, #20]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	bf28      	it	cs
 8004e40:	4613      	movcs	r3, r2
 8004e42:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d019      	beq.n	8004e7e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	685a      	ldr	r2, [r3, #4]
 8004e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e50:	4413      	add	r3, r2
 8004e52:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004e54:	697a      	ldr	r2, [r7, #20]
 8004e56:	6939      	ldr	r1, [r7, #16]
 8004e58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e5a:	f002 f823 	bl	8006ea4 <memcpy>
    NumBytesRead += NumBytesRem;
 8004e5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	4413      	add	r3, r2
 8004e64:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004e76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8004e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d002      	beq.n	8004e8a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e88:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3730      	adds	r7, #48	; 0x30
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	20019324 	.word	0x20019324

08004e98 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b08c      	sub	sp, #48	; 0x30
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004ea4:	4b3e      	ldr	r3, [pc, #248]	; (8004fa0 <SEGGER_RTT_ReadNoLock+0x108>)
 8004ea6:	623b      	str	r3, [r7, #32]
 8004ea8:	6a3b      	ldr	r3, [r7, #32]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <SEGGER_RTT_ReadNoLock+0x1e>
 8004eb2:	f7ff fe4b 	bl	8004b4c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	005b      	lsls	r3, r3, #1
 8004ebc:	4413      	add	r3, r2
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	3360      	adds	r3, #96	; 0x60
 8004ec2:	4a37      	ldr	r2, [pc, #220]	; (8004fa0 <SEGGER_RTT_ReadNoLock+0x108>)
 8004ec4:	4413      	add	r3, r2
 8004ec6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004edc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d92b      	bls.n	8004f3c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	689a      	ldr	r2, [r3, #8]
 8004ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	bf28      	it	cs
 8004ef6:	4613      	movcs	r3, r2
 8004ef8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f00:	4413      	add	r3, r2
 8004f02:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	6939      	ldr	r1, [r7, #16]
 8004f08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f0a:	f001 ffcb 	bl	8006ea4 <memcpy>
    NumBytesRead += NumBytesRem;
 8004f0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	4413      	add	r3, r2
 8004f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004f26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d101      	bne.n	8004f3c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004f3c:	69ba      	ldr	r2, [r7, #24]
 8004f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	bf28      	it	cs
 8004f4c:	4613      	movcs	r3, r2
 8004f4e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d019      	beq.n	8004f8a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	685a      	ldr	r2, [r3, #4]
 8004f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5c:	4413      	add	r3, r2
 8004f5e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	6939      	ldr	r1, [r7, #16]
 8004f64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f66:	f001 ff9d 	bl	8006ea4 <memcpy>
    NumBytesRead += NumBytesRem;
 8004f6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	4413      	add	r3, r2
 8004f70:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	4413      	add	r3, r2
 8004f78:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004f82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	4413      	add	r3, r2
 8004f88:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d002      	beq.n	8004f96 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f94:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3730      	adds	r7, #48	; 0x30
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	20019324 	.word	0x20019324

08004fa4 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b088      	sub	sp, #32
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	005b      	lsls	r3, r3, #1
 8004fba:	4413      	add	r3, r2
 8004fbc:	00db      	lsls	r3, r3, #3
 8004fbe:	3360      	adds	r3, #96	; 0x60
 8004fc0:	4a1f      	ldr	r2, [pc, #124]	; (8005040 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8004fc2:	4413      	add	r3, r2
 8004fc4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d029      	beq.n	8005022 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d82e      	bhi.n	8005030 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d002      	beq.n	8004fdc <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d013      	beq.n	8005002 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8004fda:	e029      	b.n	8005030 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004fdc:	6978      	ldr	r0, [r7, #20]
 8004fde:	f7ff feb2 	bl	8004d46 <_GetAvailWriteSpace>
 8004fe2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d202      	bcs.n	8004ff2 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8004fec:	2300      	movs	r3, #0
 8004fee:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004ff0:	e021      	b.n	8005036 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	69b9      	ldr	r1, [r7, #24]
 8004ffa:	6978      	ldr	r0, [r7, #20]
 8004ffc:	f7ff fe5b 	bl	8004cb6 <_WriteNoCheck>
    break;
 8005000:	e019      	b.n	8005036 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005002:	6978      	ldr	r0, [r7, #20]
 8005004:	f7ff fe9f 	bl	8004d46 <_GetAvailWriteSpace>
 8005008:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	4293      	cmp	r3, r2
 8005010:	bf28      	it	cs
 8005012:	4613      	movcs	r3, r2
 8005014:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005016:	69fa      	ldr	r2, [r7, #28]
 8005018:	69b9      	ldr	r1, [r7, #24]
 800501a:	6978      	ldr	r0, [r7, #20]
 800501c:	f7ff fe4b 	bl	8004cb6 <_WriteNoCheck>
    break;
 8005020:	e009      	b.n	8005036 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	69b9      	ldr	r1, [r7, #24]
 8005026:	6978      	ldr	r0, [r7, #20]
 8005028:	f7ff fde8 	bl	8004bfc <_WriteBlocking>
 800502c:	61f8      	str	r0, [r7, #28]
    break;
 800502e:	e002      	b.n	8005036 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005030:	2300      	movs	r3, #0
 8005032:	61fb      	str	r3, [r7, #28]
    break;
 8005034:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005036:	69fb      	ldr	r3, [r7, #28]
}
 8005038:	4618      	mov	r0, r3
 800503a:	3720      	adds	r7, #32
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	20019324 	.word	0x20019324

08005044 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005044:	b580      	push	{r7, lr}
 8005046:	b088      	sub	sp, #32
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005050:	4b0e      	ldr	r3, [pc, #56]	; (800508c <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005052:	61fb      	str	r3, [r7, #28]
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <SEGGER_RTT_WriteDownBuffer+0x1e>
 800505e:	f7ff fd75 	bl	8004b4c <_DoInit>
  SEGGER_RTT_LOCK();
 8005062:	f3ef 8311 	mrs	r3, BASEPRI
 8005066:	f04f 0120 	mov.w	r1, #32
 800506a:	f381 8811 	msr	BASEPRI, r1
 800506e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	68b9      	ldr	r1, [r7, #8]
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f7ff ff95 	bl	8004fa4 <SEGGER_RTT_WriteDownBufferNoLock>
 800507a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005082:	697b      	ldr	r3, [r7, #20]
}
 8005084:	4618      	mov	r0, r3
 8005086:	3720      	adds	r7, #32
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	20019324 	.word	0x20019324

08005090 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005090:	b580      	push	{r7, lr}
 8005092:	b088      	sub	sp, #32
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]
 800509c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800509e:	4b3d      	ldr	r3, [pc, #244]	; (8005194 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80050a0:	61bb      	str	r3, [r7, #24]
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d101      	bne.n	80050b0 <SEGGER_RTT_AllocUpBuffer+0x20>
 80050ac:	f7ff fd4e 	bl	8004b4c <_DoInit>
  SEGGER_RTT_LOCK();
 80050b0:	f3ef 8311 	mrs	r3, BASEPRI
 80050b4:	f04f 0120 	mov.w	r1, #32
 80050b8:	f381 8811 	msr	BASEPRI, r1
 80050bc:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80050be:	4b35      	ldr	r3, [pc, #212]	; (8005194 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80050c0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80050c2:	2300      	movs	r3, #0
 80050c4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80050c6:	6939      	ldr	r1, [r7, #16]
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	1c5a      	adds	r2, r3, #1
 80050cc:	4613      	mov	r3, r2
 80050ce:	005b      	lsls	r3, r3, #1
 80050d0:	4413      	add	r3, r2
 80050d2:	00db      	lsls	r3, r3, #3
 80050d4:	440b      	add	r3, r1
 80050d6:	3304      	adds	r3, #4
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d008      	beq.n	80050f0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	3301      	adds	r3, #1
 80050e2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	69fa      	ldr	r2, [r7, #28]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	dbeb      	blt.n	80050c6 <SEGGER_RTT_AllocUpBuffer+0x36>
 80050ee:	e000      	b.n	80050f2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80050f0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	69fa      	ldr	r2, [r7, #28]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	da3f      	bge.n	800517c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80050fc:	6939      	ldr	r1, [r7, #16]
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	1c5a      	adds	r2, r3, #1
 8005102:	4613      	mov	r3, r2
 8005104:	005b      	lsls	r3, r3, #1
 8005106:	4413      	add	r3, r2
 8005108:	00db      	lsls	r3, r3, #3
 800510a:	440b      	add	r3, r1
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005110:	6939      	ldr	r1, [r7, #16]
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	1c5a      	adds	r2, r3, #1
 8005116:	4613      	mov	r3, r2
 8005118:	005b      	lsls	r3, r3, #1
 800511a:	4413      	add	r3, r2
 800511c:	00db      	lsls	r3, r3, #3
 800511e:	440b      	add	r3, r1
 8005120:	3304      	adds	r3, #4
 8005122:	68ba      	ldr	r2, [r7, #8]
 8005124:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005126:	6939      	ldr	r1, [r7, #16]
 8005128:	69fa      	ldr	r2, [r7, #28]
 800512a:	4613      	mov	r3, r2
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	4413      	add	r3, r2
 8005130:	00db      	lsls	r3, r3, #3
 8005132:	440b      	add	r3, r1
 8005134:	3320      	adds	r3, #32
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800513a:	6939      	ldr	r1, [r7, #16]
 800513c:	69fa      	ldr	r2, [r7, #28]
 800513e:	4613      	mov	r3, r2
 8005140:	005b      	lsls	r3, r3, #1
 8005142:	4413      	add	r3, r2
 8005144:	00db      	lsls	r3, r3, #3
 8005146:	440b      	add	r3, r1
 8005148:	3328      	adds	r3, #40	; 0x28
 800514a:	2200      	movs	r2, #0
 800514c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800514e:	6939      	ldr	r1, [r7, #16]
 8005150:	69fa      	ldr	r2, [r7, #28]
 8005152:	4613      	mov	r3, r2
 8005154:	005b      	lsls	r3, r3, #1
 8005156:	4413      	add	r3, r2
 8005158:	00db      	lsls	r3, r3, #3
 800515a:	440b      	add	r3, r1
 800515c:	3324      	adds	r3, #36	; 0x24
 800515e:	2200      	movs	r2, #0
 8005160:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005162:	6939      	ldr	r1, [r7, #16]
 8005164:	69fa      	ldr	r2, [r7, #28]
 8005166:	4613      	mov	r3, r2
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	4413      	add	r3, r2
 800516c:	00db      	lsls	r3, r3, #3
 800516e:	440b      	add	r3, r1
 8005170:	332c      	adds	r3, #44	; 0x2c
 8005172:	683a      	ldr	r2, [r7, #0]
 8005174:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005176:	f3bf 8f5f 	dmb	sy
 800517a:	e002      	b.n	8005182 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800517c:	f04f 33ff 	mov.w	r3, #4294967295
 8005180:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005188:	69fb      	ldr	r3, [r7, #28]
}
 800518a:	4618      	mov	r0, r3
 800518c:	3720      	adds	r7, #32
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	20019324 	.word	0x20019324

08005198 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005198:	b580      	push	{r7, lr}
 800519a:	b088      	sub	sp, #32
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
 80051a4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80051a6:	4b33      	ldr	r3, [pc, #204]	; (8005274 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80051a8:	61bb      	str	r3, [r7, #24]
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d101      	bne.n	80051b8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80051b4:	f7ff fcca 	bl	8004b4c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80051b8:	4b2e      	ldr	r3, [pc, #184]	; (8005274 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80051ba:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	695b      	ldr	r3, [r3, #20]
 80051c0:	461a      	mov	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d24d      	bcs.n	8005264 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 80051c8:	f3ef 8311 	mrs	r3, BASEPRI
 80051cc:	f04f 0120 	mov.w	r1, #32
 80051d0:	f381 8811 	msr	BASEPRI, r1
 80051d4:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d031      	beq.n	8005240 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80051dc:	6979      	ldr	r1, [r7, #20]
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	4613      	mov	r3, r2
 80051e2:	005b      	lsls	r3, r3, #1
 80051e4:	4413      	add	r3, r2
 80051e6:	00db      	lsls	r3, r3, #3
 80051e8:	440b      	add	r3, r1
 80051ea:	3360      	adds	r3, #96	; 0x60
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80051f0:	6979      	ldr	r1, [r7, #20]
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	4613      	mov	r3, r2
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	4413      	add	r3, r2
 80051fa:	00db      	lsls	r3, r3, #3
 80051fc:	440b      	add	r3, r1
 80051fe:	3364      	adds	r3, #100	; 0x64
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005204:	6979      	ldr	r1, [r7, #20]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	4613      	mov	r3, r2
 800520a:	005b      	lsls	r3, r3, #1
 800520c:	4413      	add	r3, r2
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	440b      	add	r3, r1
 8005212:	3368      	adds	r3, #104	; 0x68
 8005214:	683a      	ldr	r2, [r7, #0]
 8005216:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8005218:	6979      	ldr	r1, [r7, #20]
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	4613      	mov	r3, r2
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	4413      	add	r3, r2
 8005222:	00db      	lsls	r3, r3, #3
 8005224:	440b      	add	r3, r1
 8005226:	3370      	adds	r3, #112	; 0x70
 8005228:	2200      	movs	r2, #0
 800522a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 800522c:	6979      	ldr	r1, [r7, #20]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	4613      	mov	r3, r2
 8005232:	005b      	lsls	r3, r3, #1
 8005234:	4413      	add	r3, r2
 8005236:	00db      	lsls	r3, r3, #3
 8005238:	440b      	add	r3, r1
 800523a:	336c      	adds	r3, #108	; 0x6c
 800523c:	2200      	movs	r2, #0
 800523e:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005240:	6979      	ldr	r1, [r7, #20]
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	4613      	mov	r3, r2
 8005246:	005b      	lsls	r3, r3, #1
 8005248:	4413      	add	r3, r2
 800524a:	00db      	lsls	r3, r3, #3
 800524c:	440b      	add	r3, r1
 800524e:	3374      	adds	r3, #116	; 0x74
 8005250:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005252:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005254:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800525e:	2300      	movs	r3, #0
 8005260:	61fb      	str	r3, [r7, #28]
 8005262:	e002      	b.n	800526a <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005264:	f04f 33ff 	mov.w	r3, #4294967295
 8005268:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800526a:	69fb      	ldr	r3, [r7, #28]
}
 800526c:	4618      	mov	r0, r3
 800526e:	3720      	adds	r7, #32
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	20019324 	.word	0x20019324

08005278 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005278:	b480      	push	{r7}
 800527a:	b087      	sub	sp, #28
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005284:	2300      	movs	r3, #0
 8005286:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005288:	e002      	b.n	8005290 <_EncodeStr+0x18>
    Len++;
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	3301      	adds	r3, #1
 800528e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	4413      	add	r3, r2
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d1f6      	bne.n	800528a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d901      	bls.n	80052a8 <_EncodeStr+0x30>
    Len = Limit;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	2bfe      	cmp	r3, #254	; 0xfe
 80052ac:	d806      	bhi.n	80052bc <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	1c5a      	adds	r2, r3, #1
 80052b2:	60fa      	str	r2, [r7, #12]
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	b2d2      	uxtb	r2, r2
 80052b8:	701a      	strb	r2, [r3, #0]
 80052ba:	e011      	b.n	80052e0 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	1c5a      	adds	r2, r3, #1
 80052c0:	60fa      	str	r2, [r7, #12]
 80052c2:	22ff      	movs	r2, #255	; 0xff
 80052c4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	1c5a      	adds	r2, r3, #1
 80052ca:	60fa      	str	r2, [r7, #12]
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	b2d2      	uxtb	r2, r2
 80052d0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	0a19      	lsrs	r1, r3, #8
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	1c5a      	adds	r2, r3, #1
 80052da:	60fa      	str	r2, [r7, #12]
 80052dc:	b2ca      	uxtb	r2, r1
 80052de:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80052e0:	2300      	movs	r3, #0
 80052e2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80052e4:	e00a      	b.n	80052fc <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80052e6:	68ba      	ldr	r2, [r7, #8]
 80052e8:	1c53      	adds	r3, r2, #1
 80052ea:	60bb      	str	r3, [r7, #8]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	1c59      	adds	r1, r3, #1
 80052f0:	60f9      	str	r1, [r7, #12]
 80052f2:	7812      	ldrb	r2, [r2, #0]
 80052f4:	701a      	strb	r2, [r3, #0]
    n++;
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	3301      	adds	r3, #1
 80052fa:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	429a      	cmp	r2, r3
 8005302:	d3f0      	bcc.n	80052e6 <_EncodeStr+0x6e>
  }
  return pPayload;
 8005304:	68fb      	ldr	r3, [r7, #12]
}
 8005306:	4618      	mov	r0, r3
 8005308:	371c      	adds	r7, #28
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr

08005312 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005312:	b480      	push	{r7}
 8005314:	b083      	sub	sp, #12
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	3304      	adds	r3, #4
}
 800531e:	4618      	mov	r0, r3
 8005320:	370c      	adds	r7, #12
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
	...

0800532c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005332:	4b36      	ldr	r3, [pc, #216]	; (800540c <_HandleIncomingPacket+0xe0>)
 8005334:	7e1b      	ldrb	r3, [r3, #24]
 8005336:	4618      	mov	r0, r3
 8005338:	1cfb      	adds	r3, r7, #3
 800533a:	2201      	movs	r2, #1
 800533c:	4619      	mov	r1, r3
 800533e:	f7ff fdab 	bl	8004e98 <SEGGER_RTT_ReadNoLock>
 8005342:	4603      	mov	r3, r0
 8005344:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2b00      	cmp	r3, #0
 800534a:	dd54      	ble.n	80053f6 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 800534c:	78fb      	ldrb	r3, [r7, #3]
 800534e:	2b80      	cmp	r3, #128	; 0x80
 8005350:	d032      	beq.n	80053b8 <_HandleIncomingPacket+0x8c>
 8005352:	2b80      	cmp	r3, #128	; 0x80
 8005354:	dc42      	bgt.n	80053dc <_HandleIncomingPacket+0xb0>
 8005356:	2b07      	cmp	r3, #7
 8005358:	dc16      	bgt.n	8005388 <_HandleIncomingPacket+0x5c>
 800535a:	2b00      	cmp	r3, #0
 800535c:	dd3e      	ble.n	80053dc <_HandleIncomingPacket+0xb0>
 800535e:	3b01      	subs	r3, #1
 8005360:	2b06      	cmp	r3, #6
 8005362:	d83b      	bhi.n	80053dc <_HandleIncomingPacket+0xb0>
 8005364:	a201      	add	r2, pc, #4	; (adr r2, 800536c <_HandleIncomingPacket+0x40>)
 8005366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800536a:	bf00      	nop
 800536c:	0800538f 	.word	0x0800538f
 8005370:	08005395 	.word	0x08005395
 8005374:	0800539b 	.word	0x0800539b
 8005378:	080053a1 	.word	0x080053a1
 800537c:	080053a7 	.word	0x080053a7
 8005380:	080053ad 	.word	0x080053ad
 8005384:	080053b3 	.word	0x080053b3
 8005388:	2b7f      	cmp	r3, #127	; 0x7f
 800538a:	d036      	beq.n	80053fa <_HandleIncomingPacket+0xce>
 800538c:	e026      	b.n	80053dc <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800538e:	f000 ff45 	bl	800621c <SEGGER_SYSVIEW_Start>
      break;
 8005392:	e037      	b.n	8005404 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005394:	f000 fffe 	bl	8006394 <SEGGER_SYSVIEW_Stop>
      break;
 8005398:	e034      	b.n	8005404 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800539a:	f001 f9d7 	bl	800674c <SEGGER_SYSVIEW_RecordSystime>
      break;
 800539e:	e031      	b.n	8005404 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80053a0:	f001 f99c 	bl	80066dc <SEGGER_SYSVIEW_SendTaskList>
      break;
 80053a4:	e02e      	b.n	8005404 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80053a6:	f001 f81b 	bl	80063e0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80053aa:	e02b      	b.n	8005404 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80053ac:	f001 fc6a 	bl	8006c84 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80053b0:	e028      	b.n	8005404 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80053b2:	f001 fc49 	bl	8006c48 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80053b6:	e025      	b.n	8005404 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80053b8:	4b14      	ldr	r3, [pc, #80]	; (800540c <_HandleIncomingPacket+0xe0>)
 80053ba:	7e1b      	ldrb	r3, [r3, #24]
 80053bc:	4618      	mov	r0, r3
 80053be:	1cfb      	adds	r3, r7, #3
 80053c0:	2201      	movs	r2, #1
 80053c2:	4619      	mov	r1, r3
 80053c4:	f7ff fd68 	bl	8004e98 <SEGGER_RTT_ReadNoLock>
 80053c8:	4603      	mov	r3, r0
 80053ca:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	dd15      	ble.n	80053fe <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80053d2:	78fb      	ldrb	r3, [r7, #3]
 80053d4:	4618      	mov	r0, r3
 80053d6:	f001 fbb7 	bl	8006b48 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80053da:	e010      	b.n	80053fe <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80053dc:	78fb      	ldrb	r3, [r7, #3]
 80053de:	b25b      	sxtb	r3, r3
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	da0e      	bge.n	8005402 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80053e4:	4b09      	ldr	r3, [pc, #36]	; (800540c <_HandleIncomingPacket+0xe0>)
 80053e6:	7e1b      	ldrb	r3, [r3, #24]
 80053e8:	4618      	mov	r0, r3
 80053ea:	1cfb      	adds	r3, r7, #3
 80053ec:	2201      	movs	r2, #1
 80053ee:	4619      	mov	r1, r3
 80053f0:	f7ff fd52 	bl	8004e98 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80053f4:	e005      	b.n	8005402 <_HandleIncomingPacket+0xd6>
    }
  }
 80053f6:	bf00      	nop
 80053f8:	e004      	b.n	8005404 <_HandleIncomingPacket+0xd8>
      break;
 80053fa:	bf00      	nop
 80053fc:	e002      	b.n	8005404 <_HandleIncomingPacket+0xd8>
      break;
 80053fe:	bf00      	nop
 8005400:	e000      	b.n	8005404 <_HandleIncomingPacket+0xd8>
      break;
 8005402:	bf00      	nop
}
 8005404:	bf00      	nop
 8005406:	3708      	adds	r7, #8
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	2001a7e4 	.word	0x2001a7e4

08005410 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005410:	b580      	push	{r7, lr}
 8005412:	b08c      	sub	sp, #48	; 0x30
 8005414:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005416:	2301      	movs	r3, #1
 8005418:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800541a:	1d3b      	adds	r3, r7, #4
 800541c:	3301      	adds	r3, #1
 800541e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005424:	4b32      	ldr	r3, [pc, #200]	; (80054f0 <_TrySendOverflowPacket+0xe0>)
 8005426:	695b      	ldr	r3, [r3, #20]
 8005428:	62bb      	str	r3, [r7, #40]	; 0x28
 800542a:	e00b      	b.n	8005444 <_TrySendOverflowPacket+0x34>
 800542c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542e:	b2da      	uxtb	r2, r3
 8005430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005432:	1c59      	adds	r1, r3, #1
 8005434:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005436:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800543a:	b2d2      	uxtb	r2, r2
 800543c:	701a      	strb	r2, [r3, #0]
 800543e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005440:	09db      	lsrs	r3, r3, #7
 8005442:	62bb      	str	r3, [r7, #40]	; 0x28
 8005444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005446:	2b7f      	cmp	r3, #127	; 0x7f
 8005448:	d8f0      	bhi.n	800542c <_TrySendOverflowPacket+0x1c>
 800544a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800544c:	1c5a      	adds	r2, r3, #1
 800544e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005450:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005452:	b2d2      	uxtb	r2, r2
 8005454:	701a      	strb	r2, [r3, #0]
 8005456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005458:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800545a:	4b26      	ldr	r3, [pc, #152]	; (80054f4 <_TrySendOverflowPacket+0xe4>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005460:	4b23      	ldr	r3, [pc, #140]	; (80054f0 <_TrySendOverflowPacket+0xe0>)
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	69ba      	ldr	r2, [r7, #24]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	627b      	str	r3, [r7, #36]	; 0x24
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	623b      	str	r3, [r7, #32]
 8005472:	e00b      	b.n	800548c <_TrySendOverflowPacket+0x7c>
 8005474:	6a3b      	ldr	r3, [r7, #32]
 8005476:	b2da      	uxtb	r2, r3
 8005478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547a:	1c59      	adds	r1, r3, #1
 800547c:	6279      	str	r1, [r7, #36]	; 0x24
 800547e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005482:	b2d2      	uxtb	r2, r2
 8005484:	701a      	strb	r2, [r3, #0]
 8005486:	6a3b      	ldr	r3, [r7, #32]
 8005488:	09db      	lsrs	r3, r3, #7
 800548a:	623b      	str	r3, [r7, #32]
 800548c:	6a3b      	ldr	r3, [r7, #32]
 800548e:	2b7f      	cmp	r3, #127	; 0x7f
 8005490:	d8f0      	bhi.n	8005474 <_TrySendOverflowPacket+0x64>
 8005492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005494:	1c5a      	adds	r2, r3, #1
 8005496:	627a      	str	r2, [r7, #36]	; 0x24
 8005498:	6a3a      	ldr	r2, [r7, #32]
 800549a:	b2d2      	uxtb	r2, r2
 800549c:	701a      	strb	r2, [r3, #0]
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80054a2:	4b13      	ldr	r3, [pc, #76]	; (80054f0 <_TrySendOverflowPacket+0xe0>)
 80054a4:	785b      	ldrb	r3, [r3, #1]
 80054a6:	4618      	mov	r0, r3
 80054a8:	1d3b      	adds	r3, r7, #4
 80054aa:	69fa      	ldr	r2, [r7, #28]
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	461a      	mov	r2, r3
 80054b0:	1d3b      	adds	r3, r7, #4
 80054b2:	4619      	mov	r1, r3
 80054b4:	f7fa fe8c 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80054b8:	4603      	mov	r3, r0
 80054ba:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80054bc:	f7ff fabc 	bl	8004a38 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d009      	beq.n	80054da <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80054c6:	4a0a      	ldr	r2, [pc, #40]	; (80054f0 <_TrySendOverflowPacket+0xe0>)
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80054cc:	4b08      	ldr	r3, [pc, #32]	; (80054f0 <_TrySendOverflowPacket+0xe0>)
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	3b01      	subs	r3, #1
 80054d2:	b2da      	uxtb	r2, r3
 80054d4:	4b06      	ldr	r3, [pc, #24]	; (80054f0 <_TrySendOverflowPacket+0xe0>)
 80054d6:	701a      	strb	r2, [r3, #0]
 80054d8:	e004      	b.n	80054e4 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80054da:	4b05      	ldr	r3, [pc, #20]	; (80054f0 <_TrySendOverflowPacket+0xe0>)
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	3301      	adds	r3, #1
 80054e0:	4a03      	ldr	r2, [pc, #12]	; (80054f0 <_TrySendOverflowPacket+0xe0>)
 80054e2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80054e4:	693b      	ldr	r3, [r7, #16]
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3730      	adds	r7, #48	; 0x30
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	2001a7e4 	.word	0x2001a7e4
 80054f4:	e0001004 	.word	0xe0001004

080054f8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b08a      	sub	sp, #40	; 0x28
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005504:	4b6d      	ldr	r3, [pc, #436]	; (80056bc <_SendPacket+0x1c4>)
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d010      	beq.n	800552e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800550c:	4b6b      	ldr	r3, [pc, #428]	; (80056bc <_SendPacket+0x1c4>)
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	f000 80a5 	beq.w	8005660 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005516:	4b69      	ldr	r3, [pc, #420]	; (80056bc <_SendPacket+0x1c4>)
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	2b02      	cmp	r3, #2
 800551c:	d109      	bne.n	8005532 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800551e:	f7ff ff77 	bl	8005410 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005522:	4b66      	ldr	r3, [pc, #408]	; (80056bc <_SendPacket+0x1c4>)
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	2b01      	cmp	r3, #1
 8005528:	f040 809c 	bne.w	8005664 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 800552c:	e001      	b.n	8005532 <_SendPacket+0x3a>
    goto Send;
 800552e:	bf00      	nop
 8005530:	e000      	b.n	8005534 <_SendPacket+0x3c>
Send:
 8005532:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2b1f      	cmp	r3, #31
 8005538:	d809      	bhi.n	800554e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800553a:	4b60      	ldr	r3, [pc, #384]	; (80056bc <_SendPacket+0x1c4>)
 800553c:	69da      	ldr	r2, [r3, #28]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	fa22 f303 	lsr.w	r3, r2, r3
 8005544:	f003 0301 	and.w	r3, r3, #1
 8005548:	2b00      	cmp	r3, #0
 800554a:	f040 808d 	bne.w	8005668 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2b17      	cmp	r3, #23
 8005552:	d807      	bhi.n	8005564 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	3b01      	subs	r3, #1
 8005558:	60fb      	str	r3, [r7, #12]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	b2da      	uxtb	r2, r3
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	701a      	strb	r2, [r3, #0]
 8005562:	e03d      	b.n	80055e0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	2b7f      	cmp	r3, #127	; 0x7f
 8005570:	d912      	bls.n	8005598 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	09da      	lsrs	r2, r3, #7
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	3b01      	subs	r3, #1
 800557a:	60fb      	str	r3, [r7, #12]
 800557c:	b2d2      	uxtb	r2, r2
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	b2db      	uxtb	r3, r3
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	3a01      	subs	r2, #1
 800558a:	60fa      	str	r2, [r7, #12]
 800558c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005590:	b2da      	uxtb	r2, r3
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	701a      	strb	r2, [r3, #0]
 8005596:	e006      	b.n	80055a6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	3b01      	subs	r3, #1
 800559c:	60fb      	str	r3, [r7, #12]
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	b2da      	uxtb	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2b7f      	cmp	r3, #127	; 0x7f
 80055aa:	d912      	bls.n	80055d2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	09da      	lsrs	r2, r3, #7
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	3b01      	subs	r3, #1
 80055b4:	60fb      	str	r3, [r7, #12]
 80055b6:	b2d2      	uxtb	r2, r2
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	3a01      	subs	r2, #1
 80055c4:	60fa      	str	r2, [r7, #12]
 80055c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055ca:	b2da      	uxtb	r2, r3
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	701a      	strb	r2, [r3, #0]
 80055d0:	e006      	b.n	80055e0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	3b01      	subs	r3, #1
 80055d6:	60fb      	str	r3, [r7, #12]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	b2da      	uxtb	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80055e0:	4b37      	ldr	r3, [pc, #220]	; (80056c0 <_SendPacket+0x1c8>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80055e6:	4b35      	ldr	r3, [pc, #212]	; (80056bc <_SendPacket+0x1c4>)
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	69ba      	ldr	r2, [r7, #24]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	627b      	str	r3, [r7, #36]	; 0x24
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	623b      	str	r3, [r7, #32]
 80055f8:	e00b      	b.n	8005612 <_SendPacket+0x11a>
 80055fa:	6a3b      	ldr	r3, [r7, #32]
 80055fc:	b2da      	uxtb	r2, r3
 80055fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005600:	1c59      	adds	r1, r3, #1
 8005602:	6279      	str	r1, [r7, #36]	; 0x24
 8005604:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005608:	b2d2      	uxtb	r2, r2
 800560a:	701a      	strb	r2, [r3, #0]
 800560c:	6a3b      	ldr	r3, [r7, #32]
 800560e:	09db      	lsrs	r3, r3, #7
 8005610:	623b      	str	r3, [r7, #32]
 8005612:	6a3b      	ldr	r3, [r7, #32]
 8005614:	2b7f      	cmp	r3, #127	; 0x7f
 8005616:	d8f0      	bhi.n	80055fa <_SendPacket+0x102>
 8005618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561a:	1c5a      	adds	r2, r3, #1
 800561c:	627a      	str	r2, [r7, #36]	; 0x24
 800561e:	6a3a      	ldr	r2, [r7, #32]
 8005620:	b2d2      	uxtb	r2, r2
 8005622:	701a      	strb	r2, [r3, #0]
 8005624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005626:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005628:	4b24      	ldr	r3, [pc, #144]	; (80056bc <_SendPacket+0x1c4>)
 800562a:	785b      	ldrb	r3, [r3, #1]
 800562c:	4618      	mov	r0, r3
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	461a      	mov	r2, r3
 8005636:	68f9      	ldr	r1, [r7, #12]
 8005638:	f7fa fdca 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800563c:	4603      	mov	r3, r0
 800563e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005640:	f7ff f9fa 	bl	8004a38 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800564a:	4a1c      	ldr	r2, [pc, #112]	; (80056bc <_SendPacket+0x1c4>)
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	60d3      	str	r3, [r2, #12]
 8005650:	e00b      	b.n	800566a <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005652:	4b1a      	ldr	r3, [pc, #104]	; (80056bc <_SendPacket+0x1c4>)
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	3301      	adds	r3, #1
 8005658:	b2da      	uxtb	r2, r3
 800565a:	4b18      	ldr	r3, [pc, #96]	; (80056bc <_SendPacket+0x1c4>)
 800565c:	701a      	strb	r2, [r3, #0]
 800565e:	e004      	b.n	800566a <_SendPacket+0x172>
    goto SendDone;
 8005660:	bf00      	nop
 8005662:	e002      	b.n	800566a <_SendPacket+0x172>
      goto SendDone;
 8005664:	bf00      	nop
 8005666:	e000      	b.n	800566a <_SendPacket+0x172>
      goto SendDone;
 8005668:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800566a:	4b14      	ldr	r3, [pc, #80]	; (80056bc <_SendPacket+0x1c4>)
 800566c:	7e1b      	ldrb	r3, [r3, #24]
 800566e:	4619      	mov	r1, r3
 8005670:	4a14      	ldr	r2, [pc, #80]	; (80056c4 <_SendPacket+0x1cc>)
 8005672:	460b      	mov	r3, r1
 8005674:	005b      	lsls	r3, r3, #1
 8005676:	440b      	add	r3, r1
 8005678:	00db      	lsls	r3, r3, #3
 800567a:	4413      	add	r3, r2
 800567c:	336c      	adds	r3, #108	; 0x6c
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	4b0e      	ldr	r3, [pc, #56]	; (80056bc <_SendPacket+0x1c4>)
 8005682:	7e1b      	ldrb	r3, [r3, #24]
 8005684:	4618      	mov	r0, r3
 8005686:	490f      	ldr	r1, [pc, #60]	; (80056c4 <_SendPacket+0x1cc>)
 8005688:	4603      	mov	r3, r0
 800568a:	005b      	lsls	r3, r3, #1
 800568c:	4403      	add	r3, r0
 800568e:	00db      	lsls	r3, r3, #3
 8005690:	440b      	add	r3, r1
 8005692:	3370      	adds	r3, #112	; 0x70
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	429a      	cmp	r2, r3
 8005698:	d00b      	beq.n	80056b2 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800569a:	4b08      	ldr	r3, [pc, #32]	; (80056bc <_SendPacket+0x1c4>)
 800569c:	789b      	ldrb	r3, [r3, #2]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d107      	bne.n	80056b2 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80056a2:	4b06      	ldr	r3, [pc, #24]	; (80056bc <_SendPacket+0x1c4>)
 80056a4:	2201      	movs	r2, #1
 80056a6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80056a8:	f7ff fe40 	bl	800532c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80056ac:	4b03      	ldr	r3, [pc, #12]	; (80056bc <_SendPacket+0x1c4>)
 80056ae:	2200      	movs	r2, #0
 80056b0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80056b2:	bf00      	nop
 80056b4:	3728      	adds	r7, #40	; 0x28
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	2001a7e4 	.word	0x2001a7e4
 80056c0:	e0001004 	.word	0xe0001004
 80056c4:	20019324 	.word	0x20019324

080056c8 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b08a      	sub	sp, #40	; 0x28
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	460b      	mov	r3, r1
 80056d2:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	3301      	adds	r3, #1
 80056de:	2b80      	cmp	r3, #128	; 0x80
 80056e0:	d80a      	bhi.n	80056f8 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	1c59      	adds	r1, r3, #1
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	6051      	str	r1, [r2, #4]
 80056ec:	78fa      	ldrb	r2, [r7, #3]
 80056ee:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	1c5a      	adds	r2, r3, #1
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	2b80      	cmp	r3, #128	; 0x80
 80056fe:	d15a      	bne.n	80057b6 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	691a      	ldr	r2, [r3, #16]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	b2d2      	uxtb	r2, r2
 800570a:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	627b      	str	r3, [r7, #36]	; 0x24
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	623b      	str	r3, [r7, #32]
 8005720:	e00b      	b.n	800573a <_StoreChar+0x72>
 8005722:	6a3b      	ldr	r3, [r7, #32]
 8005724:	b2da      	uxtb	r2, r3
 8005726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005728:	1c59      	adds	r1, r3, #1
 800572a:	6279      	str	r1, [r7, #36]	; 0x24
 800572c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005730:	b2d2      	uxtb	r2, r2
 8005732:	701a      	strb	r2, [r3, #0]
 8005734:	6a3b      	ldr	r3, [r7, #32]
 8005736:	09db      	lsrs	r3, r3, #7
 8005738:	623b      	str	r3, [r7, #32]
 800573a:	6a3b      	ldr	r3, [r7, #32]
 800573c:	2b7f      	cmp	r3, #127	; 0x7f
 800573e:	d8f0      	bhi.n	8005722 <_StoreChar+0x5a>
 8005740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005742:	1c5a      	adds	r2, r3, #1
 8005744:	627a      	str	r2, [r7, #36]	; 0x24
 8005746:	6a3a      	ldr	r2, [r7, #32]
 8005748:	b2d2      	uxtb	r2, r2
 800574a:	701a      	strb	r2, [r3, #0]
 800574c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	61fb      	str	r3, [r7, #28]
 8005754:	2300      	movs	r3, #0
 8005756:	61bb      	str	r3, [r7, #24]
 8005758:	e00b      	b.n	8005772 <_StoreChar+0xaa>
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	b2da      	uxtb	r2, r3
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	1c59      	adds	r1, r3, #1
 8005762:	61f9      	str	r1, [r7, #28]
 8005764:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005768:	b2d2      	uxtb	r2, r2
 800576a:	701a      	strb	r2, [r3, #0]
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	09db      	lsrs	r3, r3, #7
 8005770:	61bb      	str	r3, [r7, #24]
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	2b7f      	cmp	r3, #127	; 0x7f
 8005776:	d8f0      	bhi.n	800575a <_StoreChar+0x92>
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	1c5a      	adds	r2, r3, #1
 800577c:	61fa      	str	r2, [r7, #28]
 800577e:	69ba      	ldr	r2, [r7, #24]
 8005780:	b2d2      	uxtb	r2, r2
 8005782:	701a      	strb	r2, [r3, #0]
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	221a      	movs	r2, #26
 800578e:	6939      	ldr	r1, [r7, #16]
 8005790:	4618      	mov	r0, r3
 8005792:	f7ff feb1 	bl	80054f8 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4618      	mov	r0, r3
 800579c:	f7ff fdb9 	bl	8005312 <_PreparePacket>
 80057a0:	4602      	mov	r2, r0
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	1c5a      	adds	r2, r3, #1
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	611a      	str	r2, [r3, #16]
  }
}
 80057b6:	bf00      	nop
 80057b8:	3728      	adds	r7, #40	; 0x28
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
	...

080057c0 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b08a      	sub	sp, #40	; 0x28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
 80057cc:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80057d2:	2301      	movs	r3, #1
 80057d4:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80057d6:	2301      	movs	r3, #1
 80057d8:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80057da:	e007      	b.n	80057ec <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80057dc:	6a3a      	ldr	r2, [r7, #32]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e4:	623b      	str	r3, [r7, #32]
    Width++;
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	3301      	adds	r3, #1
 80057ea:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80057ec:	6a3a      	ldr	r2, [r7, #32]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d2f3      	bcs.n	80057dc <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80057f4:	683a      	ldr	r2, [r7, #0]
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d901      	bls.n	8005800 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	2b00      	cmp	r3, #0
 8005808:	d11f      	bne.n	800584a <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 800580a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580c:	2b00      	cmp	r3, #0
 800580e:	d01c      	beq.n	800584a <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005812:	f003 0302 	and.w	r3, r3, #2
 8005816:	2b00      	cmp	r3, #0
 8005818:	d005      	beq.n	8005826 <_PrintUnsigned+0x66>
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d102      	bne.n	8005826 <_PrintUnsigned+0x66>
        c = '0';
 8005820:	2330      	movs	r3, #48	; 0x30
 8005822:	76fb      	strb	r3, [r7, #27]
 8005824:	e001      	b.n	800582a <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005826:	2320      	movs	r3, #32
 8005828:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800582a:	e007      	b.n	800583c <_PrintUnsigned+0x7c>
        FieldWidth--;
 800582c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582e:	3b01      	subs	r3, #1
 8005830:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8005832:	7efb      	ldrb	r3, [r7, #27]
 8005834:	4619      	mov	r1, r3
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f7ff ff46 	bl	80056c8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800583c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583e:	2b00      	cmp	r3, #0
 8005840:	d003      	beq.n	800584a <_PrintUnsigned+0x8a>
 8005842:	69fa      	ldr	r2, [r7, #28]
 8005844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005846:	429a      	cmp	r2, r3
 8005848:	d3f0      	bcc.n	800582c <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d903      	bls.n	8005858 <_PrintUnsigned+0x98>
      NumDigits--;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	3b01      	subs	r3, #1
 8005854:	603b      	str	r3, [r7, #0]
 8005856:	e009      	b.n	800586c <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005858:	68ba      	ldr	r2, [r7, #8]
 800585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005860:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	429a      	cmp	r2, r3
 8005868:	d200      	bcs.n	800586c <_PrintUnsigned+0xac>
        break;
 800586a:	e005      	b.n	8005878 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 800586c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	fb02 f303 	mul.w	r3, r2, r3
 8005874:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005876:	e7e8      	b.n	800584a <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005878:	68ba      	ldr	r2, [r7, #8]
 800587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005880:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005886:	fb02 f303 	mul.w	r3, r2, r3
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005890:	4a15      	ldr	r2, [pc, #84]	; (80058e8 <_PrintUnsigned+0x128>)
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	4413      	add	r3, r2
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	4619      	mov	r1, r3
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f7ff ff14 	bl	80056c8 <_StoreChar>
    Digit /= Base;
 80058a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a8:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80058aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1e3      	bne.n	8005878 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80058b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d011      	beq.n	80058de <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80058ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00e      	beq.n	80058de <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80058c0:	e006      	b.n	80058d0 <_PrintUnsigned+0x110>
        FieldWidth--;
 80058c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c4:	3b01      	subs	r3, #1
 80058c6:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80058c8:	2120      	movs	r1, #32
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f7ff fefc 	bl	80056c8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80058d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d003      	beq.n	80058de <_PrintUnsigned+0x11e>
 80058d6:	69fa      	ldr	r2, [r7, #28]
 80058d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058da:	429a      	cmp	r2, r3
 80058dc:	d3f1      	bcc.n	80058c2 <_PrintUnsigned+0x102>
      }
    }
  }
}
 80058de:	bf00      	nop
 80058e0:	3728      	adds	r7, #40	; 0x28
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	08007944 	.word	0x08007944

080058ec <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b088      	sub	sp, #32
 80058f0:	af02      	add	r7, sp, #8
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
 80058f8:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	bfb8      	it	lt
 8005900:	425b      	neglt	r3, r3
 8005902:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005904:	2301      	movs	r3, #1
 8005906:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005908:	e007      	b.n	800591a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	fb92 f3f3 	sdiv	r3, r2, r3
 8005912:	613b      	str	r3, [r7, #16]
    Width++;
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	3301      	adds	r3, #1
 8005918:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	429a      	cmp	r2, r3
 8005920:	daf3      	bge.n	800590a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005922:	683a      	ldr	r2, [r7, #0]
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	429a      	cmp	r2, r3
 8005928:	d901      	bls.n	800592e <_PrintInt+0x42>
    Width = NumDigits;
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800592e:	6a3b      	ldr	r3, [r7, #32]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00a      	beq.n	800594a <_PrintInt+0x5e>
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	2b00      	cmp	r3, #0
 8005938:	db04      	blt.n	8005944 <_PrintInt+0x58>
 800593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593c:	f003 0304 	and.w	r3, r3, #4
 8005940:	2b00      	cmp	r3, #0
 8005942:	d002      	beq.n	800594a <_PrintInt+0x5e>
    FieldWidth--;
 8005944:	6a3b      	ldr	r3, [r7, #32]
 8005946:	3b01      	subs	r3, #1
 8005948:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800594a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594c:	f003 0302 	and.w	r3, r3, #2
 8005950:	2b00      	cmp	r3, #0
 8005952:	d002      	beq.n	800595a <_PrintInt+0x6e>
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d016      	beq.n	8005988 <_PrintInt+0x9c>
 800595a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595c:	f003 0301 	and.w	r3, r3, #1
 8005960:	2b00      	cmp	r3, #0
 8005962:	d111      	bne.n	8005988 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00e      	beq.n	8005988 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800596a:	e006      	b.n	800597a <_PrintInt+0x8e>
        FieldWidth--;
 800596c:	6a3b      	ldr	r3, [r7, #32]
 800596e:	3b01      	subs	r3, #1
 8005970:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005972:	2120      	movs	r1, #32
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f7ff fea7 	bl	80056c8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800597a:	6a3b      	ldr	r3, [r7, #32]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d003      	beq.n	8005988 <_PrintInt+0x9c>
 8005980:	697a      	ldr	r2, [r7, #20]
 8005982:	6a3b      	ldr	r3, [r7, #32]
 8005984:	429a      	cmp	r2, r3
 8005986:	d3f1      	bcc.n	800596c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	2b00      	cmp	r3, #0
 800598c:	da07      	bge.n	800599e <_PrintInt+0xb2>
    v = -v;
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	425b      	negs	r3, r3
 8005992:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005994:	212d      	movs	r1, #45	; 0x2d
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f7ff fe96 	bl	80056c8 <_StoreChar>
 800599c:	e008      	b.n	80059b0 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800599e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a0:	f003 0304 	and.w	r3, r3, #4
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d003      	beq.n	80059b0 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80059a8:	212b      	movs	r1, #43	; 0x2b
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	f7ff fe8c 	bl	80056c8 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80059b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b2:	f003 0302 	and.w	r3, r3, #2
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d019      	beq.n	80059ee <_PrintInt+0x102>
 80059ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059bc:	f003 0301 	and.w	r3, r3, #1
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d114      	bne.n	80059ee <_PrintInt+0x102>
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d111      	bne.n	80059ee <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80059ca:	6a3b      	ldr	r3, [r7, #32]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00e      	beq.n	80059ee <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80059d0:	e006      	b.n	80059e0 <_PrintInt+0xf4>
        FieldWidth--;
 80059d2:	6a3b      	ldr	r3, [r7, #32]
 80059d4:	3b01      	subs	r3, #1
 80059d6:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80059d8:	2130      	movs	r1, #48	; 0x30
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f7ff fe74 	bl	80056c8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80059e0:	6a3b      	ldr	r3, [r7, #32]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d003      	beq.n	80059ee <_PrintInt+0x102>
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	6a3b      	ldr	r3, [r7, #32]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d3f1      	bcc.n	80059d2 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80059ee:	68b9      	ldr	r1, [r7, #8]
 80059f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f2:	9301      	str	r3, [sp, #4]
 80059f4:	6a3b      	ldr	r3, [r7, #32]
 80059f6:	9300      	str	r3, [sp, #0]
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f7ff fedf 	bl	80057c0 <_PrintUnsigned>
}
 8005a02:	bf00      	nop
 8005a04:	3718      	adds	r7, #24
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
	...

08005a0c <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b098      	sub	sp, #96	; 0x60
 8005a10:	af02      	add	r7, sp, #8
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005a18:	f3ef 8311 	mrs	r3, BASEPRI
 8005a1c:	f04f 0120 	mov.w	r1, #32
 8005a20:	f381 8811 	msr	BASEPRI, r1
 8005a24:	633b      	str	r3, [r7, #48]	; 0x30
 8005a26:	48b7      	ldr	r0, [pc, #732]	; (8005d04 <_VPrintTarget+0x2f8>)
 8005a28:	f7ff fc73 	bl	8005312 <_PreparePacket>
 8005a2c:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005a2e:	4bb5      	ldr	r3, [pc, #724]	; (8005d04 <_VPrintTarget+0x2f8>)
 8005a30:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8005a32:	2300      	movs	r3, #0
 8005a34:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a38:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	3301      	adds	r3, #1
 8005a50:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005a52:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	f000 8183 	beq.w	8005d62 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005a5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a60:	2b25      	cmp	r3, #37	; 0x25
 8005a62:	f040 8170 	bne.w	8005d46 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005a66:	2300      	movs	r3, #0
 8005a68:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005a76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a7a:	3b23      	subs	r3, #35	; 0x23
 8005a7c:	2b0d      	cmp	r3, #13
 8005a7e:	d83f      	bhi.n	8005b00 <_VPrintTarget+0xf4>
 8005a80:	a201      	add	r2, pc, #4	; (adr r2, 8005a88 <_VPrintTarget+0x7c>)
 8005a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a86:	bf00      	nop
 8005a88:	08005af1 	.word	0x08005af1
 8005a8c:	08005b01 	.word	0x08005b01
 8005a90:	08005b01 	.word	0x08005b01
 8005a94:	08005b01 	.word	0x08005b01
 8005a98:	08005b01 	.word	0x08005b01
 8005a9c:	08005b01 	.word	0x08005b01
 8005aa0:	08005b01 	.word	0x08005b01
 8005aa4:	08005b01 	.word	0x08005b01
 8005aa8:	08005ae1 	.word	0x08005ae1
 8005aac:	08005b01 	.word	0x08005b01
 8005ab0:	08005ac1 	.word	0x08005ac1
 8005ab4:	08005b01 	.word	0x08005b01
 8005ab8:	08005b01 	.word	0x08005b01
 8005abc:	08005ad1 	.word	0x08005ad1
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005ac0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ac2:	f043 0301 	orr.w	r3, r3, #1
 8005ac6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	3301      	adds	r3, #1
 8005acc:	60fb      	str	r3, [r7, #12]
 8005ace:	e01a      	b.n	8005b06 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005ad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ad2:	f043 0302 	orr.w	r3, r3, #2
 8005ad6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	3301      	adds	r3, #1
 8005adc:	60fb      	str	r3, [r7, #12]
 8005ade:	e012      	b.n	8005b06 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005ae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ae2:	f043 0304 	orr.w	r3, r3, #4
 8005ae6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	3301      	adds	r3, #1
 8005aec:	60fb      	str	r3, [r7, #12]
 8005aee:	e00a      	b.n	8005b06 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005af0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005af2:	f043 0308 	orr.w	r3, r3, #8
 8005af6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	3301      	adds	r3, #1
 8005afc:	60fb      	str	r3, [r7, #12]
 8005afe:	e002      	b.n	8005b06 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005b00:	2300      	movs	r3, #0
 8005b02:	653b      	str	r3, [r7, #80]	; 0x50
 8005b04:	bf00      	nop
        }
      } while (v);
 8005b06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1b0      	bne.n	8005a6e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005b18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b1c:	2b2f      	cmp	r3, #47	; 0x2f
 8005b1e:	d912      	bls.n	8005b46 <_VPrintTarget+0x13a>
 8005b20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b24:	2b39      	cmp	r3, #57	; 0x39
 8005b26:	d80e      	bhi.n	8005b46 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005b2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b30:	4613      	mov	r3, r2
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	4413      	add	r3, r2
 8005b36:	005b      	lsls	r3, r3, #1
 8005b38:	461a      	mov	r2, r3
 8005b3a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b3e:	4413      	add	r3, r2
 8005b40:	3b30      	subs	r3, #48	; 0x30
 8005b42:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005b44:	e7e4      	b.n	8005b10 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005b46:	2300      	movs	r3, #0
 8005b48:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005b52:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b56:	2b2e      	cmp	r3, #46	; 0x2e
 8005b58:	d11d      	bne.n	8005b96 <_VPrintTarget+0x18a>
        sFormat++;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005b68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b6c:	2b2f      	cmp	r3, #47	; 0x2f
 8005b6e:	d912      	bls.n	8005b96 <_VPrintTarget+0x18a>
 8005b70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b74:	2b39      	cmp	r3, #57	; 0x39
 8005b76:	d80e      	bhi.n	8005b96 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005b7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b80:	4613      	mov	r3, r2
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	4413      	add	r3, r2
 8005b86:	005b      	lsls	r3, r3, #1
 8005b88:	461a      	mov	r2, r3
 8005b8a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b8e:	4413      	add	r3, r2
 8005b90:	3b30      	subs	r3, #48	; 0x30
 8005b92:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005b94:	e7e4      	b.n	8005b60 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005b9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ba2:	2b6c      	cmp	r3, #108	; 0x6c
 8005ba4:	d003      	beq.n	8005bae <_VPrintTarget+0x1a2>
 8005ba6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005baa:	2b68      	cmp	r3, #104	; 0x68
 8005bac:	d107      	bne.n	8005bbe <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005bbc:	e7ef      	b.n	8005b9e <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005bbe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005bc2:	2b25      	cmp	r3, #37	; 0x25
 8005bc4:	f000 80b3 	beq.w	8005d2e <_VPrintTarget+0x322>
 8005bc8:	2b25      	cmp	r3, #37	; 0x25
 8005bca:	f2c0 80b7 	blt.w	8005d3c <_VPrintTarget+0x330>
 8005bce:	2b78      	cmp	r3, #120	; 0x78
 8005bd0:	f300 80b4 	bgt.w	8005d3c <_VPrintTarget+0x330>
 8005bd4:	2b58      	cmp	r3, #88	; 0x58
 8005bd6:	f2c0 80b1 	blt.w	8005d3c <_VPrintTarget+0x330>
 8005bda:	3b58      	subs	r3, #88	; 0x58
 8005bdc:	2b20      	cmp	r3, #32
 8005bde:	f200 80ad 	bhi.w	8005d3c <_VPrintTarget+0x330>
 8005be2:	a201      	add	r2, pc, #4	; (adr r2, 8005be8 <_VPrintTarget+0x1dc>)
 8005be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be8:	08005cdf 	.word	0x08005cdf
 8005bec:	08005d3d 	.word	0x08005d3d
 8005bf0:	08005d3d 	.word	0x08005d3d
 8005bf4:	08005d3d 	.word	0x08005d3d
 8005bf8:	08005d3d 	.word	0x08005d3d
 8005bfc:	08005d3d 	.word	0x08005d3d
 8005c00:	08005d3d 	.word	0x08005d3d
 8005c04:	08005d3d 	.word	0x08005d3d
 8005c08:	08005d3d 	.word	0x08005d3d
 8005c0c:	08005d3d 	.word	0x08005d3d
 8005c10:	08005d3d 	.word	0x08005d3d
 8005c14:	08005c6d 	.word	0x08005c6d
 8005c18:	08005c93 	.word	0x08005c93
 8005c1c:	08005d3d 	.word	0x08005d3d
 8005c20:	08005d3d 	.word	0x08005d3d
 8005c24:	08005d3d 	.word	0x08005d3d
 8005c28:	08005d3d 	.word	0x08005d3d
 8005c2c:	08005d3d 	.word	0x08005d3d
 8005c30:	08005d3d 	.word	0x08005d3d
 8005c34:	08005d3d 	.word	0x08005d3d
 8005c38:	08005d3d 	.word	0x08005d3d
 8005c3c:	08005d3d 	.word	0x08005d3d
 8005c40:	08005d3d 	.word	0x08005d3d
 8005c44:	08005d3d 	.word	0x08005d3d
 8005c48:	08005d09 	.word	0x08005d09
 8005c4c:	08005d3d 	.word	0x08005d3d
 8005c50:	08005d3d 	.word	0x08005d3d
 8005c54:	08005d3d 	.word	0x08005d3d
 8005c58:	08005d3d 	.word	0x08005d3d
 8005c5c:	08005cb9 	.word	0x08005cb9
 8005c60:	08005d3d 	.word	0x08005d3d
 8005c64:	08005d3d 	.word	0x08005d3d
 8005c68:	08005cdf 	.word	0x08005cdf
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	1d19      	adds	r1, r3, #4
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	6011      	str	r1, [r2, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005c7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8005c80:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005c84:	f107 0314 	add.w	r3, r7, #20
 8005c88:	4611      	mov	r1, r2
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7ff fd1c 	bl	80056c8 <_StoreChar>
        break;
 8005c90:	e055      	b.n	8005d3e <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	1d19      	adds	r1, r3, #4
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	6011      	str	r1, [r2, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005ca0:	f107 0014 	add.w	r0, r7, #20
 8005ca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ca6:	9301      	str	r3, [sp, #4]
 8005ca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005caa:	9300      	str	r3, [sp, #0]
 8005cac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cae:	220a      	movs	r2, #10
 8005cb0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005cb2:	f7ff fe1b 	bl	80058ec <_PrintInt>
        break;
 8005cb6:	e042      	b.n	8005d3e <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	1d19      	adds	r1, r3, #4
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	6011      	str	r1, [r2, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005cc6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005cc8:	f107 0014 	add.w	r0, r7, #20
 8005ccc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cce:	9301      	str	r3, [sp, #4]
 8005cd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cd2:	9300      	str	r3, [sp, #0]
 8005cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cd6:	220a      	movs	r2, #10
 8005cd8:	f7ff fd72 	bl	80057c0 <_PrintUnsigned>
        break;
 8005cdc:	e02f      	b.n	8005d3e <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	1d19      	adds	r1, r3, #4
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	6011      	str	r1, [r2, #0]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005cec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005cee:	f107 0014 	add.w	r0, r7, #20
 8005cf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cf4:	9301      	str	r3, [sp, #4]
 8005cf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cf8:	9300      	str	r3, [sp, #0]
 8005cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cfc:	2210      	movs	r2, #16
 8005cfe:	f7ff fd5f 	bl	80057c0 <_PrintUnsigned>
        break;
 8005d02:	e01c      	b.n	8005d3e <_VPrintTarget+0x332>
 8005d04:	2001a814 	.word	0x2001a814
      case 'p':
        v = va_arg(*pParamList, int);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	1d19      	adds	r1, r3, #4
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	6011      	str	r1, [r2, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005d16:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005d18:	f107 0014 	add.w	r0, r7, #20
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	9301      	str	r3, [sp, #4]
 8005d20:	2308      	movs	r3, #8
 8005d22:	9300      	str	r3, [sp, #0]
 8005d24:	2308      	movs	r3, #8
 8005d26:	2210      	movs	r2, #16
 8005d28:	f7ff fd4a 	bl	80057c0 <_PrintUnsigned>
        break;
 8005d2c:	e007      	b.n	8005d3e <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005d2e:	f107 0314 	add.w	r3, r7, #20
 8005d32:	2125      	movs	r1, #37	; 0x25
 8005d34:	4618      	mov	r0, r3
 8005d36:	f7ff fcc7 	bl	80056c8 <_StoreChar>
        break;
 8005d3a:	e000      	b.n	8005d3e <_VPrintTarget+0x332>
      default:
        break;
 8005d3c:	bf00      	nop
      }
      sFormat++;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	3301      	adds	r3, #1
 8005d42:	60fb      	str	r3, [r7, #12]
 8005d44:	e007      	b.n	8005d56 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8005d46:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005d4a:	f107 0314 	add.w	r3, r7, #20
 8005d4e:	4611      	mov	r1, r2
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7ff fcb9 	bl	80056c8 <_StoreChar>
    }
  } while (*sFormat);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	f47f ae72 	bne.w	8005a44 <_VPrintTarget+0x38>
 8005d60:	e000      	b.n	8005d64 <_VPrintTarget+0x358>
      break;
 8005d62:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d041      	beq.n	8005dee <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8005d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	b2d2      	uxtb	r2, r2
 8005d70:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	643b      	str	r3, [r7, #64]	; 0x40
 8005d76:	6a3b      	ldr	r3, [r7, #32]
 8005d78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d7a:	e00b      	b.n	8005d94 <_VPrintTarget+0x388>
 8005d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d7e:	b2da      	uxtb	r2, r3
 8005d80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d82:	1c59      	adds	r1, r3, #1
 8005d84:	6439      	str	r1, [r7, #64]	; 0x40
 8005d86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d8a:	b2d2      	uxtb	r2, r2
 8005d8c:	701a      	strb	r2, [r3, #0]
 8005d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d90:	09db      	lsrs	r3, r3, #7
 8005d92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d96:	2b7f      	cmp	r3, #127	; 0x7f
 8005d98:	d8f0      	bhi.n	8005d7c <_VPrintTarget+0x370>
 8005d9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d9c:	1c5a      	adds	r2, r3, #1
 8005d9e:	643a      	str	r2, [r7, #64]	; 0x40
 8005da0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005da2:	b2d2      	uxtb	r2, r2
 8005da4:	701a      	strb	r2, [r3, #0]
 8005da6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005da8:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	63bb      	str	r3, [r7, #56]	; 0x38
 8005dae:	2300      	movs	r3, #0
 8005db0:	637b      	str	r3, [r7, #52]	; 0x34
 8005db2:	e00b      	b.n	8005dcc <_VPrintTarget+0x3c0>
 8005db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db6:	b2da      	uxtb	r2, r3
 8005db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dba:	1c59      	adds	r1, r3, #1
 8005dbc:	63b9      	str	r1, [r7, #56]	; 0x38
 8005dbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dc2:	b2d2      	uxtb	r2, r2
 8005dc4:	701a      	strb	r2, [r3, #0]
 8005dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc8:	09db      	lsrs	r3, r3, #7
 8005dca:	637b      	str	r3, [r7, #52]	; 0x34
 8005dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dce:	2b7f      	cmp	r3, #127	; 0x7f
 8005dd0:	d8f0      	bhi.n	8005db4 <_VPrintTarget+0x3a8>
 8005dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd4:	1c5a      	adds	r2, r3, #1
 8005dd6:	63ba      	str	r2, [r7, #56]	; 0x38
 8005dd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005dda:	b2d2      	uxtb	r2, r2
 8005ddc:	701a      	strb	r2, [r3, #0]
 8005dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de0:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	69b9      	ldr	r1, [r7, #24]
 8005de6:	221a      	movs	r2, #26
 8005de8:	4618      	mov	r0, r3
 8005dea:	f7ff fb85 	bl	80054f8 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df0:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005df4:	bf00      	nop
 8005df6:	3758      	adds	r7, #88	; 0x58
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b086      	sub	sp, #24
 8005e00:	af02      	add	r7, sp, #8
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
 8005e08:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005e10:	4917      	ldr	r1, [pc, #92]	; (8005e70 <SEGGER_SYSVIEW_Init+0x74>)
 8005e12:	4818      	ldr	r0, [pc, #96]	; (8005e74 <SEGGER_SYSVIEW_Init+0x78>)
 8005e14:	f7ff f93c 	bl	8005090 <SEGGER_RTT_AllocUpBuffer>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	b2da      	uxtb	r2, r3
 8005e1c:	4b16      	ldr	r3, [pc, #88]	; (8005e78 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e1e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005e20:	4b15      	ldr	r3, [pc, #84]	; (8005e78 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e22:	785a      	ldrb	r2, [r3, #1]
 8005e24:	4b14      	ldr	r3, [pc, #80]	; (8005e78 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e26:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005e28:	4b13      	ldr	r3, [pc, #76]	; (8005e78 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e2a:	7e1b      	ldrb	r3, [r3, #24]
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	2300      	movs	r3, #0
 8005e30:	9300      	str	r3, [sp, #0]
 8005e32:	2308      	movs	r3, #8
 8005e34:	4a11      	ldr	r2, [pc, #68]	; (8005e7c <SEGGER_SYSVIEW_Init+0x80>)
 8005e36:	490f      	ldr	r1, [pc, #60]	; (8005e74 <SEGGER_SYSVIEW_Init+0x78>)
 8005e38:	f7ff f9ae 	bl	8005198 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005e3c:	4b0e      	ldr	r3, [pc, #56]	; (8005e78 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e3e:	2200      	movs	r2, #0
 8005e40:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005e42:	4b0f      	ldr	r3, [pc, #60]	; (8005e80 <SEGGER_SYSVIEW_Init+0x84>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a0c      	ldr	r2, [pc, #48]	; (8005e78 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e48:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005e4a:	4a0b      	ldr	r2, [pc, #44]	; (8005e78 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005e50:	4a09      	ldr	r2, [pc, #36]	; (8005e78 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005e56:	4a08      	ldr	r2, [pc, #32]	; (8005e78 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005e5c:	4a06      	ldr	r2, [pc, #24]	; (8005e78 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005e62:	4b05      	ldr	r3, [pc, #20]	; (8005e78 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e64:	2200      	movs	r2, #0
 8005e66:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005e68:	bf00      	nop
 8005e6a:	3710      	adds	r7, #16
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	200197dc 	.word	0x200197dc
 8005e74:	0800790c 	.word	0x0800790c
 8005e78:	2001a7e4 	.word	0x2001a7e4
 8005e7c:	2001a7dc 	.word	0x2001a7dc
 8005e80:	e0001004 	.word	0xe0001004

08005e84 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005e8c:	4a04      	ldr	r2, [pc, #16]	; (8005ea0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6113      	str	r3, [r2, #16]
}
 8005e92:	bf00      	nop
 8005e94:	370c      	adds	r7, #12
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	2001a7e4 	.word	0x2001a7e4

08005ea4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005eac:	f3ef 8311 	mrs	r3, BASEPRI
 8005eb0:	f04f 0120 	mov.w	r1, #32
 8005eb4:	f381 8811 	msr	BASEPRI, r1
 8005eb8:	60fb      	str	r3, [r7, #12]
 8005eba:	4808      	ldr	r0, [pc, #32]	; (8005edc <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005ebc:	f7ff fa29 	bl	8005312 <_PreparePacket>
 8005ec0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	68b9      	ldr	r1, [r7, #8]
 8005ec6:	68b8      	ldr	r0, [r7, #8]
 8005ec8:	f7ff fb16 	bl	80054f8 <_SendPacket>
  RECORD_END();
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f383 8811 	msr	BASEPRI, r3
}
 8005ed2:	bf00      	nop
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	2001a814 	.word	0x2001a814

08005ee0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b088      	sub	sp, #32
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005eea:	f3ef 8311 	mrs	r3, BASEPRI
 8005eee:	f04f 0120 	mov.w	r1, #32
 8005ef2:	f381 8811 	msr	BASEPRI, r1
 8005ef6:	617b      	str	r3, [r7, #20]
 8005ef8:	4816      	ldr	r0, [pc, #88]	; (8005f54 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005efa:	f7ff fa0a 	bl	8005312 <_PreparePacket>
 8005efe:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	61fb      	str	r3, [r7, #28]
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	61bb      	str	r3, [r7, #24]
 8005f0c:	e00b      	b.n	8005f26 <SEGGER_SYSVIEW_RecordU32+0x46>
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	b2da      	uxtb	r2, r3
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	1c59      	adds	r1, r3, #1
 8005f16:	61f9      	str	r1, [r7, #28]
 8005f18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f1c:	b2d2      	uxtb	r2, r2
 8005f1e:	701a      	strb	r2, [r3, #0]
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	09db      	lsrs	r3, r3, #7
 8005f24:	61bb      	str	r3, [r7, #24]
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	2b7f      	cmp	r3, #127	; 0x7f
 8005f2a:	d8f0      	bhi.n	8005f0e <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	1c5a      	adds	r2, r3, #1
 8005f30:	61fa      	str	r2, [r7, #28]
 8005f32:	69ba      	ldr	r2, [r7, #24]
 8005f34:	b2d2      	uxtb	r2, r2
 8005f36:	701a      	strb	r2, [r3, #0]
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	68f9      	ldr	r1, [r7, #12]
 8005f40:	6938      	ldr	r0, [r7, #16]
 8005f42:	f7ff fad9 	bl	80054f8 <_SendPacket>
  RECORD_END();
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	f383 8811 	msr	BASEPRI, r3
}
 8005f4c:	bf00      	nop
 8005f4e:	3720      	adds	r7, #32
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	2001a814 	.word	0x2001a814

08005f58 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b08c      	sub	sp, #48	; 0x30
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005f64:	f3ef 8311 	mrs	r3, BASEPRI
 8005f68:	f04f 0120 	mov.w	r1, #32
 8005f6c:	f381 8811 	msr	BASEPRI, r1
 8005f70:	61fb      	str	r3, [r7, #28]
 8005f72:	4825      	ldr	r0, [pc, #148]	; (8006008 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005f74:	f7ff f9cd 	bl	8005312 <_PreparePacket>
 8005f78:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f86:	e00b      	b.n	8005fa0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8a:	b2da      	uxtb	r2, r3
 8005f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f8e:	1c59      	adds	r1, r3, #1
 8005f90:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005f92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f96:	b2d2      	uxtb	r2, r2
 8005f98:	701a      	strb	r2, [r3, #0]
 8005f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9c:	09db      	lsrs	r3, r3, #7
 8005f9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa2:	2b7f      	cmp	r3, #127	; 0x7f
 8005fa4:	d8f0      	bhi.n	8005f88 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa8:	1c5a      	adds	r2, r3, #1
 8005faa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fae:	b2d2      	uxtb	r2, r2
 8005fb0:	701a      	strb	r2, [r3, #0]
 8005fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	623b      	str	r3, [r7, #32]
 8005fbe:	e00b      	b.n	8005fd8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005fc0:	6a3b      	ldr	r3, [r7, #32]
 8005fc2:	b2da      	uxtb	r2, r3
 8005fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc6:	1c59      	adds	r1, r3, #1
 8005fc8:	6279      	str	r1, [r7, #36]	; 0x24
 8005fca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fce:	b2d2      	uxtb	r2, r2
 8005fd0:	701a      	strb	r2, [r3, #0]
 8005fd2:	6a3b      	ldr	r3, [r7, #32]
 8005fd4:	09db      	lsrs	r3, r3, #7
 8005fd6:	623b      	str	r3, [r7, #32]
 8005fd8:	6a3b      	ldr	r3, [r7, #32]
 8005fda:	2b7f      	cmp	r3, #127	; 0x7f
 8005fdc:	d8f0      	bhi.n	8005fc0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe0:	1c5a      	adds	r2, r3, #1
 8005fe2:	627a      	str	r2, [r7, #36]	; 0x24
 8005fe4:	6a3a      	ldr	r2, [r7, #32]
 8005fe6:	b2d2      	uxtb	r2, r2
 8005fe8:	701a      	strb	r2, [r3, #0]
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	6979      	ldr	r1, [r7, #20]
 8005ff2:	69b8      	ldr	r0, [r7, #24]
 8005ff4:	f7ff fa80 	bl	80054f8 <_SendPacket>
  RECORD_END();
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	f383 8811 	msr	BASEPRI, r3
}
 8005ffe:	bf00      	nop
 8006000:	3730      	adds	r7, #48	; 0x30
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	2001a814 	.word	0x2001a814

0800600c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800600c:	b580      	push	{r7, lr}
 800600e:	b08e      	sub	sp, #56	; 0x38
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
 8006018:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800601a:	f3ef 8311 	mrs	r3, BASEPRI
 800601e:	f04f 0120 	mov.w	r1, #32
 8006022:	f381 8811 	msr	BASEPRI, r1
 8006026:	61fb      	str	r3, [r7, #28]
 8006028:	4832      	ldr	r0, [pc, #200]	; (80060f4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800602a:	f7ff f972 	bl	8005312 <_PreparePacket>
 800602e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	637b      	str	r3, [r7, #52]	; 0x34
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	633b      	str	r3, [r7, #48]	; 0x30
 800603c:	e00b      	b.n	8006056 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800603e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006040:	b2da      	uxtb	r2, r3
 8006042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006044:	1c59      	adds	r1, r3, #1
 8006046:	6379      	str	r1, [r7, #52]	; 0x34
 8006048:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800604c:	b2d2      	uxtb	r2, r2
 800604e:	701a      	strb	r2, [r3, #0]
 8006050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006052:	09db      	lsrs	r3, r3, #7
 8006054:	633b      	str	r3, [r7, #48]	; 0x30
 8006056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006058:	2b7f      	cmp	r3, #127	; 0x7f
 800605a:	d8f0      	bhi.n	800603e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800605c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800605e:	1c5a      	adds	r2, r3, #1
 8006060:	637a      	str	r2, [r7, #52]	; 0x34
 8006062:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006064:	b2d2      	uxtb	r2, r2
 8006066:	701a      	strb	r2, [r3, #0]
 8006068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800606a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	62bb      	str	r3, [r7, #40]	; 0x28
 8006074:	e00b      	b.n	800608e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006078:	b2da      	uxtb	r2, r3
 800607a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607c:	1c59      	adds	r1, r3, #1
 800607e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006080:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006084:	b2d2      	uxtb	r2, r2
 8006086:	701a      	strb	r2, [r3, #0]
 8006088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608a:	09db      	lsrs	r3, r3, #7
 800608c:	62bb      	str	r3, [r7, #40]	; 0x28
 800608e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006090:	2b7f      	cmp	r3, #127	; 0x7f
 8006092:	d8f0      	bhi.n	8006076 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006096:	1c5a      	adds	r2, r3, #1
 8006098:	62fa      	str	r2, [r7, #44]	; 0x2c
 800609a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800609c:	b2d2      	uxtb	r2, r2
 800609e:	701a      	strb	r2, [r3, #0]
 80060a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	627b      	str	r3, [r7, #36]	; 0x24
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	623b      	str	r3, [r7, #32]
 80060ac:	e00b      	b.n	80060c6 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80060ae:	6a3b      	ldr	r3, [r7, #32]
 80060b0:	b2da      	uxtb	r2, r3
 80060b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b4:	1c59      	adds	r1, r3, #1
 80060b6:	6279      	str	r1, [r7, #36]	; 0x24
 80060b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060bc:	b2d2      	uxtb	r2, r2
 80060be:	701a      	strb	r2, [r3, #0]
 80060c0:	6a3b      	ldr	r3, [r7, #32]
 80060c2:	09db      	lsrs	r3, r3, #7
 80060c4:	623b      	str	r3, [r7, #32]
 80060c6:	6a3b      	ldr	r3, [r7, #32]
 80060c8:	2b7f      	cmp	r3, #127	; 0x7f
 80060ca:	d8f0      	bhi.n	80060ae <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80060cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ce:	1c5a      	adds	r2, r3, #1
 80060d0:	627a      	str	r2, [r7, #36]	; 0x24
 80060d2:	6a3a      	ldr	r2, [r7, #32]
 80060d4:	b2d2      	uxtb	r2, r2
 80060d6:	701a      	strb	r2, [r3, #0]
 80060d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060da:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	6979      	ldr	r1, [r7, #20]
 80060e0:	69b8      	ldr	r0, [r7, #24]
 80060e2:	f7ff fa09 	bl	80054f8 <_SendPacket>
  RECORD_END();
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	f383 8811 	msr	BASEPRI, r3
}
 80060ec:	bf00      	nop
 80060ee:	3738      	adds	r7, #56	; 0x38
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	2001a814 	.word	0x2001a814

080060f8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b090      	sub	sp, #64	; 0x40
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
 8006104:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006106:	f3ef 8311 	mrs	r3, BASEPRI
 800610a:	f04f 0120 	mov.w	r1, #32
 800610e:	f381 8811 	msr	BASEPRI, r1
 8006112:	61fb      	str	r3, [r7, #28]
 8006114:	4840      	ldr	r0, [pc, #256]	; (8006218 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006116:	f7ff f8fc 	bl	8005312 <_PreparePacket>
 800611a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	63bb      	str	r3, [r7, #56]	; 0x38
 8006128:	e00b      	b.n	8006142 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800612a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800612c:	b2da      	uxtb	r2, r3
 800612e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006130:	1c59      	adds	r1, r3, #1
 8006132:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006134:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006138:	b2d2      	uxtb	r2, r2
 800613a:	701a      	strb	r2, [r3, #0]
 800613c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613e:	09db      	lsrs	r3, r3, #7
 8006140:	63bb      	str	r3, [r7, #56]	; 0x38
 8006142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006144:	2b7f      	cmp	r3, #127	; 0x7f
 8006146:	d8f0      	bhi.n	800612a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800614a:	1c5a      	adds	r2, r3, #1
 800614c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800614e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006150:	b2d2      	uxtb	r2, r2
 8006152:	701a      	strb	r2, [r3, #0]
 8006154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006156:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	637b      	str	r3, [r7, #52]	; 0x34
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	633b      	str	r3, [r7, #48]	; 0x30
 8006160:	e00b      	b.n	800617a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006164:	b2da      	uxtb	r2, r3
 8006166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006168:	1c59      	adds	r1, r3, #1
 800616a:	6379      	str	r1, [r7, #52]	; 0x34
 800616c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006170:	b2d2      	uxtb	r2, r2
 8006172:	701a      	strb	r2, [r3, #0]
 8006174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006176:	09db      	lsrs	r3, r3, #7
 8006178:	633b      	str	r3, [r7, #48]	; 0x30
 800617a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617c:	2b7f      	cmp	r3, #127	; 0x7f
 800617e:	d8f0      	bhi.n	8006162 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006182:	1c5a      	adds	r2, r3, #1
 8006184:	637a      	str	r2, [r7, #52]	; 0x34
 8006186:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006188:	b2d2      	uxtb	r2, r2
 800618a:	701a      	strb	r2, [r3, #0]
 800618c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800618e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	62bb      	str	r3, [r7, #40]	; 0x28
 8006198:	e00b      	b.n	80061b2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800619a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619c:	b2da      	uxtb	r2, r3
 800619e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a0:	1c59      	adds	r1, r3, #1
 80061a2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80061a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061a8:	b2d2      	uxtb	r2, r2
 80061aa:	701a      	strb	r2, [r3, #0]
 80061ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ae:	09db      	lsrs	r3, r3, #7
 80061b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80061b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b4:	2b7f      	cmp	r3, #127	; 0x7f
 80061b6:	d8f0      	bhi.n	800619a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80061b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ba:	1c5a      	adds	r2, r3, #1
 80061bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061c0:	b2d2      	uxtb	r2, r2
 80061c2:	701a      	strb	r2, [r3, #0]
 80061c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	627b      	str	r3, [r7, #36]	; 0x24
 80061cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061ce:	623b      	str	r3, [r7, #32]
 80061d0:	e00b      	b.n	80061ea <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80061d2:	6a3b      	ldr	r3, [r7, #32]
 80061d4:	b2da      	uxtb	r2, r3
 80061d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d8:	1c59      	adds	r1, r3, #1
 80061da:	6279      	str	r1, [r7, #36]	; 0x24
 80061dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061e0:	b2d2      	uxtb	r2, r2
 80061e2:	701a      	strb	r2, [r3, #0]
 80061e4:	6a3b      	ldr	r3, [r7, #32]
 80061e6:	09db      	lsrs	r3, r3, #7
 80061e8:	623b      	str	r3, [r7, #32]
 80061ea:	6a3b      	ldr	r3, [r7, #32]
 80061ec:	2b7f      	cmp	r3, #127	; 0x7f
 80061ee:	d8f0      	bhi.n	80061d2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80061f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f2:	1c5a      	adds	r2, r3, #1
 80061f4:	627a      	str	r2, [r7, #36]	; 0x24
 80061f6:	6a3a      	ldr	r2, [r7, #32]
 80061f8:	b2d2      	uxtb	r2, r2
 80061fa:	701a      	strb	r2, [r3, #0]
 80061fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fe:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	6979      	ldr	r1, [r7, #20]
 8006204:	69b8      	ldr	r0, [r7, #24]
 8006206:	f7ff f977 	bl	80054f8 <_SendPacket>
  RECORD_END();
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	f383 8811 	msr	BASEPRI, r3
}
 8006210:	bf00      	nop
 8006212:	3740      	adds	r7, #64	; 0x40
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	2001a814 	.word	0x2001a814

0800621c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800621c:	b580      	push	{r7, lr}
 800621e:	b08c      	sub	sp, #48	; 0x30
 8006220:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006222:	4b59      	ldr	r3, [pc, #356]	; (8006388 <SEGGER_SYSVIEW_Start+0x16c>)
 8006224:	2201      	movs	r2, #1
 8006226:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006228:	f3ef 8311 	mrs	r3, BASEPRI
 800622c:	f04f 0120 	mov.w	r1, #32
 8006230:	f381 8811 	msr	BASEPRI, r1
 8006234:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006236:	4b54      	ldr	r3, [pc, #336]	; (8006388 <SEGGER_SYSVIEW_Start+0x16c>)
 8006238:	785b      	ldrb	r3, [r3, #1]
 800623a:	220a      	movs	r2, #10
 800623c:	4953      	ldr	r1, [pc, #332]	; (800638c <SEGGER_SYSVIEW_Start+0x170>)
 800623e:	4618      	mov	r0, r3
 8006240:	f7f9 ffc6 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800624a:	f7fe fbf5 	bl	8004a38 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800624e:	200a      	movs	r0, #10
 8006250:	f7ff fe28 	bl	8005ea4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006254:	f3ef 8311 	mrs	r3, BASEPRI
 8006258:	f04f 0120 	mov.w	r1, #32
 800625c:	f381 8811 	msr	BASEPRI, r1
 8006260:	60bb      	str	r3, [r7, #8]
 8006262:	484b      	ldr	r0, [pc, #300]	; (8006390 <SEGGER_SYSVIEW_Start+0x174>)
 8006264:	f7ff f855 	bl	8005312 <_PreparePacket>
 8006268:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006272:	4b45      	ldr	r3, [pc, #276]	; (8006388 <SEGGER_SYSVIEW_Start+0x16c>)
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	62bb      	str	r3, [r7, #40]	; 0x28
 8006278:	e00b      	b.n	8006292 <SEGGER_SYSVIEW_Start+0x76>
 800627a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627c:	b2da      	uxtb	r2, r3
 800627e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006280:	1c59      	adds	r1, r3, #1
 8006282:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006284:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006288:	b2d2      	uxtb	r2, r2
 800628a:	701a      	strb	r2, [r3, #0]
 800628c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628e:	09db      	lsrs	r3, r3, #7
 8006290:	62bb      	str	r3, [r7, #40]	; 0x28
 8006292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006294:	2b7f      	cmp	r3, #127	; 0x7f
 8006296:	d8f0      	bhi.n	800627a <SEGGER_SYSVIEW_Start+0x5e>
 8006298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629a:	1c5a      	adds	r2, r3, #1
 800629c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800629e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062a0:	b2d2      	uxtb	r2, r2
 80062a2:	701a      	strb	r2, [r3, #0]
 80062a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	627b      	str	r3, [r7, #36]	; 0x24
 80062ac:	4b36      	ldr	r3, [pc, #216]	; (8006388 <SEGGER_SYSVIEW_Start+0x16c>)
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	623b      	str	r3, [r7, #32]
 80062b2:	e00b      	b.n	80062cc <SEGGER_SYSVIEW_Start+0xb0>
 80062b4:	6a3b      	ldr	r3, [r7, #32]
 80062b6:	b2da      	uxtb	r2, r3
 80062b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ba:	1c59      	adds	r1, r3, #1
 80062bc:	6279      	str	r1, [r7, #36]	; 0x24
 80062be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062c2:	b2d2      	uxtb	r2, r2
 80062c4:	701a      	strb	r2, [r3, #0]
 80062c6:	6a3b      	ldr	r3, [r7, #32]
 80062c8:	09db      	lsrs	r3, r3, #7
 80062ca:	623b      	str	r3, [r7, #32]
 80062cc:	6a3b      	ldr	r3, [r7, #32]
 80062ce:	2b7f      	cmp	r3, #127	; 0x7f
 80062d0:	d8f0      	bhi.n	80062b4 <SEGGER_SYSVIEW_Start+0x98>
 80062d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d4:	1c5a      	adds	r2, r3, #1
 80062d6:	627a      	str	r2, [r7, #36]	; 0x24
 80062d8:	6a3a      	ldr	r2, [r7, #32]
 80062da:	b2d2      	uxtb	r2, r2
 80062dc:	701a      	strb	r2, [r3, #0]
 80062de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	61fb      	str	r3, [r7, #28]
 80062e6:	4b28      	ldr	r3, [pc, #160]	; (8006388 <SEGGER_SYSVIEW_Start+0x16c>)
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	61bb      	str	r3, [r7, #24]
 80062ec:	e00b      	b.n	8006306 <SEGGER_SYSVIEW_Start+0xea>
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	b2da      	uxtb	r2, r3
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	1c59      	adds	r1, r3, #1
 80062f6:	61f9      	str	r1, [r7, #28]
 80062f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062fc:	b2d2      	uxtb	r2, r2
 80062fe:	701a      	strb	r2, [r3, #0]
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	09db      	lsrs	r3, r3, #7
 8006304:	61bb      	str	r3, [r7, #24]
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	2b7f      	cmp	r3, #127	; 0x7f
 800630a:	d8f0      	bhi.n	80062ee <SEGGER_SYSVIEW_Start+0xd2>
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	1c5a      	adds	r2, r3, #1
 8006310:	61fa      	str	r2, [r7, #28]
 8006312:	69ba      	ldr	r2, [r7, #24]
 8006314:	b2d2      	uxtb	r2, r2
 8006316:	701a      	strb	r2, [r3, #0]
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	617b      	str	r3, [r7, #20]
 8006320:	2300      	movs	r3, #0
 8006322:	613b      	str	r3, [r7, #16]
 8006324:	e00b      	b.n	800633e <SEGGER_SYSVIEW_Start+0x122>
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	b2da      	uxtb	r2, r3
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	1c59      	adds	r1, r3, #1
 800632e:	6179      	str	r1, [r7, #20]
 8006330:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006334:	b2d2      	uxtb	r2, r2
 8006336:	701a      	strb	r2, [r3, #0]
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	09db      	lsrs	r3, r3, #7
 800633c:	613b      	str	r3, [r7, #16]
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	2b7f      	cmp	r3, #127	; 0x7f
 8006342:	d8f0      	bhi.n	8006326 <SEGGER_SYSVIEW_Start+0x10a>
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	1c5a      	adds	r2, r3, #1
 8006348:	617a      	str	r2, [r7, #20]
 800634a:	693a      	ldr	r2, [r7, #16]
 800634c:	b2d2      	uxtb	r2, r2
 800634e:	701a      	strb	r2, [r3, #0]
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006354:	2218      	movs	r2, #24
 8006356:	6839      	ldr	r1, [r7, #0]
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f7ff f8cd 	bl	80054f8 <_SendPacket>
      RECORD_END();
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006364:	4b08      	ldr	r3, [pc, #32]	; (8006388 <SEGGER_SYSVIEW_Start+0x16c>)
 8006366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006368:	2b00      	cmp	r3, #0
 800636a:	d002      	beq.n	8006372 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 800636c:	4b06      	ldr	r3, [pc, #24]	; (8006388 <SEGGER_SYSVIEW_Start+0x16c>)
 800636e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006370:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006372:	f000 f9eb 	bl	800674c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006376:	f000 f9b1 	bl	80066dc <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800637a:	f000 fc83 	bl	8006c84 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800637e:	bf00      	nop
 8006380:	3730      	adds	r7, #48	; 0x30
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	2001a7e4 	.word	0x2001a7e4
 800638c:	08007938 	.word	0x08007938
 8006390:	2001a814 	.word	0x2001a814

08006394 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800639a:	f3ef 8311 	mrs	r3, BASEPRI
 800639e:	f04f 0120 	mov.w	r1, #32
 80063a2:	f381 8811 	msr	BASEPRI, r1
 80063a6:	607b      	str	r3, [r7, #4]
 80063a8:	480b      	ldr	r0, [pc, #44]	; (80063d8 <SEGGER_SYSVIEW_Stop+0x44>)
 80063aa:	f7fe ffb2 	bl	8005312 <_PreparePacket>
 80063ae:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80063b0:	4b0a      	ldr	r3, [pc, #40]	; (80063dc <SEGGER_SYSVIEW_Stop+0x48>)
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d007      	beq.n	80063c8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80063b8:	220b      	movs	r2, #11
 80063ba:	6839      	ldr	r1, [r7, #0]
 80063bc:	6838      	ldr	r0, [r7, #0]
 80063be:	f7ff f89b 	bl	80054f8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80063c2:	4b06      	ldr	r3, [pc, #24]	; (80063dc <SEGGER_SYSVIEW_Stop+0x48>)
 80063c4:	2200      	movs	r2, #0
 80063c6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f383 8811 	msr	BASEPRI, r3
}
 80063ce:	bf00      	nop
 80063d0:	3708      	adds	r7, #8
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	2001a814 	.word	0x2001a814
 80063dc:	2001a7e4 	.word	0x2001a7e4

080063e0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b08c      	sub	sp, #48	; 0x30
 80063e4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80063e6:	f3ef 8311 	mrs	r3, BASEPRI
 80063ea:	f04f 0120 	mov.w	r1, #32
 80063ee:	f381 8811 	msr	BASEPRI, r1
 80063f2:	60fb      	str	r3, [r7, #12]
 80063f4:	4845      	ldr	r0, [pc, #276]	; (800650c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80063f6:	f7fe ff8c 	bl	8005312 <_PreparePacket>
 80063fa:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006404:	4b42      	ldr	r3, [pc, #264]	; (8006510 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	62bb      	str	r3, [r7, #40]	; 0x28
 800640a:	e00b      	b.n	8006424 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800640c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640e:	b2da      	uxtb	r2, r3
 8006410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006412:	1c59      	adds	r1, r3, #1
 8006414:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006416:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800641a:	b2d2      	uxtb	r2, r2
 800641c:	701a      	strb	r2, [r3, #0]
 800641e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006420:	09db      	lsrs	r3, r3, #7
 8006422:	62bb      	str	r3, [r7, #40]	; 0x28
 8006424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006426:	2b7f      	cmp	r3, #127	; 0x7f
 8006428:	d8f0      	bhi.n	800640c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800642a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800642c:	1c5a      	adds	r2, r3, #1
 800642e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006430:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006432:	b2d2      	uxtb	r2, r2
 8006434:	701a      	strb	r2, [r3, #0]
 8006436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006438:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	627b      	str	r3, [r7, #36]	; 0x24
 800643e:	4b34      	ldr	r3, [pc, #208]	; (8006510 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	623b      	str	r3, [r7, #32]
 8006444:	e00b      	b.n	800645e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006446:	6a3b      	ldr	r3, [r7, #32]
 8006448:	b2da      	uxtb	r2, r3
 800644a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644c:	1c59      	adds	r1, r3, #1
 800644e:	6279      	str	r1, [r7, #36]	; 0x24
 8006450:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006454:	b2d2      	uxtb	r2, r2
 8006456:	701a      	strb	r2, [r3, #0]
 8006458:	6a3b      	ldr	r3, [r7, #32]
 800645a:	09db      	lsrs	r3, r3, #7
 800645c:	623b      	str	r3, [r7, #32]
 800645e:	6a3b      	ldr	r3, [r7, #32]
 8006460:	2b7f      	cmp	r3, #127	; 0x7f
 8006462:	d8f0      	bhi.n	8006446 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006466:	1c5a      	adds	r2, r3, #1
 8006468:	627a      	str	r2, [r7, #36]	; 0x24
 800646a:	6a3a      	ldr	r2, [r7, #32]
 800646c:	b2d2      	uxtb	r2, r2
 800646e:	701a      	strb	r2, [r3, #0]
 8006470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006472:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	61fb      	str	r3, [r7, #28]
 8006478:	4b25      	ldr	r3, [pc, #148]	; (8006510 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	61bb      	str	r3, [r7, #24]
 800647e:	e00b      	b.n	8006498 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	b2da      	uxtb	r2, r3
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	1c59      	adds	r1, r3, #1
 8006488:	61f9      	str	r1, [r7, #28]
 800648a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800648e:	b2d2      	uxtb	r2, r2
 8006490:	701a      	strb	r2, [r3, #0]
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	09db      	lsrs	r3, r3, #7
 8006496:	61bb      	str	r3, [r7, #24]
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	2b7f      	cmp	r3, #127	; 0x7f
 800649c:	d8f0      	bhi.n	8006480 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	1c5a      	adds	r2, r3, #1
 80064a2:	61fa      	str	r2, [r7, #28]
 80064a4:	69ba      	ldr	r2, [r7, #24]
 80064a6:	b2d2      	uxtb	r2, r2
 80064a8:	701a      	strb	r2, [r3, #0]
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	617b      	str	r3, [r7, #20]
 80064b2:	2300      	movs	r3, #0
 80064b4:	613b      	str	r3, [r7, #16]
 80064b6:	e00b      	b.n	80064d0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	b2da      	uxtb	r2, r3
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	1c59      	adds	r1, r3, #1
 80064c0:	6179      	str	r1, [r7, #20]
 80064c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064c6:	b2d2      	uxtb	r2, r2
 80064c8:	701a      	strb	r2, [r3, #0]
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	09db      	lsrs	r3, r3, #7
 80064ce:	613b      	str	r3, [r7, #16]
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	2b7f      	cmp	r3, #127	; 0x7f
 80064d4:	d8f0      	bhi.n	80064b8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	1c5a      	adds	r2, r3, #1
 80064da:	617a      	str	r2, [r7, #20]
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	b2d2      	uxtb	r2, r2
 80064e0:	701a      	strb	r2, [r3, #0]
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80064e6:	2218      	movs	r2, #24
 80064e8:	6879      	ldr	r1, [r7, #4]
 80064ea:	68b8      	ldr	r0, [r7, #8]
 80064ec:	f7ff f804 	bl	80054f8 <_SendPacket>
  RECORD_END();
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80064f6:	4b06      	ldr	r3, [pc, #24]	; (8006510 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80064f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d002      	beq.n	8006504 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80064fe:	4b04      	ldr	r3, [pc, #16]	; (8006510 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006502:	4798      	blx	r3
  }
}
 8006504:	bf00      	nop
 8006506:	3730      	adds	r7, #48	; 0x30
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	2001a814 	.word	0x2001a814
 8006510:	2001a7e4 	.word	0x2001a7e4

08006514 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006514:	b580      	push	{r7, lr}
 8006516:	b092      	sub	sp, #72	; 0x48
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800651c:	f3ef 8311 	mrs	r3, BASEPRI
 8006520:	f04f 0120 	mov.w	r1, #32
 8006524:	f381 8811 	msr	BASEPRI, r1
 8006528:	617b      	str	r3, [r7, #20]
 800652a:	486a      	ldr	r0, [pc, #424]	; (80066d4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800652c:	f7fe fef1 	bl	8005312 <_PreparePacket>
 8006530:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	647b      	str	r3, [r7, #68]	; 0x44
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	4b66      	ldr	r3, [pc, #408]	; (80066d8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	643b      	str	r3, [r7, #64]	; 0x40
 8006546:	e00b      	b.n	8006560 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800654a:	b2da      	uxtb	r2, r3
 800654c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800654e:	1c59      	adds	r1, r3, #1
 8006550:	6479      	str	r1, [r7, #68]	; 0x44
 8006552:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006556:	b2d2      	uxtb	r2, r2
 8006558:	701a      	strb	r2, [r3, #0]
 800655a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800655c:	09db      	lsrs	r3, r3, #7
 800655e:	643b      	str	r3, [r7, #64]	; 0x40
 8006560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006562:	2b7f      	cmp	r3, #127	; 0x7f
 8006564:	d8f0      	bhi.n	8006548 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006566:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006568:	1c5a      	adds	r2, r3, #1
 800656a:	647a      	str	r2, [r7, #68]	; 0x44
 800656c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800656e:	b2d2      	uxtb	r2, r2
 8006570:	701a      	strb	r2, [r3, #0]
 8006572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006574:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	63fb      	str	r3, [r7, #60]	; 0x3c
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006580:	e00b      	b.n	800659a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006584:	b2da      	uxtb	r2, r3
 8006586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006588:	1c59      	adds	r1, r3, #1
 800658a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800658c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006590:	b2d2      	uxtb	r2, r2
 8006592:	701a      	strb	r2, [r3, #0]
 8006594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006596:	09db      	lsrs	r3, r3, #7
 8006598:	63bb      	str	r3, [r7, #56]	; 0x38
 800659a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800659c:	2b7f      	cmp	r3, #127	; 0x7f
 800659e:	d8f0      	bhi.n	8006582 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80065a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065a2:	1c5a      	adds	r2, r3, #1
 80065a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80065a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065a8:	b2d2      	uxtb	r2, r2
 80065aa:	701a      	strb	r2, [r3, #0]
 80065ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ae:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	2220      	movs	r2, #32
 80065b6:	4619      	mov	r1, r3
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f7fe fe5d 	bl	8005278 <_EncodeStr>
 80065be:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80065c0:	2209      	movs	r2, #9
 80065c2:	68f9      	ldr	r1, [r7, #12]
 80065c4:	6938      	ldr	r0, [r7, #16]
 80065c6:	f7fe ff97 	bl	80054f8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	637b      	str	r3, [r7, #52]	; 0x34
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	4b40      	ldr	r3, [pc, #256]	; (80066d8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	633b      	str	r3, [r7, #48]	; 0x30
 80065de:	e00b      	b.n	80065f8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80065e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e2:	b2da      	uxtb	r2, r3
 80065e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065e6:	1c59      	adds	r1, r3, #1
 80065e8:	6379      	str	r1, [r7, #52]	; 0x34
 80065ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065ee:	b2d2      	uxtb	r2, r2
 80065f0:	701a      	strb	r2, [r3, #0]
 80065f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f4:	09db      	lsrs	r3, r3, #7
 80065f6:	633b      	str	r3, [r7, #48]	; 0x30
 80065f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fa:	2b7f      	cmp	r3, #127	; 0x7f
 80065fc:	d8f0      	bhi.n	80065e0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80065fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006600:	1c5a      	adds	r2, r3, #1
 8006602:	637a      	str	r2, [r7, #52]	; 0x34
 8006604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006606:	b2d2      	uxtb	r2, r2
 8006608:	701a      	strb	r2, [r3, #0]
 800660a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800660c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	62bb      	str	r3, [r7, #40]	; 0x28
 8006618:	e00b      	b.n	8006632 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800661a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661c:	b2da      	uxtb	r2, r3
 800661e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006620:	1c59      	adds	r1, r3, #1
 8006622:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006624:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006628:	b2d2      	uxtb	r2, r2
 800662a:	701a      	strb	r2, [r3, #0]
 800662c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662e:	09db      	lsrs	r3, r3, #7
 8006630:	62bb      	str	r3, [r7, #40]	; 0x28
 8006632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006634:	2b7f      	cmp	r3, #127	; 0x7f
 8006636:	d8f0      	bhi.n	800661a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663a:	1c5a      	adds	r2, r3, #1
 800663c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800663e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006640:	b2d2      	uxtb	r2, r2
 8006642:	701a      	strb	r2, [r3, #0]
 8006644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006646:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	627b      	str	r3, [r7, #36]	; 0x24
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	623b      	str	r3, [r7, #32]
 8006652:	e00b      	b.n	800666c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006654:	6a3b      	ldr	r3, [r7, #32]
 8006656:	b2da      	uxtb	r2, r3
 8006658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665a:	1c59      	adds	r1, r3, #1
 800665c:	6279      	str	r1, [r7, #36]	; 0x24
 800665e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006662:	b2d2      	uxtb	r2, r2
 8006664:	701a      	strb	r2, [r3, #0]
 8006666:	6a3b      	ldr	r3, [r7, #32]
 8006668:	09db      	lsrs	r3, r3, #7
 800666a:	623b      	str	r3, [r7, #32]
 800666c:	6a3b      	ldr	r3, [r7, #32]
 800666e:	2b7f      	cmp	r3, #127	; 0x7f
 8006670:	d8f0      	bhi.n	8006654 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006674:	1c5a      	adds	r2, r3, #1
 8006676:	627a      	str	r2, [r7, #36]	; 0x24
 8006678:	6a3a      	ldr	r2, [r7, #32]
 800667a:	b2d2      	uxtb	r2, r2
 800667c:	701a      	strb	r2, [r3, #0]
 800667e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006680:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	61fb      	str	r3, [r7, #28]
 8006686:	2300      	movs	r3, #0
 8006688:	61bb      	str	r3, [r7, #24]
 800668a:	e00b      	b.n	80066a4 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	b2da      	uxtb	r2, r3
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	1c59      	adds	r1, r3, #1
 8006694:	61f9      	str	r1, [r7, #28]
 8006696:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800669a:	b2d2      	uxtb	r2, r2
 800669c:	701a      	strb	r2, [r3, #0]
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	09db      	lsrs	r3, r3, #7
 80066a2:	61bb      	str	r3, [r7, #24]
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	2b7f      	cmp	r3, #127	; 0x7f
 80066a8:	d8f0      	bhi.n	800668c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	1c5a      	adds	r2, r3, #1
 80066ae:	61fa      	str	r2, [r7, #28]
 80066b0:	69ba      	ldr	r2, [r7, #24]
 80066b2:	b2d2      	uxtb	r2, r2
 80066b4:	701a      	strb	r2, [r3, #0]
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80066ba:	2215      	movs	r2, #21
 80066bc:	68f9      	ldr	r1, [r7, #12]
 80066be:	6938      	ldr	r0, [r7, #16]
 80066c0:	f7fe ff1a 	bl	80054f8 <_SendPacket>
  RECORD_END();
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	f383 8811 	msr	BASEPRI, r3
}
 80066ca:	bf00      	nop
 80066cc:	3748      	adds	r7, #72	; 0x48
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	2001a814 	.word	0x2001a814
 80066d8:	2001a7e4 	.word	0x2001a7e4

080066dc <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80066dc:	b580      	push	{r7, lr}
 80066de:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80066e0:	4b07      	ldr	r3, [pc, #28]	; (8006700 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80066e2:	6a1b      	ldr	r3, [r3, #32]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d008      	beq.n	80066fa <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80066e8:	4b05      	ldr	r3, [pc, #20]	; (8006700 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80066ea:	6a1b      	ldr	r3, [r3, #32]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d003      	beq.n	80066fa <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80066f2:	4b03      	ldr	r3, [pc, #12]	; (8006700 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80066f4:	6a1b      	ldr	r3, [r3, #32]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	4798      	blx	r3
  }
}
 80066fa:	bf00      	nop
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	2001a7e4 	.word	0x2001a7e4

08006704 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006704:	b580      	push	{r7, lr}
 8006706:	b086      	sub	sp, #24
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800670c:	f3ef 8311 	mrs	r3, BASEPRI
 8006710:	f04f 0120 	mov.w	r1, #32
 8006714:	f381 8811 	msr	BASEPRI, r1
 8006718:	617b      	str	r3, [r7, #20]
 800671a:	480b      	ldr	r0, [pc, #44]	; (8006748 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800671c:	f7fe fdf9 	bl	8005312 <_PreparePacket>
 8006720:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006722:	2280      	movs	r2, #128	; 0x80
 8006724:	6879      	ldr	r1, [r7, #4]
 8006726:	6938      	ldr	r0, [r7, #16]
 8006728:	f7fe fda6 	bl	8005278 <_EncodeStr>
 800672c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800672e:	220e      	movs	r2, #14
 8006730:	68f9      	ldr	r1, [r7, #12]
 8006732:	6938      	ldr	r0, [r7, #16]
 8006734:	f7fe fee0 	bl	80054f8 <_SendPacket>
  RECORD_END();
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	f383 8811 	msr	BASEPRI, r3
}
 800673e:	bf00      	nop
 8006740:	3718      	adds	r7, #24
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	2001a814 	.word	0x2001a814

0800674c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800674c:	b590      	push	{r4, r7, lr}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006752:	4b15      	ldr	r3, [pc, #84]	; (80067a8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d01a      	beq.n	8006790 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800675a:	4b13      	ldr	r3, [pc, #76]	; (80067a8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800675c:	6a1b      	ldr	r3, [r3, #32]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d015      	beq.n	8006790 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006764:	4b10      	ldr	r3, [pc, #64]	; (80067a8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006766:	6a1b      	ldr	r3, [r3, #32]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4798      	blx	r3
 800676c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006770:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006772:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006776:	f04f 0200 	mov.w	r2, #0
 800677a:	f04f 0300 	mov.w	r3, #0
 800677e:	000a      	movs	r2, r1
 8006780:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006782:	4613      	mov	r3, r2
 8006784:	461a      	mov	r2, r3
 8006786:	4621      	mov	r1, r4
 8006788:	200d      	movs	r0, #13
 800678a:	f7ff fbe5 	bl	8005f58 <SEGGER_SYSVIEW_RecordU32x2>
 800678e:	e006      	b.n	800679e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006790:	4b06      	ldr	r3, [pc, #24]	; (80067ac <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4619      	mov	r1, r3
 8006796:	200c      	movs	r0, #12
 8006798:	f7ff fba2 	bl	8005ee0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800679c:	bf00      	nop
 800679e:	bf00      	nop
 80067a0:	370c      	adds	r7, #12
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd90      	pop	{r4, r7, pc}
 80067a6:	bf00      	nop
 80067a8:	2001a7e4 	.word	0x2001a7e4
 80067ac:	e0001004 	.word	0xe0001004

080067b0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b086      	sub	sp, #24
 80067b4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80067b6:	f3ef 8311 	mrs	r3, BASEPRI
 80067ba:	f04f 0120 	mov.w	r1, #32
 80067be:	f381 8811 	msr	BASEPRI, r1
 80067c2:	60fb      	str	r3, [r7, #12]
 80067c4:	4819      	ldr	r0, [pc, #100]	; (800682c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80067c6:	f7fe fda4 	bl	8005312 <_PreparePacket>
 80067ca:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80067d0:	4b17      	ldr	r3, [pc, #92]	; (8006830 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067d8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	617b      	str	r3, [r7, #20]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	613b      	str	r3, [r7, #16]
 80067e2:	e00b      	b.n	80067fc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	b2da      	uxtb	r2, r3
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	1c59      	adds	r1, r3, #1
 80067ec:	6179      	str	r1, [r7, #20]
 80067ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067f2:	b2d2      	uxtb	r2, r2
 80067f4:	701a      	strb	r2, [r3, #0]
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	09db      	lsrs	r3, r3, #7
 80067fa:	613b      	str	r3, [r7, #16]
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	2b7f      	cmp	r3, #127	; 0x7f
 8006800:	d8f0      	bhi.n	80067e4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	1c5a      	adds	r2, r3, #1
 8006806:	617a      	str	r2, [r7, #20]
 8006808:	693a      	ldr	r2, [r7, #16]
 800680a:	b2d2      	uxtb	r2, r2
 800680c:	701a      	strb	r2, [r3, #0]
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006812:	2202      	movs	r2, #2
 8006814:	6879      	ldr	r1, [r7, #4]
 8006816:	68b8      	ldr	r0, [r7, #8]
 8006818:	f7fe fe6e 	bl	80054f8 <_SendPacket>
  RECORD_END();
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f383 8811 	msr	BASEPRI, r3
}
 8006822:	bf00      	nop
 8006824:	3718      	adds	r7, #24
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	2001a814 	.word	0x2001a814
 8006830:	e000ed04 	.word	0xe000ed04

08006834 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006834:	b580      	push	{r7, lr}
 8006836:	b082      	sub	sp, #8
 8006838:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800683a:	f3ef 8311 	mrs	r3, BASEPRI
 800683e:	f04f 0120 	mov.w	r1, #32
 8006842:	f381 8811 	msr	BASEPRI, r1
 8006846:	607b      	str	r3, [r7, #4]
 8006848:	4807      	ldr	r0, [pc, #28]	; (8006868 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800684a:	f7fe fd62 	bl	8005312 <_PreparePacket>
 800684e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006850:	2203      	movs	r2, #3
 8006852:	6839      	ldr	r1, [r7, #0]
 8006854:	6838      	ldr	r0, [r7, #0]
 8006856:	f7fe fe4f 	bl	80054f8 <_SendPacket>
  RECORD_END();
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f383 8811 	msr	BASEPRI, r3
}
 8006860:	bf00      	nop
 8006862:	3708      	adds	r7, #8
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}
 8006868:	2001a814 	.word	0x2001a814

0800686c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006872:	f3ef 8311 	mrs	r3, BASEPRI
 8006876:	f04f 0120 	mov.w	r1, #32
 800687a:	f381 8811 	msr	BASEPRI, r1
 800687e:	607b      	str	r3, [r7, #4]
 8006880:	4807      	ldr	r0, [pc, #28]	; (80068a0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006882:	f7fe fd46 	bl	8005312 <_PreparePacket>
 8006886:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006888:	2212      	movs	r2, #18
 800688a:	6839      	ldr	r1, [r7, #0]
 800688c:	6838      	ldr	r0, [r7, #0]
 800688e:	f7fe fe33 	bl	80054f8 <_SendPacket>
  RECORD_END();
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f383 8811 	msr	BASEPRI, r3
}
 8006898:	bf00      	nop
 800689a:	3708      	adds	r7, #8
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	2001a814 	.word	0x2001a814

080068a4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80068aa:	f3ef 8311 	mrs	r3, BASEPRI
 80068ae:	f04f 0120 	mov.w	r1, #32
 80068b2:	f381 8811 	msr	BASEPRI, r1
 80068b6:	607b      	str	r3, [r7, #4]
 80068b8:	4807      	ldr	r0, [pc, #28]	; (80068d8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80068ba:	f7fe fd2a 	bl	8005312 <_PreparePacket>
 80068be:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80068c0:	2211      	movs	r2, #17
 80068c2:	6839      	ldr	r1, [r7, #0]
 80068c4:	6838      	ldr	r0, [r7, #0]
 80068c6:	f7fe fe17 	bl	80054f8 <_SendPacket>
  RECORD_END();
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f383 8811 	msr	BASEPRI, r3
}
 80068d0:	bf00      	nop
 80068d2:	3708      	adds	r7, #8
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	2001a814 	.word	0x2001a814

080068dc <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80068dc:	b580      	push	{r7, lr}
 80068de:	b088      	sub	sp, #32
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80068e4:	f3ef 8311 	mrs	r3, BASEPRI
 80068e8:	f04f 0120 	mov.w	r1, #32
 80068ec:	f381 8811 	msr	BASEPRI, r1
 80068f0:	617b      	str	r3, [r7, #20]
 80068f2:	4819      	ldr	r0, [pc, #100]	; (8006958 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80068f4:	f7fe fd0d 	bl	8005312 <_PreparePacket>
 80068f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80068fe:	4b17      	ldr	r3, [pc, #92]	; (800695c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	61fb      	str	r3, [r7, #28]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	61bb      	str	r3, [r7, #24]
 8006910:	e00b      	b.n	800692a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	b2da      	uxtb	r2, r3
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	1c59      	adds	r1, r3, #1
 800691a:	61f9      	str	r1, [r7, #28]
 800691c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006920:	b2d2      	uxtb	r2, r2
 8006922:	701a      	strb	r2, [r3, #0]
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	09db      	lsrs	r3, r3, #7
 8006928:	61bb      	str	r3, [r7, #24]
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	2b7f      	cmp	r3, #127	; 0x7f
 800692e:	d8f0      	bhi.n	8006912 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	1c5a      	adds	r2, r3, #1
 8006934:	61fa      	str	r2, [r7, #28]
 8006936:	69ba      	ldr	r2, [r7, #24]
 8006938:	b2d2      	uxtb	r2, r2
 800693a:	701a      	strb	r2, [r3, #0]
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006940:	2208      	movs	r2, #8
 8006942:	68f9      	ldr	r1, [r7, #12]
 8006944:	6938      	ldr	r0, [r7, #16]
 8006946:	f7fe fdd7 	bl	80054f8 <_SendPacket>
  RECORD_END();
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	f383 8811 	msr	BASEPRI, r3
}
 8006950:	bf00      	nop
 8006952:	3720      	adds	r7, #32
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}
 8006958:	2001a814 	.word	0x2001a814
 800695c:	2001a7e4 	.word	0x2001a7e4

08006960 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006960:	b580      	push	{r7, lr}
 8006962:	b088      	sub	sp, #32
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006968:	f3ef 8311 	mrs	r3, BASEPRI
 800696c:	f04f 0120 	mov.w	r1, #32
 8006970:	f381 8811 	msr	BASEPRI, r1
 8006974:	617b      	str	r3, [r7, #20]
 8006976:	4819      	ldr	r0, [pc, #100]	; (80069dc <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006978:	f7fe fccb 	bl	8005312 <_PreparePacket>
 800697c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006982:	4b17      	ldr	r3, [pc, #92]	; (80069e0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	61fb      	str	r3, [r7, #28]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	61bb      	str	r3, [r7, #24]
 8006994:	e00b      	b.n	80069ae <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	b2da      	uxtb	r2, r3
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	1c59      	adds	r1, r3, #1
 800699e:	61f9      	str	r1, [r7, #28]
 80069a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069a4:	b2d2      	uxtb	r2, r2
 80069a6:	701a      	strb	r2, [r3, #0]
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	09db      	lsrs	r3, r3, #7
 80069ac:	61bb      	str	r3, [r7, #24]
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	2b7f      	cmp	r3, #127	; 0x7f
 80069b2:	d8f0      	bhi.n	8006996 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	1c5a      	adds	r2, r3, #1
 80069b8:	61fa      	str	r2, [r7, #28]
 80069ba:	69ba      	ldr	r2, [r7, #24]
 80069bc:	b2d2      	uxtb	r2, r2
 80069be:	701a      	strb	r2, [r3, #0]
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80069c4:	2204      	movs	r2, #4
 80069c6:	68f9      	ldr	r1, [r7, #12]
 80069c8:	6938      	ldr	r0, [r7, #16]
 80069ca:	f7fe fd95 	bl	80054f8 <_SendPacket>
  RECORD_END();
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	f383 8811 	msr	BASEPRI, r3
}
 80069d4:	bf00      	nop
 80069d6:	3720      	adds	r7, #32
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	2001a814 	.word	0x2001a814
 80069e0:	2001a7e4 	.word	0x2001a7e4

080069e4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b088      	sub	sp, #32
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80069ec:	f3ef 8311 	mrs	r3, BASEPRI
 80069f0:	f04f 0120 	mov.w	r1, #32
 80069f4:	f381 8811 	msr	BASEPRI, r1
 80069f8:	617b      	str	r3, [r7, #20]
 80069fa:	4819      	ldr	r0, [pc, #100]	; (8006a60 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80069fc:	f7fe fc89 	bl	8005312 <_PreparePacket>
 8006a00:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006a06:	4b17      	ldr	r3, [pc, #92]	; (8006a64 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	61fb      	str	r3, [r7, #28]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	61bb      	str	r3, [r7, #24]
 8006a18:	e00b      	b.n	8006a32 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	b2da      	uxtb	r2, r3
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	1c59      	adds	r1, r3, #1
 8006a22:	61f9      	str	r1, [r7, #28]
 8006a24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a28:	b2d2      	uxtb	r2, r2
 8006a2a:	701a      	strb	r2, [r3, #0]
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	09db      	lsrs	r3, r3, #7
 8006a30:	61bb      	str	r3, [r7, #24]
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	2b7f      	cmp	r3, #127	; 0x7f
 8006a36:	d8f0      	bhi.n	8006a1a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	1c5a      	adds	r2, r3, #1
 8006a3c:	61fa      	str	r2, [r7, #28]
 8006a3e:	69ba      	ldr	r2, [r7, #24]
 8006a40:	b2d2      	uxtb	r2, r2
 8006a42:	701a      	strb	r2, [r3, #0]
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006a48:	2206      	movs	r2, #6
 8006a4a:	68f9      	ldr	r1, [r7, #12]
 8006a4c:	6938      	ldr	r0, [r7, #16]
 8006a4e:	f7fe fd53 	bl	80054f8 <_SendPacket>
  RECORD_END();
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	f383 8811 	msr	BASEPRI, r3
}
 8006a58:	bf00      	nop
 8006a5a:	3720      	adds	r7, #32
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	2001a814 	.word	0x2001a814
 8006a64:	2001a7e4 	.word	0x2001a7e4

08006a68 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b08a      	sub	sp, #40	; 0x28
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006a72:	f3ef 8311 	mrs	r3, BASEPRI
 8006a76:	f04f 0120 	mov.w	r1, #32
 8006a7a:	f381 8811 	msr	BASEPRI, r1
 8006a7e:	617b      	str	r3, [r7, #20]
 8006a80:	4827      	ldr	r0, [pc, #156]	; (8006b20 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006a82:	f7fe fc46 	bl	8005312 <_PreparePacket>
 8006a86:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006a8c:	4b25      	ldr	r3, [pc, #148]	; (8006b24 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	627b      	str	r3, [r7, #36]	; 0x24
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	623b      	str	r3, [r7, #32]
 8006a9e:	e00b      	b.n	8006ab8 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006aa0:	6a3b      	ldr	r3, [r7, #32]
 8006aa2:	b2da      	uxtb	r2, r3
 8006aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa6:	1c59      	adds	r1, r3, #1
 8006aa8:	6279      	str	r1, [r7, #36]	; 0x24
 8006aaa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006aae:	b2d2      	uxtb	r2, r2
 8006ab0:	701a      	strb	r2, [r3, #0]
 8006ab2:	6a3b      	ldr	r3, [r7, #32]
 8006ab4:	09db      	lsrs	r3, r3, #7
 8006ab6:	623b      	str	r3, [r7, #32]
 8006ab8:	6a3b      	ldr	r3, [r7, #32]
 8006aba:	2b7f      	cmp	r3, #127	; 0x7f
 8006abc:	d8f0      	bhi.n	8006aa0 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac0:	1c5a      	adds	r2, r3, #1
 8006ac2:	627a      	str	r2, [r7, #36]	; 0x24
 8006ac4:	6a3a      	ldr	r2, [r7, #32]
 8006ac6:	b2d2      	uxtb	r2, r2
 8006ac8:	701a      	strb	r2, [r3, #0]
 8006aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006acc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	61fb      	str	r3, [r7, #28]
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	61bb      	str	r3, [r7, #24]
 8006ad6:	e00b      	b.n	8006af0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	b2da      	uxtb	r2, r3
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	1c59      	adds	r1, r3, #1
 8006ae0:	61f9      	str	r1, [r7, #28]
 8006ae2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ae6:	b2d2      	uxtb	r2, r2
 8006ae8:	701a      	strb	r2, [r3, #0]
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	09db      	lsrs	r3, r3, #7
 8006aee:	61bb      	str	r3, [r7, #24]
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	2b7f      	cmp	r3, #127	; 0x7f
 8006af4:	d8f0      	bhi.n	8006ad8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	1c5a      	adds	r2, r3, #1
 8006afa:	61fa      	str	r2, [r7, #28]
 8006afc:	69ba      	ldr	r2, [r7, #24]
 8006afe:	b2d2      	uxtb	r2, r2
 8006b00:	701a      	strb	r2, [r3, #0]
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006b06:	2207      	movs	r2, #7
 8006b08:	68f9      	ldr	r1, [r7, #12]
 8006b0a:	6938      	ldr	r0, [r7, #16]
 8006b0c:	f7fe fcf4 	bl	80054f8 <_SendPacket>
  RECORD_END();
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	f383 8811 	msr	BASEPRI, r3
}
 8006b16:	bf00      	nop
 8006b18:	3728      	adds	r7, #40	; 0x28
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	2001a814 	.word	0x2001a814
 8006b24:	2001a7e4 	.word	0x2001a7e4

08006b28 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006b30:	4b04      	ldr	r3, [pc, #16]	; (8006b44 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	1ad3      	subs	r3, r2, r3
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr
 8006b44:	2001a7e4 	.word	0x2001a7e4

08006b48 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b08c      	sub	sp, #48	; 0x30
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	4603      	mov	r3, r0
 8006b50:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006b52:	4b3b      	ldr	r3, [pc, #236]	; (8006c40 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d06d      	beq.n	8006c36 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006b5a:	4b39      	ldr	r3, [pc, #228]	; (8006c40 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006b60:	2300      	movs	r3, #0
 8006b62:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b64:	e008      	b.n	8006b78 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d007      	beq.n	8006b82 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b74:	3301      	adds	r3, #1
 8006b76:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b78:	79fb      	ldrb	r3, [r7, #7]
 8006b7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d3f2      	bcc.n	8006b66 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006b80:	e000      	b.n	8006b84 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006b82:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d055      	beq.n	8006c36 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b8a:	f3ef 8311 	mrs	r3, BASEPRI
 8006b8e:	f04f 0120 	mov.w	r1, #32
 8006b92:	f381 8811 	msr	BASEPRI, r1
 8006b96:	617b      	str	r3, [r7, #20]
 8006b98:	482a      	ldr	r0, [pc, #168]	; (8006c44 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006b9a:	f7fe fbba 	bl	8005312 <_PreparePacket>
 8006b9e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ba8:	79fb      	ldrb	r3, [r7, #7]
 8006baa:	623b      	str	r3, [r7, #32]
 8006bac:	e00b      	b.n	8006bc6 <SEGGER_SYSVIEW_SendModule+0x7e>
 8006bae:	6a3b      	ldr	r3, [r7, #32]
 8006bb0:	b2da      	uxtb	r2, r3
 8006bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb4:	1c59      	adds	r1, r3, #1
 8006bb6:	6279      	str	r1, [r7, #36]	; 0x24
 8006bb8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bbc:	b2d2      	uxtb	r2, r2
 8006bbe:	701a      	strb	r2, [r3, #0]
 8006bc0:	6a3b      	ldr	r3, [r7, #32]
 8006bc2:	09db      	lsrs	r3, r3, #7
 8006bc4:	623b      	str	r3, [r7, #32]
 8006bc6:	6a3b      	ldr	r3, [r7, #32]
 8006bc8:	2b7f      	cmp	r3, #127	; 0x7f
 8006bca:	d8f0      	bhi.n	8006bae <SEGGER_SYSVIEW_SendModule+0x66>
 8006bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bce:	1c5a      	adds	r2, r3, #1
 8006bd0:	627a      	str	r2, [r7, #36]	; 0x24
 8006bd2:	6a3a      	ldr	r2, [r7, #32]
 8006bd4:	b2d2      	uxtb	r2, r2
 8006bd6:	701a      	strb	r2, [r3, #0]
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bda:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	61fb      	str	r3, [r7, #28]
 8006be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	61bb      	str	r3, [r7, #24]
 8006be6:	e00b      	b.n	8006c00 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	b2da      	uxtb	r2, r3
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	1c59      	adds	r1, r3, #1
 8006bf0:	61f9      	str	r1, [r7, #28]
 8006bf2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bf6:	b2d2      	uxtb	r2, r2
 8006bf8:	701a      	strb	r2, [r3, #0]
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	09db      	lsrs	r3, r3, #7
 8006bfe:	61bb      	str	r3, [r7, #24]
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	2b7f      	cmp	r3, #127	; 0x7f
 8006c04:	d8f0      	bhi.n	8006be8 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	1c5a      	adds	r2, r3, #1
 8006c0a:	61fa      	str	r2, [r7, #28]
 8006c0c:	69ba      	ldr	r2, [r7, #24]
 8006c0e:	b2d2      	uxtb	r2, r2
 8006c10:	701a      	strb	r2, [r3, #0]
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2280      	movs	r2, #128	; 0x80
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f7fe fb2a 	bl	8005278 <_EncodeStr>
 8006c24:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006c26:	2216      	movs	r2, #22
 8006c28:	68f9      	ldr	r1, [r7, #12]
 8006c2a:	6938      	ldr	r0, [r7, #16]
 8006c2c:	f7fe fc64 	bl	80054f8 <_SendPacket>
      RECORD_END();
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006c36:	bf00      	nop
 8006c38:	3730      	adds	r7, #48	; 0x30
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	2001a80c 	.word	0x2001a80c
 8006c44:	2001a814 	.word	0x2001a814

08006c48 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006c4e:	4b0c      	ldr	r3, [pc, #48]	; (8006c80 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00f      	beq.n	8006c76 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006c56:	4b0a      	ldr	r3, [pc, #40]	; (8006c80 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d002      	beq.n	8006c6a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1f2      	bne.n	8006c5c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006c76:	bf00      	nop
 8006c78:	3708      	adds	r7, #8
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	2001a80c 	.word	0x2001a80c

08006c84 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b086      	sub	sp, #24
 8006c88:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006c8a:	f3ef 8311 	mrs	r3, BASEPRI
 8006c8e:	f04f 0120 	mov.w	r1, #32
 8006c92:	f381 8811 	msr	BASEPRI, r1
 8006c96:	60fb      	str	r3, [r7, #12]
 8006c98:	4817      	ldr	r0, [pc, #92]	; (8006cf8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006c9a:	f7fe fb3a 	bl	8005312 <_PreparePacket>
 8006c9e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	617b      	str	r3, [r7, #20]
 8006ca8:	4b14      	ldr	r3, [pc, #80]	; (8006cfc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	613b      	str	r3, [r7, #16]
 8006cae:	e00b      	b.n	8006cc8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	b2da      	uxtb	r2, r3
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	1c59      	adds	r1, r3, #1
 8006cb8:	6179      	str	r1, [r7, #20]
 8006cba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cbe:	b2d2      	uxtb	r2, r2
 8006cc0:	701a      	strb	r2, [r3, #0]
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	09db      	lsrs	r3, r3, #7
 8006cc6:	613b      	str	r3, [r7, #16]
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	2b7f      	cmp	r3, #127	; 0x7f
 8006ccc:	d8f0      	bhi.n	8006cb0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	1c5a      	adds	r2, r3, #1
 8006cd2:	617a      	str	r2, [r7, #20]
 8006cd4:	693a      	ldr	r2, [r7, #16]
 8006cd6:	b2d2      	uxtb	r2, r2
 8006cd8:	701a      	strb	r2, [r3, #0]
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006cde:	221b      	movs	r2, #27
 8006ce0:	6879      	ldr	r1, [r7, #4]
 8006ce2:	68b8      	ldr	r0, [r7, #8]
 8006ce4:	f7fe fc08 	bl	80054f8 <_SendPacket>
  RECORD_END();
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f383 8811 	msr	BASEPRI, r3
}
 8006cee:	bf00      	nop
 8006cf0:	3718      	adds	r7, #24
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	2001a814 	.word	0x2001a814
 8006cfc:	2001a810 	.word	0x2001a810

08006d00 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006d00:	b40f      	push	{r0, r1, r2, r3}
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b082      	sub	sp, #8
 8006d06:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006d08:	f107 0314 	add.w	r3, r7, #20
 8006d0c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006d0e:	1d3b      	adds	r3, r7, #4
 8006d10:	461a      	mov	r2, r3
 8006d12:	2100      	movs	r1, #0
 8006d14:	6938      	ldr	r0, [r7, #16]
 8006d16:	f7fe fe79 	bl	8005a0c <_VPrintTarget>
  va_end(ParamList);
}
 8006d1a:	bf00      	nop
 8006d1c:	3708      	adds	r7, #8
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d24:	b004      	add	sp, #16
 8006d26:	4770      	bx	lr

08006d28 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b08a      	sub	sp, #40	; 0x28
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d30:	f3ef 8311 	mrs	r3, BASEPRI
 8006d34:	f04f 0120 	mov.w	r1, #32
 8006d38:	f381 8811 	msr	BASEPRI, r1
 8006d3c:	617b      	str	r3, [r7, #20]
 8006d3e:	4827      	ldr	r0, [pc, #156]	; (8006ddc <SEGGER_SYSVIEW_Warn+0xb4>)
 8006d40:	f7fe fae7 	bl	8005312 <_PreparePacket>
 8006d44:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d46:	2280      	movs	r2, #128	; 0x80
 8006d48:	6879      	ldr	r1, [r7, #4]
 8006d4a:	6938      	ldr	r0, [r7, #16]
 8006d4c:	f7fe fa94 	bl	8005278 <_EncodeStr>
 8006d50:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	627b      	str	r3, [r7, #36]	; 0x24
 8006d56:	2301      	movs	r3, #1
 8006d58:	623b      	str	r3, [r7, #32]
 8006d5a:	e00b      	b.n	8006d74 <SEGGER_SYSVIEW_Warn+0x4c>
 8006d5c:	6a3b      	ldr	r3, [r7, #32]
 8006d5e:	b2da      	uxtb	r2, r3
 8006d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d62:	1c59      	adds	r1, r3, #1
 8006d64:	6279      	str	r1, [r7, #36]	; 0x24
 8006d66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d6a:	b2d2      	uxtb	r2, r2
 8006d6c:	701a      	strb	r2, [r3, #0]
 8006d6e:	6a3b      	ldr	r3, [r7, #32]
 8006d70:	09db      	lsrs	r3, r3, #7
 8006d72:	623b      	str	r3, [r7, #32]
 8006d74:	6a3b      	ldr	r3, [r7, #32]
 8006d76:	2b7f      	cmp	r3, #127	; 0x7f
 8006d78:	d8f0      	bhi.n	8006d5c <SEGGER_SYSVIEW_Warn+0x34>
 8006d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7c:	1c5a      	adds	r2, r3, #1
 8006d7e:	627a      	str	r2, [r7, #36]	; 0x24
 8006d80:	6a3a      	ldr	r2, [r7, #32]
 8006d82:	b2d2      	uxtb	r2, r2
 8006d84:	701a      	strb	r2, [r3, #0]
 8006d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d88:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	61fb      	str	r3, [r7, #28]
 8006d8e:	2300      	movs	r3, #0
 8006d90:	61bb      	str	r3, [r7, #24]
 8006d92:	e00b      	b.n	8006dac <SEGGER_SYSVIEW_Warn+0x84>
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	b2da      	uxtb	r2, r3
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	1c59      	adds	r1, r3, #1
 8006d9c:	61f9      	str	r1, [r7, #28]
 8006d9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006da2:	b2d2      	uxtb	r2, r2
 8006da4:	701a      	strb	r2, [r3, #0]
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	09db      	lsrs	r3, r3, #7
 8006daa:	61bb      	str	r3, [r7, #24]
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	2b7f      	cmp	r3, #127	; 0x7f
 8006db0:	d8f0      	bhi.n	8006d94 <SEGGER_SYSVIEW_Warn+0x6c>
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	1c5a      	adds	r2, r3, #1
 8006db6:	61fa      	str	r2, [r7, #28]
 8006db8:	69ba      	ldr	r2, [r7, #24]
 8006dba:	b2d2      	uxtb	r2, r2
 8006dbc:	701a      	strb	r2, [r3, #0]
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006dc2:	221a      	movs	r2, #26
 8006dc4:	68f9      	ldr	r1, [r7, #12]
 8006dc6:	6938      	ldr	r0, [r7, #16]
 8006dc8:	f7fe fb96 	bl	80054f8 <_SendPacket>
  RECORD_END();
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	f383 8811 	msr	BASEPRI, r3
}
 8006dd2:	bf00      	nop
 8006dd4:	3728      	adds	r7, #40	; 0x28
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	2001a814 	.word	0x2001a814

08006de0 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8006de0:	b580      	push	{r7, lr}
 8006de2:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006de4:	4b13      	ldr	r3, [pc, #76]	; (8006e34 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006de6:	7e1b      	ldrb	r3, [r3, #24]
 8006de8:	4619      	mov	r1, r3
 8006dea:	4a13      	ldr	r2, [pc, #76]	; (8006e38 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006dec:	460b      	mov	r3, r1
 8006dee:	005b      	lsls	r3, r3, #1
 8006df0:	440b      	add	r3, r1
 8006df2:	00db      	lsls	r3, r3, #3
 8006df4:	4413      	add	r3, r2
 8006df6:	336c      	adds	r3, #108	; 0x6c
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	4b0e      	ldr	r3, [pc, #56]	; (8006e34 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006dfc:	7e1b      	ldrb	r3, [r3, #24]
 8006dfe:	4618      	mov	r0, r3
 8006e00:	490d      	ldr	r1, [pc, #52]	; (8006e38 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006e02:	4603      	mov	r3, r0
 8006e04:	005b      	lsls	r3, r3, #1
 8006e06:	4403      	add	r3, r0
 8006e08:	00db      	lsls	r3, r3, #3
 8006e0a:	440b      	add	r3, r1
 8006e0c:	3370      	adds	r3, #112	; 0x70
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d00b      	beq.n	8006e2c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006e14:	4b07      	ldr	r3, [pc, #28]	; (8006e34 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006e16:	789b      	ldrb	r3, [r3, #2]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d107      	bne.n	8006e2c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006e1c:	4b05      	ldr	r3, [pc, #20]	; (8006e34 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006e1e:	2201      	movs	r2, #1
 8006e20:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006e22:	f7fe fa83 	bl	800532c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006e26:	4b03      	ldr	r3, [pc, #12]	; (8006e34 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006e28:	2200      	movs	r2, #0
 8006e2a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8006e2c:	4b01      	ldr	r3, [pc, #4]	; (8006e34 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006e2e:	781b      	ldrb	r3, [r3, #0]
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	2001a7e4 	.word	0x2001a7e4
 8006e38:	20019324 	.word	0x20019324

08006e3c <__libc_init_array>:
 8006e3c:	b570      	push	{r4, r5, r6, lr}
 8006e3e:	4d0d      	ldr	r5, [pc, #52]	; (8006e74 <__libc_init_array+0x38>)
 8006e40:	4c0d      	ldr	r4, [pc, #52]	; (8006e78 <__libc_init_array+0x3c>)
 8006e42:	1b64      	subs	r4, r4, r5
 8006e44:	10a4      	asrs	r4, r4, #2
 8006e46:	2600      	movs	r6, #0
 8006e48:	42a6      	cmp	r6, r4
 8006e4a:	d109      	bne.n	8006e60 <__libc_init_array+0x24>
 8006e4c:	4d0b      	ldr	r5, [pc, #44]	; (8006e7c <__libc_init_array+0x40>)
 8006e4e:	4c0c      	ldr	r4, [pc, #48]	; (8006e80 <__libc_init_array+0x44>)
 8006e50:	f000 fcc0 	bl	80077d4 <_init>
 8006e54:	1b64      	subs	r4, r4, r5
 8006e56:	10a4      	asrs	r4, r4, #2
 8006e58:	2600      	movs	r6, #0
 8006e5a:	42a6      	cmp	r6, r4
 8006e5c:	d105      	bne.n	8006e6a <__libc_init_array+0x2e>
 8006e5e:	bd70      	pop	{r4, r5, r6, pc}
 8006e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e64:	4798      	blx	r3
 8006e66:	3601      	adds	r6, #1
 8006e68:	e7ee      	b.n	8006e48 <__libc_init_array+0xc>
 8006e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e6e:	4798      	blx	r3
 8006e70:	3601      	adds	r6, #1
 8006e72:	e7f2      	b.n	8006e5a <__libc_init_array+0x1e>
 8006e74:	08007990 	.word	0x08007990
 8006e78:	08007990 	.word	0x08007990
 8006e7c:	08007990 	.word	0x08007990
 8006e80:	08007994 	.word	0x08007994

08006e84 <memcmp>:
 8006e84:	b510      	push	{r4, lr}
 8006e86:	3901      	subs	r1, #1
 8006e88:	4402      	add	r2, r0
 8006e8a:	4290      	cmp	r0, r2
 8006e8c:	d101      	bne.n	8006e92 <memcmp+0xe>
 8006e8e:	2000      	movs	r0, #0
 8006e90:	e005      	b.n	8006e9e <memcmp+0x1a>
 8006e92:	7803      	ldrb	r3, [r0, #0]
 8006e94:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006e98:	42a3      	cmp	r3, r4
 8006e9a:	d001      	beq.n	8006ea0 <memcmp+0x1c>
 8006e9c:	1b18      	subs	r0, r3, r4
 8006e9e:	bd10      	pop	{r4, pc}
 8006ea0:	3001      	adds	r0, #1
 8006ea2:	e7f2      	b.n	8006e8a <memcmp+0x6>

08006ea4 <memcpy>:
 8006ea4:	440a      	add	r2, r1
 8006ea6:	4291      	cmp	r1, r2
 8006ea8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006eac:	d100      	bne.n	8006eb0 <memcpy+0xc>
 8006eae:	4770      	bx	lr
 8006eb0:	b510      	push	{r4, lr}
 8006eb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006eb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006eba:	4291      	cmp	r1, r2
 8006ebc:	d1f9      	bne.n	8006eb2 <memcpy+0xe>
 8006ebe:	bd10      	pop	{r4, pc}

08006ec0 <memset>:
 8006ec0:	4402      	add	r2, r0
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d100      	bne.n	8006eca <memset+0xa>
 8006ec8:	4770      	bx	lr
 8006eca:	f803 1b01 	strb.w	r1, [r3], #1
 8006ece:	e7f9      	b.n	8006ec4 <memset+0x4>

08006ed0 <sniprintf>:
 8006ed0:	b40c      	push	{r2, r3}
 8006ed2:	b530      	push	{r4, r5, lr}
 8006ed4:	4b17      	ldr	r3, [pc, #92]	; (8006f34 <sniprintf+0x64>)
 8006ed6:	1e0c      	subs	r4, r1, #0
 8006ed8:	681d      	ldr	r5, [r3, #0]
 8006eda:	b09d      	sub	sp, #116	; 0x74
 8006edc:	da08      	bge.n	8006ef0 <sniprintf+0x20>
 8006ede:	238b      	movs	r3, #139	; 0x8b
 8006ee0:	602b      	str	r3, [r5, #0]
 8006ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ee6:	b01d      	add	sp, #116	; 0x74
 8006ee8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006eec:	b002      	add	sp, #8
 8006eee:	4770      	bx	lr
 8006ef0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006ef4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006ef8:	bf14      	ite	ne
 8006efa:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006efe:	4623      	moveq	r3, r4
 8006f00:	9304      	str	r3, [sp, #16]
 8006f02:	9307      	str	r3, [sp, #28]
 8006f04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006f08:	9002      	str	r0, [sp, #8]
 8006f0a:	9006      	str	r0, [sp, #24]
 8006f0c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006f10:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006f12:	ab21      	add	r3, sp, #132	; 0x84
 8006f14:	a902      	add	r1, sp, #8
 8006f16:	4628      	mov	r0, r5
 8006f18:	9301      	str	r3, [sp, #4]
 8006f1a:	f000 f869 	bl	8006ff0 <_svfiprintf_r>
 8006f1e:	1c43      	adds	r3, r0, #1
 8006f20:	bfbc      	itt	lt
 8006f22:	238b      	movlt	r3, #139	; 0x8b
 8006f24:	602b      	strlt	r3, [r5, #0]
 8006f26:	2c00      	cmp	r4, #0
 8006f28:	d0dd      	beq.n	8006ee6 <sniprintf+0x16>
 8006f2a:	9b02      	ldr	r3, [sp, #8]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	701a      	strb	r2, [r3, #0]
 8006f30:	e7d9      	b.n	8006ee6 <sniprintf+0x16>
 8006f32:	bf00      	nop
 8006f34:	2000001c 	.word	0x2000001c

08006f38 <__ssputs_r>:
 8006f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f3c:	688e      	ldr	r6, [r1, #8]
 8006f3e:	429e      	cmp	r6, r3
 8006f40:	4682      	mov	sl, r0
 8006f42:	460c      	mov	r4, r1
 8006f44:	4690      	mov	r8, r2
 8006f46:	461f      	mov	r7, r3
 8006f48:	d838      	bhi.n	8006fbc <__ssputs_r+0x84>
 8006f4a:	898a      	ldrh	r2, [r1, #12]
 8006f4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f50:	d032      	beq.n	8006fb8 <__ssputs_r+0x80>
 8006f52:	6825      	ldr	r5, [r4, #0]
 8006f54:	6909      	ldr	r1, [r1, #16]
 8006f56:	eba5 0901 	sub.w	r9, r5, r1
 8006f5a:	6965      	ldr	r5, [r4, #20]
 8006f5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f64:	3301      	adds	r3, #1
 8006f66:	444b      	add	r3, r9
 8006f68:	106d      	asrs	r5, r5, #1
 8006f6a:	429d      	cmp	r5, r3
 8006f6c:	bf38      	it	cc
 8006f6e:	461d      	movcc	r5, r3
 8006f70:	0553      	lsls	r3, r2, #21
 8006f72:	d531      	bpl.n	8006fd8 <__ssputs_r+0xa0>
 8006f74:	4629      	mov	r1, r5
 8006f76:	f000 fb55 	bl	8007624 <_malloc_r>
 8006f7a:	4606      	mov	r6, r0
 8006f7c:	b950      	cbnz	r0, 8006f94 <__ssputs_r+0x5c>
 8006f7e:	230c      	movs	r3, #12
 8006f80:	f8ca 3000 	str.w	r3, [sl]
 8006f84:	89a3      	ldrh	r3, [r4, #12]
 8006f86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f8a:	81a3      	strh	r3, [r4, #12]
 8006f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f94:	6921      	ldr	r1, [r4, #16]
 8006f96:	464a      	mov	r2, r9
 8006f98:	f7ff ff84 	bl	8006ea4 <memcpy>
 8006f9c:	89a3      	ldrh	r3, [r4, #12]
 8006f9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fa6:	81a3      	strh	r3, [r4, #12]
 8006fa8:	6126      	str	r6, [r4, #16]
 8006faa:	6165      	str	r5, [r4, #20]
 8006fac:	444e      	add	r6, r9
 8006fae:	eba5 0509 	sub.w	r5, r5, r9
 8006fb2:	6026      	str	r6, [r4, #0]
 8006fb4:	60a5      	str	r5, [r4, #8]
 8006fb6:	463e      	mov	r6, r7
 8006fb8:	42be      	cmp	r6, r7
 8006fba:	d900      	bls.n	8006fbe <__ssputs_r+0x86>
 8006fbc:	463e      	mov	r6, r7
 8006fbe:	6820      	ldr	r0, [r4, #0]
 8006fc0:	4632      	mov	r2, r6
 8006fc2:	4641      	mov	r1, r8
 8006fc4:	f000 faa8 	bl	8007518 <memmove>
 8006fc8:	68a3      	ldr	r3, [r4, #8]
 8006fca:	1b9b      	subs	r3, r3, r6
 8006fcc:	60a3      	str	r3, [r4, #8]
 8006fce:	6823      	ldr	r3, [r4, #0]
 8006fd0:	4433      	add	r3, r6
 8006fd2:	6023      	str	r3, [r4, #0]
 8006fd4:	2000      	movs	r0, #0
 8006fd6:	e7db      	b.n	8006f90 <__ssputs_r+0x58>
 8006fd8:	462a      	mov	r2, r5
 8006fda:	f000 fb97 	bl	800770c <_realloc_r>
 8006fde:	4606      	mov	r6, r0
 8006fe0:	2800      	cmp	r0, #0
 8006fe2:	d1e1      	bne.n	8006fa8 <__ssputs_r+0x70>
 8006fe4:	6921      	ldr	r1, [r4, #16]
 8006fe6:	4650      	mov	r0, sl
 8006fe8:	f000 fab0 	bl	800754c <_free_r>
 8006fec:	e7c7      	b.n	8006f7e <__ssputs_r+0x46>
	...

08006ff0 <_svfiprintf_r>:
 8006ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ff4:	4698      	mov	r8, r3
 8006ff6:	898b      	ldrh	r3, [r1, #12]
 8006ff8:	061b      	lsls	r3, r3, #24
 8006ffa:	b09d      	sub	sp, #116	; 0x74
 8006ffc:	4607      	mov	r7, r0
 8006ffe:	460d      	mov	r5, r1
 8007000:	4614      	mov	r4, r2
 8007002:	d50e      	bpl.n	8007022 <_svfiprintf_r+0x32>
 8007004:	690b      	ldr	r3, [r1, #16]
 8007006:	b963      	cbnz	r3, 8007022 <_svfiprintf_r+0x32>
 8007008:	2140      	movs	r1, #64	; 0x40
 800700a:	f000 fb0b 	bl	8007624 <_malloc_r>
 800700e:	6028      	str	r0, [r5, #0]
 8007010:	6128      	str	r0, [r5, #16]
 8007012:	b920      	cbnz	r0, 800701e <_svfiprintf_r+0x2e>
 8007014:	230c      	movs	r3, #12
 8007016:	603b      	str	r3, [r7, #0]
 8007018:	f04f 30ff 	mov.w	r0, #4294967295
 800701c:	e0d1      	b.n	80071c2 <_svfiprintf_r+0x1d2>
 800701e:	2340      	movs	r3, #64	; 0x40
 8007020:	616b      	str	r3, [r5, #20]
 8007022:	2300      	movs	r3, #0
 8007024:	9309      	str	r3, [sp, #36]	; 0x24
 8007026:	2320      	movs	r3, #32
 8007028:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800702c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007030:	2330      	movs	r3, #48	; 0x30
 8007032:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80071dc <_svfiprintf_r+0x1ec>
 8007036:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800703a:	f04f 0901 	mov.w	r9, #1
 800703e:	4623      	mov	r3, r4
 8007040:	469a      	mov	sl, r3
 8007042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007046:	b10a      	cbz	r2, 800704c <_svfiprintf_r+0x5c>
 8007048:	2a25      	cmp	r2, #37	; 0x25
 800704a:	d1f9      	bne.n	8007040 <_svfiprintf_r+0x50>
 800704c:	ebba 0b04 	subs.w	fp, sl, r4
 8007050:	d00b      	beq.n	800706a <_svfiprintf_r+0x7a>
 8007052:	465b      	mov	r3, fp
 8007054:	4622      	mov	r2, r4
 8007056:	4629      	mov	r1, r5
 8007058:	4638      	mov	r0, r7
 800705a:	f7ff ff6d 	bl	8006f38 <__ssputs_r>
 800705e:	3001      	adds	r0, #1
 8007060:	f000 80aa 	beq.w	80071b8 <_svfiprintf_r+0x1c8>
 8007064:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007066:	445a      	add	r2, fp
 8007068:	9209      	str	r2, [sp, #36]	; 0x24
 800706a:	f89a 3000 	ldrb.w	r3, [sl]
 800706e:	2b00      	cmp	r3, #0
 8007070:	f000 80a2 	beq.w	80071b8 <_svfiprintf_r+0x1c8>
 8007074:	2300      	movs	r3, #0
 8007076:	f04f 32ff 	mov.w	r2, #4294967295
 800707a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800707e:	f10a 0a01 	add.w	sl, sl, #1
 8007082:	9304      	str	r3, [sp, #16]
 8007084:	9307      	str	r3, [sp, #28]
 8007086:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800708a:	931a      	str	r3, [sp, #104]	; 0x68
 800708c:	4654      	mov	r4, sl
 800708e:	2205      	movs	r2, #5
 8007090:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007094:	4851      	ldr	r0, [pc, #324]	; (80071dc <_svfiprintf_r+0x1ec>)
 8007096:	f7f9 f8eb 	bl	8000270 <memchr>
 800709a:	9a04      	ldr	r2, [sp, #16]
 800709c:	b9d8      	cbnz	r0, 80070d6 <_svfiprintf_r+0xe6>
 800709e:	06d0      	lsls	r0, r2, #27
 80070a0:	bf44      	itt	mi
 80070a2:	2320      	movmi	r3, #32
 80070a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070a8:	0711      	lsls	r1, r2, #28
 80070aa:	bf44      	itt	mi
 80070ac:	232b      	movmi	r3, #43	; 0x2b
 80070ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070b2:	f89a 3000 	ldrb.w	r3, [sl]
 80070b6:	2b2a      	cmp	r3, #42	; 0x2a
 80070b8:	d015      	beq.n	80070e6 <_svfiprintf_r+0xf6>
 80070ba:	9a07      	ldr	r2, [sp, #28]
 80070bc:	4654      	mov	r4, sl
 80070be:	2000      	movs	r0, #0
 80070c0:	f04f 0c0a 	mov.w	ip, #10
 80070c4:	4621      	mov	r1, r4
 80070c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070ca:	3b30      	subs	r3, #48	; 0x30
 80070cc:	2b09      	cmp	r3, #9
 80070ce:	d94e      	bls.n	800716e <_svfiprintf_r+0x17e>
 80070d0:	b1b0      	cbz	r0, 8007100 <_svfiprintf_r+0x110>
 80070d2:	9207      	str	r2, [sp, #28]
 80070d4:	e014      	b.n	8007100 <_svfiprintf_r+0x110>
 80070d6:	eba0 0308 	sub.w	r3, r0, r8
 80070da:	fa09 f303 	lsl.w	r3, r9, r3
 80070de:	4313      	orrs	r3, r2
 80070e0:	9304      	str	r3, [sp, #16]
 80070e2:	46a2      	mov	sl, r4
 80070e4:	e7d2      	b.n	800708c <_svfiprintf_r+0x9c>
 80070e6:	9b03      	ldr	r3, [sp, #12]
 80070e8:	1d19      	adds	r1, r3, #4
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	9103      	str	r1, [sp, #12]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	bfbb      	ittet	lt
 80070f2:	425b      	neglt	r3, r3
 80070f4:	f042 0202 	orrlt.w	r2, r2, #2
 80070f8:	9307      	strge	r3, [sp, #28]
 80070fa:	9307      	strlt	r3, [sp, #28]
 80070fc:	bfb8      	it	lt
 80070fe:	9204      	strlt	r2, [sp, #16]
 8007100:	7823      	ldrb	r3, [r4, #0]
 8007102:	2b2e      	cmp	r3, #46	; 0x2e
 8007104:	d10c      	bne.n	8007120 <_svfiprintf_r+0x130>
 8007106:	7863      	ldrb	r3, [r4, #1]
 8007108:	2b2a      	cmp	r3, #42	; 0x2a
 800710a:	d135      	bne.n	8007178 <_svfiprintf_r+0x188>
 800710c:	9b03      	ldr	r3, [sp, #12]
 800710e:	1d1a      	adds	r2, r3, #4
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	9203      	str	r2, [sp, #12]
 8007114:	2b00      	cmp	r3, #0
 8007116:	bfb8      	it	lt
 8007118:	f04f 33ff 	movlt.w	r3, #4294967295
 800711c:	3402      	adds	r4, #2
 800711e:	9305      	str	r3, [sp, #20]
 8007120:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80071ec <_svfiprintf_r+0x1fc>
 8007124:	7821      	ldrb	r1, [r4, #0]
 8007126:	2203      	movs	r2, #3
 8007128:	4650      	mov	r0, sl
 800712a:	f7f9 f8a1 	bl	8000270 <memchr>
 800712e:	b140      	cbz	r0, 8007142 <_svfiprintf_r+0x152>
 8007130:	2340      	movs	r3, #64	; 0x40
 8007132:	eba0 000a 	sub.w	r0, r0, sl
 8007136:	fa03 f000 	lsl.w	r0, r3, r0
 800713a:	9b04      	ldr	r3, [sp, #16]
 800713c:	4303      	orrs	r3, r0
 800713e:	3401      	adds	r4, #1
 8007140:	9304      	str	r3, [sp, #16]
 8007142:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007146:	4826      	ldr	r0, [pc, #152]	; (80071e0 <_svfiprintf_r+0x1f0>)
 8007148:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800714c:	2206      	movs	r2, #6
 800714e:	f7f9 f88f 	bl	8000270 <memchr>
 8007152:	2800      	cmp	r0, #0
 8007154:	d038      	beq.n	80071c8 <_svfiprintf_r+0x1d8>
 8007156:	4b23      	ldr	r3, [pc, #140]	; (80071e4 <_svfiprintf_r+0x1f4>)
 8007158:	bb1b      	cbnz	r3, 80071a2 <_svfiprintf_r+0x1b2>
 800715a:	9b03      	ldr	r3, [sp, #12]
 800715c:	3307      	adds	r3, #7
 800715e:	f023 0307 	bic.w	r3, r3, #7
 8007162:	3308      	adds	r3, #8
 8007164:	9303      	str	r3, [sp, #12]
 8007166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007168:	4433      	add	r3, r6
 800716a:	9309      	str	r3, [sp, #36]	; 0x24
 800716c:	e767      	b.n	800703e <_svfiprintf_r+0x4e>
 800716e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007172:	460c      	mov	r4, r1
 8007174:	2001      	movs	r0, #1
 8007176:	e7a5      	b.n	80070c4 <_svfiprintf_r+0xd4>
 8007178:	2300      	movs	r3, #0
 800717a:	3401      	adds	r4, #1
 800717c:	9305      	str	r3, [sp, #20]
 800717e:	4619      	mov	r1, r3
 8007180:	f04f 0c0a 	mov.w	ip, #10
 8007184:	4620      	mov	r0, r4
 8007186:	f810 2b01 	ldrb.w	r2, [r0], #1
 800718a:	3a30      	subs	r2, #48	; 0x30
 800718c:	2a09      	cmp	r2, #9
 800718e:	d903      	bls.n	8007198 <_svfiprintf_r+0x1a8>
 8007190:	2b00      	cmp	r3, #0
 8007192:	d0c5      	beq.n	8007120 <_svfiprintf_r+0x130>
 8007194:	9105      	str	r1, [sp, #20]
 8007196:	e7c3      	b.n	8007120 <_svfiprintf_r+0x130>
 8007198:	fb0c 2101 	mla	r1, ip, r1, r2
 800719c:	4604      	mov	r4, r0
 800719e:	2301      	movs	r3, #1
 80071a0:	e7f0      	b.n	8007184 <_svfiprintf_r+0x194>
 80071a2:	ab03      	add	r3, sp, #12
 80071a4:	9300      	str	r3, [sp, #0]
 80071a6:	462a      	mov	r2, r5
 80071a8:	4b0f      	ldr	r3, [pc, #60]	; (80071e8 <_svfiprintf_r+0x1f8>)
 80071aa:	a904      	add	r1, sp, #16
 80071ac:	4638      	mov	r0, r7
 80071ae:	f3af 8000 	nop.w
 80071b2:	1c42      	adds	r2, r0, #1
 80071b4:	4606      	mov	r6, r0
 80071b6:	d1d6      	bne.n	8007166 <_svfiprintf_r+0x176>
 80071b8:	89ab      	ldrh	r3, [r5, #12]
 80071ba:	065b      	lsls	r3, r3, #25
 80071bc:	f53f af2c 	bmi.w	8007018 <_svfiprintf_r+0x28>
 80071c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071c2:	b01d      	add	sp, #116	; 0x74
 80071c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071c8:	ab03      	add	r3, sp, #12
 80071ca:	9300      	str	r3, [sp, #0]
 80071cc:	462a      	mov	r2, r5
 80071ce:	4b06      	ldr	r3, [pc, #24]	; (80071e8 <_svfiprintf_r+0x1f8>)
 80071d0:	a904      	add	r1, sp, #16
 80071d2:	4638      	mov	r0, r7
 80071d4:	f000 f87a 	bl	80072cc <_printf_i>
 80071d8:	e7eb      	b.n	80071b2 <_svfiprintf_r+0x1c2>
 80071da:	bf00      	nop
 80071dc:	08007954 	.word	0x08007954
 80071e0:	0800795e 	.word	0x0800795e
 80071e4:	00000000 	.word	0x00000000
 80071e8:	08006f39 	.word	0x08006f39
 80071ec:	0800795a 	.word	0x0800795a

080071f0 <_printf_common>:
 80071f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071f4:	4616      	mov	r6, r2
 80071f6:	4699      	mov	r9, r3
 80071f8:	688a      	ldr	r2, [r1, #8]
 80071fa:	690b      	ldr	r3, [r1, #16]
 80071fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007200:	4293      	cmp	r3, r2
 8007202:	bfb8      	it	lt
 8007204:	4613      	movlt	r3, r2
 8007206:	6033      	str	r3, [r6, #0]
 8007208:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800720c:	4607      	mov	r7, r0
 800720e:	460c      	mov	r4, r1
 8007210:	b10a      	cbz	r2, 8007216 <_printf_common+0x26>
 8007212:	3301      	adds	r3, #1
 8007214:	6033      	str	r3, [r6, #0]
 8007216:	6823      	ldr	r3, [r4, #0]
 8007218:	0699      	lsls	r1, r3, #26
 800721a:	bf42      	ittt	mi
 800721c:	6833      	ldrmi	r3, [r6, #0]
 800721e:	3302      	addmi	r3, #2
 8007220:	6033      	strmi	r3, [r6, #0]
 8007222:	6825      	ldr	r5, [r4, #0]
 8007224:	f015 0506 	ands.w	r5, r5, #6
 8007228:	d106      	bne.n	8007238 <_printf_common+0x48>
 800722a:	f104 0a19 	add.w	sl, r4, #25
 800722e:	68e3      	ldr	r3, [r4, #12]
 8007230:	6832      	ldr	r2, [r6, #0]
 8007232:	1a9b      	subs	r3, r3, r2
 8007234:	42ab      	cmp	r3, r5
 8007236:	dc26      	bgt.n	8007286 <_printf_common+0x96>
 8007238:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800723c:	1e13      	subs	r3, r2, #0
 800723e:	6822      	ldr	r2, [r4, #0]
 8007240:	bf18      	it	ne
 8007242:	2301      	movne	r3, #1
 8007244:	0692      	lsls	r2, r2, #26
 8007246:	d42b      	bmi.n	80072a0 <_printf_common+0xb0>
 8007248:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800724c:	4649      	mov	r1, r9
 800724e:	4638      	mov	r0, r7
 8007250:	47c0      	blx	r8
 8007252:	3001      	adds	r0, #1
 8007254:	d01e      	beq.n	8007294 <_printf_common+0xa4>
 8007256:	6823      	ldr	r3, [r4, #0]
 8007258:	68e5      	ldr	r5, [r4, #12]
 800725a:	6832      	ldr	r2, [r6, #0]
 800725c:	f003 0306 	and.w	r3, r3, #6
 8007260:	2b04      	cmp	r3, #4
 8007262:	bf08      	it	eq
 8007264:	1aad      	subeq	r5, r5, r2
 8007266:	68a3      	ldr	r3, [r4, #8]
 8007268:	6922      	ldr	r2, [r4, #16]
 800726a:	bf0c      	ite	eq
 800726c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007270:	2500      	movne	r5, #0
 8007272:	4293      	cmp	r3, r2
 8007274:	bfc4      	itt	gt
 8007276:	1a9b      	subgt	r3, r3, r2
 8007278:	18ed      	addgt	r5, r5, r3
 800727a:	2600      	movs	r6, #0
 800727c:	341a      	adds	r4, #26
 800727e:	42b5      	cmp	r5, r6
 8007280:	d11a      	bne.n	80072b8 <_printf_common+0xc8>
 8007282:	2000      	movs	r0, #0
 8007284:	e008      	b.n	8007298 <_printf_common+0xa8>
 8007286:	2301      	movs	r3, #1
 8007288:	4652      	mov	r2, sl
 800728a:	4649      	mov	r1, r9
 800728c:	4638      	mov	r0, r7
 800728e:	47c0      	blx	r8
 8007290:	3001      	adds	r0, #1
 8007292:	d103      	bne.n	800729c <_printf_common+0xac>
 8007294:	f04f 30ff 	mov.w	r0, #4294967295
 8007298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800729c:	3501      	adds	r5, #1
 800729e:	e7c6      	b.n	800722e <_printf_common+0x3e>
 80072a0:	18e1      	adds	r1, r4, r3
 80072a2:	1c5a      	adds	r2, r3, #1
 80072a4:	2030      	movs	r0, #48	; 0x30
 80072a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072aa:	4422      	add	r2, r4
 80072ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072b4:	3302      	adds	r3, #2
 80072b6:	e7c7      	b.n	8007248 <_printf_common+0x58>
 80072b8:	2301      	movs	r3, #1
 80072ba:	4622      	mov	r2, r4
 80072bc:	4649      	mov	r1, r9
 80072be:	4638      	mov	r0, r7
 80072c0:	47c0      	blx	r8
 80072c2:	3001      	adds	r0, #1
 80072c4:	d0e6      	beq.n	8007294 <_printf_common+0xa4>
 80072c6:	3601      	adds	r6, #1
 80072c8:	e7d9      	b.n	800727e <_printf_common+0x8e>
	...

080072cc <_printf_i>:
 80072cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072d0:	7e0f      	ldrb	r7, [r1, #24]
 80072d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80072d4:	2f78      	cmp	r7, #120	; 0x78
 80072d6:	4691      	mov	r9, r2
 80072d8:	4680      	mov	r8, r0
 80072da:	460c      	mov	r4, r1
 80072dc:	469a      	mov	sl, r3
 80072de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80072e2:	d807      	bhi.n	80072f4 <_printf_i+0x28>
 80072e4:	2f62      	cmp	r7, #98	; 0x62
 80072e6:	d80a      	bhi.n	80072fe <_printf_i+0x32>
 80072e8:	2f00      	cmp	r7, #0
 80072ea:	f000 80d8 	beq.w	800749e <_printf_i+0x1d2>
 80072ee:	2f58      	cmp	r7, #88	; 0x58
 80072f0:	f000 80a3 	beq.w	800743a <_printf_i+0x16e>
 80072f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80072fc:	e03a      	b.n	8007374 <_printf_i+0xa8>
 80072fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007302:	2b15      	cmp	r3, #21
 8007304:	d8f6      	bhi.n	80072f4 <_printf_i+0x28>
 8007306:	a101      	add	r1, pc, #4	; (adr r1, 800730c <_printf_i+0x40>)
 8007308:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800730c:	08007365 	.word	0x08007365
 8007310:	08007379 	.word	0x08007379
 8007314:	080072f5 	.word	0x080072f5
 8007318:	080072f5 	.word	0x080072f5
 800731c:	080072f5 	.word	0x080072f5
 8007320:	080072f5 	.word	0x080072f5
 8007324:	08007379 	.word	0x08007379
 8007328:	080072f5 	.word	0x080072f5
 800732c:	080072f5 	.word	0x080072f5
 8007330:	080072f5 	.word	0x080072f5
 8007334:	080072f5 	.word	0x080072f5
 8007338:	08007485 	.word	0x08007485
 800733c:	080073a9 	.word	0x080073a9
 8007340:	08007467 	.word	0x08007467
 8007344:	080072f5 	.word	0x080072f5
 8007348:	080072f5 	.word	0x080072f5
 800734c:	080074a7 	.word	0x080074a7
 8007350:	080072f5 	.word	0x080072f5
 8007354:	080073a9 	.word	0x080073a9
 8007358:	080072f5 	.word	0x080072f5
 800735c:	080072f5 	.word	0x080072f5
 8007360:	0800746f 	.word	0x0800746f
 8007364:	682b      	ldr	r3, [r5, #0]
 8007366:	1d1a      	adds	r2, r3, #4
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	602a      	str	r2, [r5, #0]
 800736c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007370:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007374:	2301      	movs	r3, #1
 8007376:	e0a3      	b.n	80074c0 <_printf_i+0x1f4>
 8007378:	6820      	ldr	r0, [r4, #0]
 800737a:	6829      	ldr	r1, [r5, #0]
 800737c:	0606      	lsls	r6, r0, #24
 800737e:	f101 0304 	add.w	r3, r1, #4
 8007382:	d50a      	bpl.n	800739a <_printf_i+0xce>
 8007384:	680e      	ldr	r6, [r1, #0]
 8007386:	602b      	str	r3, [r5, #0]
 8007388:	2e00      	cmp	r6, #0
 800738a:	da03      	bge.n	8007394 <_printf_i+0xc8>
 800738c:	232d      	movs	r3, #45	; 0x2d
 800738e:	4276      	negs	r6, r6
 8007390:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007394:	485e      	ldr	r0, [pc, #376]	; (8007510 <_printf_i+0x244>)
 8007396:	230a      	movs	r3, #10
 8007398:	e019      	b.n	80073ce <_printf_i+0x102>
 800739a:	680e      	ldr	r6, [r1, #0]
 800739c:	602b      	str	r3, [r5, #0]
 800739e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80073a2:	bf18      	it	ne
 80073a4:	b236      	sxthne	r6, r6
 80073a6:	e7ef      	b.n	8007388 <_printf_i+0xbc>
 80073a8:	682b      	ldr	r3, [r5, #0]
 80073aa:	6820      	ldr	r0, [r4, #0]
 80073ac:	1d19      	adds	r1, r3, #4
 80073ae:	6029      	str	r1, [r5, #0]
 80073b0:	0601      	lsls	r1, r0, #24
 80073b2:	d501      	bpl.n	80073b8 <_printf_i+0xec>
 80073b4:	681e      	ldr	r6, [r3, #0]
 80073b6:	e002      	b.n	80073be <_printf_i+0xf2>
 80073b8:	0646      	lsls	r6, r0, #25
 80073ba:	d5fb      	bpl.n	80073b4 <_printf_i+0xe8>
 80073bc:	881e      	ldrh	r6, [r3, #0]
 80073be:	4854      	ldr	r0, [pc, #336]	; (8007510 <_printf_i+0x244>)
 80073c0:	2f6f      	cmp	r7, #111	; 0x6f
 80073c2:	bf0c      	ite	eq
 80073c4:	2308      	moveq	r3, #8
 80073c6:	230a      	movne	r3, #10
 80073c8:	2100      	movs	r1, #0
 80073ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80073ce:	6865      	ldr	r5, [r4, #4]
 80073d0:	60a5      	str	r5, [r4, #8]
 80073d2:	2d00      	cmp	r5, #0
 80073d4:	bfa2      	ittt	ge
 80073d6:	6821      	ldrge	r1, [r4, #0]
 80073d8:	f021 0104 	bicge.w	r1, r1, #4
 80073dc:	6021      	strge	r1, [r4, #0]
 80073de:	b90e      	cbnz	r6, 80073e4 <_printf_i+0x118>
 80073e0:	2d00      	cmp	r5, #0
 80073e2:	d04d      	beq.n	8007480 <_printf_i+0x1b4>
 80073e4:	4615      	mov	r5, r2
 80073e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80073ea:	fb03 6711 	mls	r7, r3, r1, r6
 80073ee:	5dc7      	ldrb	r7, [r0, r7]
 80073f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80073f4:	4637      	mov	r7, r6
 80073f6:	42bb      	cmp	r3, r7
 80073f8:	460e      	mov	r6, r1
 80073fa:	d9f4      	bls.n	80073e6 <_printf_i+0x11a>
 80073fc:	2b08      	cmp	r3, #8
 80073fe:	d10b      	bne.n	8007418 <_printf_i+0x14c>
 8007400:	6823      	ldr	r3, [r4, #0]
 8007402:	07de      	lsls	r6, r3, #31
 8007404:	d508      	bpl.n	8007418 <_printf_i+0x14c>
 8007406:	6923      	ldr	r3, [r4, #16]
 8007408:	6861      	ldr	r1, [r4, #4]
 800740a:	4299      	cmp	r1, r3
 800740c:	bfde      	ittt	le
 800740e:	2330      	movle	r3, #48	; 0x30
 8007410:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007414:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007418:	1b52      	subs	r2, r2, r5
 800741a:	6122      	str	r2, [r4, #16]
 800741c:	f8cd a000 	str.w	sl, [sp]
 8007420:	464b      	mov	r3, r9
 8007422:	aa03      	add	r2, sp, #12
 8007424:	4621      	mov	r1, r4
 8007426:	4640      	mov	r0, r8
 8007428:	f7ff fee2 	bl	80071f0 <_printf_common>
 800742c:	3001      	adds	r0, #1
 800742e:	d14c      	bne.n	80074ca <_printf_i+0x1fe>
 8007430:	f04f 30ff 	mov.w	r0, #4294967295
 8007434:	b004      	add	sp, #16
 8007436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800743a:	4835      	ldr	r0, [pc, #212]	; (8007510 <_printf_i+0x244>)
 800743c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007440:	6829      	ldr	r1, [r5, #0]
 8007442:	6823      	ldr	r3, [r4, #0]
 8007444:	f851 6b04 	ldr.w	r6, [r1], #4
 8007448:	6029      	str	r1, [r5, #0]
 800744a:	061d      	lsls	r5, r3, #24
 800744c:	d514      	bpl.n	8007478 <_printf_i+0x1ac>
 800744e:	07df      	lsls	r7, r3, #31
 8007450:	bf44      	itt	mi
 8007452:	f043 0320 	orrmi.w	r3, r3, #32
 8007456:	6023      	strmi	r3, [r4, #0]
 8007458:	b91e      	cbnz	r6, 8007462 <_printf_i+0x196>
 800745a:	6823      	ldr	r3, [r4, #0]
 800745c:	f023 0320 	bic.w	r3, r3, #32
 8007460:	6023      	str	r3, [r4, #0]
 8007462:	2310      	movs	r3, #16
 8007464:	e7b0      	b.n	80073c8 <_printf_i+0xfc>
 8007466:	6823      	ldr	r3, [r4, #0]
 8007468:	f043 0320 	orr.w	r3, r3, #32
 800746c:	6023      	str	r3, [r4, #0]
 800746e:	2378      	movs	r3, #120	; 0x78
 8007470:	4828      	ldr	r0, [pc, #160]	; (8007514 <_printf_i+0x248>)
 8007472:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007476:	e7e3      	b.n	8007440 <_printf_i+0x174>
 8007478:	0659      	lsls	r1, r3, #25
 800747a:	bf48      	it	mi
 800747c:	b2b6      	uxthmi	r6, r6
 800747e:	e7e6      	b.n	800744e <_printf_i+0x182>
 8007480:	4615      	mov	r5, r2
 8007482:	e7bb      	b.n	80073fc <_printf_i+0x130>
 8007484:	682b      	ldr	r3, [r5, #0]
 8007486:	6826      	ldr	r6, [r4, #0]
 8007488:	6961      	ldr	r1, [r4, #20]
 800748a:	1d18      	adds	r0, r3, #4
 800748c:	6028      	str	r0, [r5, #0]
 800748e:	0635      	lsls	r5, r6, #24
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	d501      	bpl.n	8007498 <_printf_i+0x1cc>
 8007494:	6019      	str	r1, [r3, #0]
 8007496:	e002      	b.n	800749e <_printf_i+0x1d2>
 8007498:	0670      	lsls	r0, r6, #25
 800749a:	d5fb      	bpl.n	8007494 <_printf_i+0x1c8>
 800749c:	8019      	strh	r1, [r3, #0]
 800749e:	2300      	movs	r3, #0
 80074a0:	6123      	str	r3, [r4, #16]
 80074a2:	4615      	mov	r5, r2
 80074a4:	e7ba      	b.n	800741c <_printf_i+0x150>
 80074a6:	682b      	ldr	r3, [r5, #0]
 80074a8:	1d1a      	adds	r2, r3, #4
 80074aa:	602a      	str	r2, [r5, #0]
 80074ac:	681d      	ldr	r5, [r3, #0]
 80074ae:	6862      	ldr	r2, [r4, #4]
 80074b0:	2100      	movs	r1, #0
 80074b2:	4628      	mov	r0, r5
 80074b4:	f7f8 fedc 	bl	8000270 <memchr>
 80074b8:	b108      	cbz	r0, 80074be <_printf_i+0x1f2>
 80074ba:	1b40      	subs	r0, r0, r5
 80074bc:	6060      	str	r0, [r4, #4]
 80074be:	6863      	ldr	r3, [r4, #4]
 80074c0:	6123      	str	r3, [r4, #16]
 80074c2:	2300      	movs	r3, #0
 80074c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074c8:	e7a8      	b.n	800741c <_printf_i+0x150>
 80074ca:	6923      	ldr	r3, [r4, #16]
 80074cc:	462a      	mov	r2, r5
 80074ce:	4649      	mov	r1, r9
 80074d0:	4640      	mov	r0, r8
 80074d2:	47d0      	blx	sl
 80074d4:	3001      	adds	r0, #1
 80074d6:	d0ab      	beq.n	8007430 <_printf_i+0x164>
 80074d8:	6823      	ldr	r3, [r4, #0]
 80074da:	079b      	lsls	r3, r3, #30
 80074dc:	d413      	bmi.n	8007506 <_printf_i+0x23a>
 80074de:	68e0      	ldr	r0, [r4, #12]
 80074e0:	9b03      	ldr	r3, [sp, #12]
 80074e2:	4298      	cmp	r0, r3
 80074e4:	bfb8      	it	lt
 80074e6:	4618      	movlt	r0, r3
 80074e8:	e7a4      	b.n	8007434 <_printf_i+0x168>
 80074ea:	2301      	movs	r3, #1
 80074ec:	4632      	mov	r2, r6
 80074ee:	4649      	mov	r1, r9
 80074f0:	4640      	mov	r0, r8
 80074f2:	47d0      	blx	sl
 80074f4:	3001      	adds	r0, #1
 80074f6:	d09b      	beq.n	8007430 <_printf_i+0x164>
 80074f8:	3501      	adds	r5, #1
 80074fa:	68e3      	ldr	r3, [r4, #12]
 80074fc:	9903      	ldr	r1, [sp, #12]
 80074fe:	1a5b      	subs	r3, r3, r1
 8007500:	42ab      	cmp	r3, r5
 8007502:	dcf2      	bgt.n	80074ea <_printf_i+0x21e>
 8007504:	e7eb      	b.n	80074de <_printf_i+0x212>
 8007506:	2500      	movs	r5, #0
 8007508:	f104 0619 	add.w	r6, r4, #25
 800750c:	e7f5      	b.n	80074fa <_printf_i+0x22e>
 800750e:	bf00      	nop
 8007510:	08007965 	.word	0x08007965
 8007514:	08007976 	.word	0x08007976

08007518 <memmove>:
 8007518:	4288      	cmp	r0, r1
 800751a:	b510      	push	{r4, lr}
 800751c:	eb01 0402 	add.w	r4, r1, r2
 8007520:	d902      	bls.n	8007528 <memmove+0x10>
 8007522:	4284      	cmp	r4, r0
 8007524:	4623      	mov	r3, r4
 8007526:	d807      	bhi.n	8007538 <memmove+0x20>
 8007528:	1e43      	subs	r3, r0, #1
 800752a:	42a1      	cmp	r1, r4
 800752c:	d008      	beq.n	8007540 <memmove+0x28>
 800752e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007532:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007536:	e7f8      	b.n	800752a <memmove+0x12>
 8007538:	4402      	add	r2, r0
 800753a:	4601      	mov	r1, r0
 800753c:	428a      	cmp	r2, r1
 800753e:	d100      	bne.n	8007542 <memmove+0x2a>
 8007540:	bd10      	pop	{r4, pc}
 8007542:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007546:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800754a:	e7f7      	b.n	800753c <memmove+0x24>

0800754c <_free_r>:
 800754c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800754e:	2900      	cmp	r1, #0
 8007550:	d044      	beq.n	80075dc <_free_r+0x90>
 8007552:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007556:	9001      	str	r0, [sp, #4]
 8007558:	2b00      	cmp	r3, #0
 800755a:	f1a1 0404 	sub.w	r4, r1, #4
 800755e:	bfb8      	it	lt
 8007560:	18e4      	addlt	r4, r4, r3
 8007562:	f000 f913 	bl	800778c <__malloc_lock>
 8007566:	4a1e      	ldr	r2, [pc, #120]	; (80075e0 <_free_r+0x94>)
 8007568:	9801      	ldr	r0, [sp, #4]
 800756a:	6813      	ldr	r3, [r2, #0]
 800756c:	b933      	cbnz	r3, 800757c <_free_r+0x30>
 800756e:	6063      	str	r3, [r4, #4]
 8007570:	6014      	str	r4, [r2, #0]
 8007572:	b003      	add	sp, #12
 8007574:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007578:	f000 b90e 	b.w	8007798 <__malloc_unlock>
 800757c:	42a3      	cmp	r3, r4
 800757e:	d908      	bls.n	8007592 <_free_r+0x46>
 8007580:	6825      	ldr	r5, [r4, #0]
 8007582:	1961      	adds	r1, r4, r5
 8007584:	428b      	cmp	r3, r1
 8007586:	bf01      	itttt	eq
 8007588:	6819      	ldreq	r1, [r3, #0]
 800758a:	685b      	ldreq	r3, [r3, #4]
 800758c:	1949      	addeq	r1, r1, r5
 800758e:	6021      	streq	r1, [r4, #0]
 8007590:	e7ed      	b.n	800756e <_free_r+0x22>
 8007592:	461a      	mov	r2, r3
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	b10b      	cbz	r3, 800759c <_free_r+0x50>
 8007598:	42a3      	cmp	r3, r4
 800759a:	d9fa      	bls.n	8007592 <_free_r+0x46>
 800759c:	6811      	ldr	r1, [r2, #0]
 800759e:	1855      	adds	r5, r2, r1
 80075a0:	42a5      	cmp	r5, r4
 80075a2:	d10b      	bne.n	80075bc <_free_r+0x70>
 80075a4:	6824      	ldr	r4, [r4, #0]
 80075a6:	4421      	add	r1, r4
 80075a8:	1854      	adds	r4, r2, r1
 80075aa:	42a3      	cmp	r3, r4
 80075ac:	6011      	str	r1, [r2, #0]
 80075ae:	d1e0      	bne.n	8007572 <_free_r+0x26>
 80075b0:	681c      	ldr	r4, [r3, #0]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	6053      	str	r3, [r2, #4]
 80075b6:	4421      	add	r1, r4
 80075b8:	6011      	str	r1, [r2, #0]
 80075ba:	e7da      	b.n	8007572 <_free_r+0x26>
 80075bc:	d902      	bls.n	80075c4 <_free_r+0x78>
 80075be:	230c      	movs	r3, #12
 80075c0:	6003      	str	r3, [r0, #0]
 80075c2:	e7d6      	b.n	8007572 <_free_r+0x26>
 80075c4:	6825      	ldr	r5, [r4, #0]
 80075c6:	1961      	adds	r1, r4, r5
 80075c8:	428b      	cmp	r3, r1
 80075ca:	bf04      	itt	eq
 80075cc:	6819      	ldreq	r1, [r3, #0]
 80075ce:	685b      	ldreq	r3, [r3, #4]
 80075d0:	6063      	str	r3, [r4, #4]
 80075d2:	bf04      	itt	eq
 80075d4:	1949      	addeq	r1, r1, r5
 80075d6:	6021      	streq	r1, [r4, #0]
 80075d8:	6054      	str	r4, [r2, #4]
 80075da:	e7ca      	b.n	8007572 <_free_r+0x26>
 80075dc:	b003      	add	sp, #12
 80075de:	bd30      	pop	{r4, r5, pc}
 80075e0:	2001a8f8 	.word	0x2001a8f8

080075e4 <sbrk_aligned>:
 80075e4:	b570      	push	{r4, r5, r6, lr}
 80075e6:	4e0e      	ldr	r6, [pc, #56]	; (8007620 <sbrk_aligned+0x3c>)
 80075e8:	460c      	mov	r4, r1
 80075ea:	6831      	ldr	r1, [r6, #0]
 80075ec:	4605      	mov	r5, r0
 80075ee:	b911      	cbnz	r1, 80075f6 <sbrk_aligned+0x12>
 80075f0:	f000 f8bc 	bl	800776c <_sbrk_r>
 80075f4:	6030      	str	r0, [r6, #0]
 80075f6:	4621      	mov	r1, r4
 80075f8:	4628      	mov	r0, r5
 80075fa:	f000 f8b7 	bl	800776c <_sbrk_r>
 80075fe:	1c43      	adds	r3, r0, #1
 8007600:	d00a      	beq.n	8007618 <sbrk_aligned+0x34>
 8007602:	1cc4      	adds	r4, r0, #3
 8007604:	f024 0403 	bic.w	r4, r4, #3
 8007608:	42a0      	cmp	r0, r4
 800760a:	d007      	beq.n	800761c <sbrk_aligned+0x38>
 800760c:	1a21      	subs	r1, r4, r0
 800760e:	4628      	mov	r0, r5
 8007610:	f000 f8ac 	bl	800776c <_sbrk_r>
 8007614:	3001      	adds	r0, #1
 8007616:	d101      	bne.n	800761c <sbrk_aligned+0x38>
 8007618:	f04f 34ff 	mov.w	r4, #4294967295
 800761c:	4620      	mov	r0, r4
 800761e:	bd70      	pop	{r4, r5, r6, pc}
 8007620:	2001a8fc 	.word	0x2001a8fc

08007624 <_malloc_r>:
 8007624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007628:	1ccd      	adds	r5, r1, #3
 800762a:	f025 0503 	bic.w	r5, r5, #3
 800762e:	3508      	adds	r5, #8
 8007630:	2d0c      	cmp	r5, #12
 8007632:	bf38      	it	cc
 8007634:	250c      	movcc	r5, #12
 8007636:	2d00      	cmp	r5, #0
 8007638:	4607      	mov	r7, r0
 800763a:	db01      	blt.n	8007640 <_malloc_r+0x1c>
 800763c:	42a9      	cmp	r1, r5
 800763e:	d905      	bls.n	800764c <_malloc_r+0x28>
 8007640:	230c      	movs	r3, #12
 8007642:	603b      	str	r3, [r7, #0]
 8007644:	2600      	movs	r6, #0
 8007646:	4630      	mov	r0, r6
 8007648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800764c:	4e2e      	ldr	r6, [pc, #184]	; (8007708 <_malloc_r+0xe4>)
 800764e:	f000 f89d 	bl	800778c <__malloc_lock>
 8007652:	6833      	ldr	r3, [r6, #0]
 8007654:	461c      	mov	r4, r3
 8007656:	bb34      	cbnz	r4, 80076a6 <_malloc_r+0x82>
 8007658:	4629      	mov	r1, r5
 800765a:	4638      	mov	r0, r7
 800765c:	f7ff ffc2 	bl	80075e4 <sbrk_aligned>
 8007660:	1c43      	adds	r3, r0, #1
 8007662:	4604      	mov	r4, r0
 8007664:	d14d      	bne.n	8007702 <_malloc_r+0xde>
 8007666:	6834      	ldr	r4, [r6, #0]
 8007668:	4626      	mov	r6, r4
 800766a:	2e00      	cmp	r6, #0
 800766c:	d140      	bne.n	80076f0 <_malloc_r+0xcc>
 800766e:	6823      	ldr	r3, [r4, #0]
 8007670:	4631      	mov	r1, r6
 8007672:	4638      	mov	r0, r7
 8007674:	eb04 0803 	add.w	r8, r4, r3
 8007678:	f000 f878 	bl	800776c <_sbrk_r>
 800767c:	4580      	cmp	r8, r0
 800767e:	d13a      	bne.n	80076f6 <_malloc_r+0xd2>
 8007680:	6821      	ldr	r1, [r4, #0]
 8007682:	3503      	adds	r5, #3
 8007684:	1a6d      	subs	r5, r5, r1
 8007686:	f025 0503 	bic.w	r5, r5, #3
 800768a:	3508      	adds	r5, #8
 800768c:	2d0c      	cmp	r5, #12
 800768e:	bf38      	it	cc
 8007690:	250c      	movcc	r5, #12
 8007692:	4629      	mov	r1, r5
 8007694:	4638      	mov	r0, r7
 8007696:	f7ff ffa5 	bl	80075e4 <sbrk_aligned>
 800769a:	3001      	adds	r0, #1
 800769c:	d02b      	beq.n	80076f6 <_malloc_r+0xd2>
 800769e:	6823      	ldr	r3, [r4, #0]
 80076a0:	442b      	add	r3, r5
 80076a2:	6023      	str	r3, [r4, #0]
 80076a4:	e00e      	b.n	80076c4 <_malloc_r+0xa0>
 80076a6:	6822      	ldr	r2, [r4, #0]
 80076a8:	1b52      	subs	r2, r2, r5
 80076aa:	d41e      	bmi.n	80076ea <_malloc_r+0xc6>
 80076ac:	2a0b      	cmp	r2, #11
 80076ae:	d916      	bls.n	80076de <_malloc_r+0xba>
 80076b0:	1961      	adds	r1, r4, r5
 80076b2:	42a3      	cmp	r3, r4
 80076b4:	6025      	str	r5, [r4, #0]
 80076b6:	bf18      	it	ne
 80076b8:	6059      	strne	r1, [r3, #4]
 80076ba:	6863      	ldr	r3, [r4, #4]
 80076bc:	bf08      	it	eq
 80076be:	6031      	streq	r1, [r6, #0]
 80076c0:	5162      	str	r2, [r4, r5]
 80076c2:	604b      	str	r3, [r1, #4]
 80076c4:	4638      	mov	r0, r7
 80076c6:	f104 060b 	add.w	r6, r4, #11
 80076ca:	f000 f865 	bl	8007798 <__malloc_unlock>
 80076ce:	f026 0607 	bic.w	r6, r6, #7
 80076d2:	1d23      	adds	r3, r4, #4
 80076d4:	1af2      	subs	r2, r6, r3
 80076d6:	d0b6      	beq.n	8007646 <_malloc_r+0x22>
 80076d8:	1b9b      	subs	r3, r3, r6
 80076da:	50a3      	str	r3, [r4, r2]
 80076dc:	e7b3      	b.n	8007646 <_malloc_r+0x22>
 80076de:	6862      	ldr	r2, [r4, #4]
 80076e0:	42a3      	cmp	r3, r4
 80076e2:	bf0c      	ite	eq
 80076e4:	6032      	streq	r2, [r6, #0]
 80076e6:	605a      	strne	r2, [r3, #4]
 80076e8:	e7ec      	b.n	80076c4 <_malloc_r+0xa0>
 80076ea:	4623      	mov	r3, r4
 80076ec:	6864      	ldr	r4, [r4, #4]
 80076ee:	e7b2      	b.n	8007656 <_malloc_r+0x32>
 80076f0:	4634      	mov	r4, r6
 80076f2:	6876      	ldr	r6, [r6, #4]
 80076f4:	e7b9      	b.n	800766a <_malloc_r+0x46>
 80076f6:	230c      	movs	r3, #12
 80076f8:	603b      	str	r3, [r7, #0]
 80076fa:	4638      	mov	r0, r7
 80076fc:	f000 f84c 	bl	8007798 <__malloc_unlock>
 8007700:	e7a1      	b.n	8007646 <_malloc_r+0x22>
 8007702:	6025      	str	r5, [r4, #0]
 8007704:	e7de      	b.n	80076c4 <_malloc_r+0xa0>
 8007706:	bf00      	nop
 8007708:	2001a8f8 	.word	0x2001a8f8

0800770c <_realloc_r>:
 800770c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007710:	4680      	mov	r8, r0
 8007712:	4614      	mov	r4, r2
 8007714:	460e      	mov	r6, r1
 8007716:	b921      	cbnz	r1, 8007722 <_realloc_r+0x16>
 8007718:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800771c:	4611      	mov	r1, r2
 800771e:	f7ff bf81 	b.w	8007624 <_malloc_r>
 8007722:	b92a      	cbnz	r2, 8007730 <_realloc_r+0x24>
 8007724:	f7ff ff12 	bl	800754c <_free_r>
 8007728:	4625      	mov	r5, r4
 800772a:	4628      	mov	r0, r5
 800772c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007730:	f000 f838 	bl	80077a4 <_malloc_usable_size_r>
 8007734:	4284      	cmp	r4, r0
 8007736:	4607      	mov	r7, r0
 8007738:	d802      	bhi.n	8007740 <_realloc_r+0x34>
 800773a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800773e:	d812      	bhi.n	8007766 <_realloc_r+0x5a>
 8007740:	4621      	mov	r1, r4
 8007742:	4640      	mov	r0, r8
 8007744:	f7ff ff6e 	bl	8007624 <_malloc_r>
 8007748:	4605      	mov	r5, r0
 800774a:	2800      	cmp	r0, #0
 800774c:	d0ed      	beq.n	800772a <_realloc_r+0x1e>
 800774e:	42bc      	cmp	r4, r7
 8007750:	4622      	mov	r2, r4
 8007752:	4631      	mov	r1, r6
 8007754:	bf28      	it	cs
 8007756:	463a      	movcs	r2, r7
 8007758:	f7ff fba4 	bl	8006ea4 <memcpy>
 800775c:	4631      	mov	r1, r6
 800775e:	4640      	mov	r0, r8
 8007760:	f7ff fef4 	bl	800754c <_free_r>
 8007764:	e7e1      	b.n	800772a <_realloc_r+0x1e>
 8007766:	4635      	mov	r5, r6
 8007768:	e7df      	b.n	800772a <_realloc_r+0x1e>
	...

0800776c <_sbrk_r>:
 800776c:	b538      	push	{r3, r4, r5, lr}
 800776e:	4d06      	ldr	r5, [pc, #24]	; (8007788 <_sbrk_r+0x1c>)
 8007770:	2300      	movs	r3, #0
 8007772:	4604      	mov	r4, r0
 8007774:	4608      	mov	r0, r1
 8007776:	602b      	str	r3, [r5, #0]
 8007778:	f000 f81e 	bl	80077b8 <_sbrk>
 800777c:	1c43      	adds	r3, r0, #1
 800777e:	d102      	bne.n	8007786 <_sbrk_r+0x1a>
 8007780:	682b      	ldr	r3, [r5, #0]
 8007782:	b103      	cbz	r3, 8007786 <_sbrk_r+0x1a>
 8007784:	6023      	str	r3, [r4, #0]
 8007786:	bd38      	pop	{r3, r4, r5, pc}
 8007788:	2001a900 	.word	0x2001a900

0800778c <__malloc_lock>:
 800778c:	4801      	ldr	r0, [pc, #4]	; (8007794 <__malloc_lock+0x8>)
 800778e:	f000 b811 	b.w	80077b4 <__retarget_lock_acquire_recursive>
 8007792:	bf00      	nop
 8007794:	2001a904 	.word	0x2001a904

08007798 <__malloc_unlock>:
 8007798:	4801      	ldr	r0, [pc, #4]	; (80077a0 <__malloc_unlock+0x8>)
 800779a:	f000 b80c 	b.w	80077b6 <__retarget_lock_release_recursive>
 800779e:	bf00      	nop
 80077a0:	2001a904 	.word	0x2001a904

080077a4 <_malloc_usable_size_r>:
 80077a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077a8:	1f18      	subs	r0, r3, #4
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	bfbc      	itt	lt
 80077ae:	580b      	ldrlt	r3, [r1, r0]
 80077b0:	18c0      	addlt	r0, r0, r3
 80077b2:	4770      	bx	lr

080077b4 <__retarget_lock_acquire_recursive>:
 80077b4:	4770      	bx	lr

080077b6 <__retarget_lock_release_recursive>:
 80077b6:	4770      	bx	lr

080077b8 <_sbrk>:
 80077b8:	4a04      	ldr	r2, [pc, #16]	; (80077cc <_sbrk+0x14>)
 80077ba:	6811      	ldr	r1, [r2, #0]
 80077bc:	4603      	mov	r3, r0
 80077be:	b909      	cbnz	r1, 80077c4 <_sbrk+0xc>
 80077c0:	4903      	ldr	r1, [pc, #12]	; (80077d0 <_sbrk+0x18>)
 80077c2:	6011      	str	r1, [r2, #0]
 80077c4:	6810      	ldr	r0, [r2, #0]
 80077c6:	4403      	add	r3, r0
 80077c8:	6013      	str	r3, [r2, #0]
 80077ca:	4770      	bx	lr
 80077cc:	2001a908 	.word	0x2001a908
 80077d0:	2001a910 	.word	0x2001a910

080077d4 <_init>:
 80077d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077d6:	bf00      	nop
 80077d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077da:	bc08      	pop	{r3}
 80077dc:	469e      	mov	lr, r3
 80077de:	4770      	bx	lr

080077e0 <_fini>:
 80077e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077e2:	bf00      	nop
 80077e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077e6:	bc08      	pop	{r3}
 80077e8:	469e      	mov	lr, r3
 80077ea:	4770      	bx	lr
